
firmware_Foguete_STM32f103_128kBFlash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c748  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f9c  0800c858  0800c858  0001c858  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7f4  0800d7f4  00020200  2**0
                  CONTENTS
  4 .ARM          00000000  0800d7f4  0800d7f4  00020200  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d7f4  0800d7f4  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7f4  0800d7f4  0001d7f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7f8  0800d7f8  0001d7f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800d7fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b80  20000200  0800d9fc  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d80  0800d9fc  00020d80  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df42  00000000  00000000  00020229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a02  00000000  00000000  0002e16b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00030b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  000319d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d33  00000000  00000000  000326f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000133c9  00000000  00000000  0004c423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000881fa  00000000  00000000  0005f7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e79e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f88  00000000  00000000  000e7a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c840 	.word	0x0800c840

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	0800c840 	.word	0x0800c840

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	4619      	mov	r1, r3
 8000be6:	2007      	movs	r0, #7
 8000be8:	f000 ff9c 	bl	8001b24 <bno055_writeData>
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	4619      	mov	r1, r3
 8000c02:	203d      	movs	r0, #61	; 0x3d
 8000c04:	f000 ff8e 	bl	8001b24 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d103      	bne.n	8000c16 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000c0e:	2013      	movs	r0, #19
 8000c10:	f000 ff7c 	bl	8001b0c <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000c14:	e002      	b.n	8000c1c <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000c16:	2007      	movs	r0, #7
 8000c18:	f000 ff78 	bl	8001b0c <bno055_delay>
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff ffe3 	bl	8000bf4 <bno055_setOperationMode>
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000c32:	b580      	push	{r7, lr}
 8000c34:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000c36:	200c      	movs	r0, #12
 8000c38:	f7ff ffdc 	bl	8000bf4 <bno055_setOperationMode>
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000c44:	2120      	movs	r1, #32
 8000c46:	203f      	movs	r0, #63	; 0x3f
 8000c48:	f000 ff6c 	bl	8001b24 <bno055_writeData>
  bno055_delay(700);
 8000c4c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000c50:	f000 ff5c 	bl	8001b0c <bno055_delay>
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  bno055_reset();
 8000c5e:	f7ff ffef 	bl	8000c40 <bno055_reset>

  uint8_t id = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	2201      	movs	r2, #1
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f001 f845 	bl	8001cfc <bno055_readData>
  if (id != BNO055_ID) {
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	2ba0      	cmp	r3, #160	; 0xa0
 8000c76:	d004      	beq.n	8000c82 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4809      	ldr	r0, [pc, #36]	; (8000ca4 <bno055_setup+0x4c>)
 8000c7e:	f007 ff9f 	bl	8008bc0 <iprintf>
  }
  bno055_setPage(0);
 8000c82:	2000      	movs	r0, #0
 8000c84:	f7ff ffa8 	bl	8000bd8 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000c88:	2100      	movs	r1, #0
 8000c8a:	203f      	movs	r0, #63	; 0x3f
 8000c8c:	f000 ff4a 	bl	8001b24 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000c90:	f7ff ffc8 	bl	8000c24 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000c94:	200a      	movs	r0, #10
 8000c96:	f000 ff39 	bl	8001b0c <bno055_delay>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	0800c858 	.word	0x0800c858

08000ca8 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8000ca8:	b5b0      	push	{r4, r5, r7, lr}
 8000caa:	b08e      	sub	sp, #56	; 0x38
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	70fb      	strb	r3, [r7, #3]
  bno055_setPage(0);
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f7ff ff8f 	bl	8000bd8 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8000cba:	78fb      	ldrb	r3, [r7, #3]
 8000cbc:	2b20      	cmp	r3, #32
 8000cbe:	d107      	bne.n	8000cd0 <bno055_getVector+0x28>
    bno055_readData(vec, buffer, 8);
 8000cc0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000cc4:	78fb      	ldrb	r3, [r7, #3]
 8000cc6:	2208      	movs	r2, #8
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f001 f817 	bl	8001cfc <bno055_readData>
 8000cce:	e006      	b.n	8000cde <bno055_getVector+0x36>
  else
    bno055_readData(vec, buffer, 6);
 8000cd0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000cd4:	78fb      	ldrb	r3, [r7, #3]
 8000cd6:	2206      	movs	r2, #6
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f001 f80f 	bl	8001cfc <bno055_readData>

  double scale = 1;
 8000cde:	f04f 0200 	mov.w	r2, #0
 8000ce2:	4b77      	ldr	r3, [pc, #476]	; (8000ec0 <bno055_getVector+0x218>)
 8000ce4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000ce8:	78fb      	ldrb	r3, [r7, #3]
 8000cea:	2b0e      	cmp	r3, #14
 8000cec:	d109      	bne.n	8000d02 <bno055_getVector+0x5a>
    scale = magScale;
 8000cee:	4b75      	ldr	r3, [pc, #468]	; (8000ec4 <bno055_getVector+0x21c>)
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fb76 	bl	80003e4 <__aeabi_ui2d>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8000d00:	e038      	b.n	8000d74 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000d02:	78fb      	ldrb	r3, [r7, #3]
 8000d04:	2b08      	cmp	r3, #8
 8000d06:	d005      	beq.n	8000d14 <bno055_getVector+0x6c>
 8000d08:	78fb      	ldrb	r3, [r7, #3]
 8000d0a:	2b28      	cmp	r3, #40	; 0x28
 8000d0c:	d002      	beq.n	8000d14 <bno055_getVector+0x6c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000d0e:	78fb      	ldrb	r3, [r7, #3]
 8000d10:	2b2e      	cmp	r3, #46	; 0x2e
 8000d12:	d109      	bne.n	8000d28 <bno055_getVector+0x80>
    scale = accelScale;
 8000d14:	4b6c      	ldr	r3, [pc, #432]	; (8000ec8 <bno055_getVector+0x220>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fb63 	bl	80003e4 <__aeabi_ui2d>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	460b      	mov	r3, r1
 8000d22:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8000d26:	e025      	b.n	8000d74 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8000d28:	78fb      	ldrb	r3, [r7, #3]
 8000d2a:	2b14      	cmp	r3, #20
 8000d2c:	d109      	bne.n	8000d42 <bno055_getVector+0x9a>
    scale = angularRateScale;
 8000d2e:	4b67      	ldr	r3, [pc, #412]	; (8000ecc <bno055_getVector+0x224>)
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fb56 	bl	80003e4 <__aeabi_ui2d>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8000d40:	e018      	b.n	8000d74 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_EULER) {
 8000d42:	78fb      	ldrb	r3, [r7, #3]
 8000d44:	2b1a      	cmp	r3, #26
 8000d46:	d109      	bne.n	8000d5c <bno055_getVector+0xb4>
    scale = eulerScale;
 8000d48:	4b61      	ldr	r3, [pc, #388]	; (8000ed0 <bno055_getVector+0x228>)
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fb49 	bl	80003e4 <__aeabi_ui2d>
 8000d52:	4602      	mov	r2, r0
 8000d54:	460b      	mov	r3, r1
 8000d56:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8000d5a:	e00b      	b.n	8000d74 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000d5c:	78fb      	ldrb	r3, [r7, #3]
 8000d5e:	2b20      	cmp	r3, #32
 8000d60:	d108      	bne.n	8000d74 <bno055_getVector+0xcc>
    scale = quaScale;
 8000d62:	4b5c      	ldr	r3, [pc, #368]	; (8000ed4 <bno055_getVector+0x22c>)
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fb3c 	bl	80003e4 <__aeabi_ui2d>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	460b      	mov	r3, r1
 8000d70:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8000d74:	f107 0308 	add.w	r3, r7, #8
 8000d78:	2220      	movs	r2, #32
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f007 f8a9 	bl	8007ed4 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8000d82:	78fb      	ldrb	r3, [r7, #3]
 8000d84:	2b20      	cmp	r3, #32
 8000d86:	d150      	bne.n	8000e2a <bno055_getVector+0x182>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000d88:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000d8c:	021b      	lsls	r3, r3, #8
 8000d8e:	b21a      	sxth	r2, r3
 8000d90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d94:	b21b      	sxth	r3, r3
 8000d96:	4313      	orrs	r3, r2
 8000d98:	b21b      	sxth	r3, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fb32 	bl	8000404 <__aeabi_i2d>
 8000da0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000da4:	f7ff fcc2 	bl	800072c <__aeabi_ddiv>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	e9c7 2302 	strd	r2, r3, [r7, #8]
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000db0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000db4:	021b      	lsls	r3, r3, #8
 8000db6:	b21a      	sxth	r2, r3
 8000db8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000dbc:	b21b      	sxth	r3, r3
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	b21b      	sxth	r3, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fb1e 	bl	8000404 <__aeabi_i2d>
 8000dc8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000dcc:	f7ff fcae 	bl	800072c <__aeabi_ddiv>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000dd8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000ddc:	021b      	lsls	r3, r3, #8
 8000dde:	b21a      	sxth	r2, r3
 8000de0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	4313      	orrs	r3, r2
 8000de8:	b21b      	sxth	r3, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fb0a 	bl	8000404 <__aeabi_i2d>
 8000df0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000df4:	f7ff fc9a 	bl	800072c <__aeabi_ddiv>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8000e00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e04:	021b      	lsls	r3, r3, #8
 8000e06:	b21a      	sxth	r2, r3
 8000e08:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000e0c:	b21b      	sxth	r3, r3
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	b21b      	sxth	r3, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff faf6 	bl	8000404 <__aeabi_i2d>
 8000e18:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000e1c:	f7ff fc86 	bl	800072c <__aeabi_ddiv>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8000e28:	e03b      	b.n	8000ea2 <bno055_getVector+0x1fa>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000e2a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000e2e:	021b      	lsls	r3, r3, #8
 8000e30:	b21a      	sxth	r2, r3
 8000e32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e36:	b21b      	sxth	r3, r3
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	b21b      	sxth	r3, r3
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fae1 	bl	8000404 <__aeabi_i2d>
 8000e42:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000e46:	f7ff fc71 	bl	800072c <__aeabi_ddiv>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000e52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000e56:	021b      	lsls	r3, r3, #8
 8000e58:	b21a      	sxth	r2, r3
 8000e5a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000e5e:	b21b      	sxth	r3, r3
 8000e60:	4313      	orrs	r3, r2
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff facd 	bl	8000404 <__aeabi_i2d>
 8000e6a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000e6e:	f7ff fc5d 	bl	800072c <__aeabi_ddiv>
 8000e72:	4602      	mov	r2, r0
 8000e74:	460b      	mov	r3, r1
 8000e76:	e9c7 2306 	strd	r2, r3, [r7, #24]
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000e7a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	b21a      	sxth	r2, r3
 8000e82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e86:	b21b      	sxth	r3, r3
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	b21b      	sxth	r3, r3
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fab9 	bl	8000404 <__aeabi_i2d>
 8000e92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000e96:	f7ff fc49 	bl	800072c <__aeabi_ddiv>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  return xyz;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	461d      	mov	r5, r3
 8000ea6:	f107 0408 	add.w	r4, r7, #8
 8000eaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000eb2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	3738      	adds	r7, #56	; 0x38
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	3ff00000 	.word	0x3ff00000
 8000ec4:	20000006 	.word	0x20000006
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000002 	.word	0x20000002
 8000ed0:	20000004 	.word	0x20000004
 8000ed4:	20000008 	.word	0x20000008

08000ed8 <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2108      	movs	r1, #8
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fedf 	bl	8000ca8 <bno055_getVector>
}
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <bno055_getVectorMagnetometer>:
bno055_vector_t bno055_getVectorMagnetometer() {
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	210e      	movs	r1, #14
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fed2 	bl	8000ca8 <bno055_getVector>
}
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <bno055_getVectorGyroscope>:
bno055_vector_t bno055_getVectorGyroscope() {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2114      	movs	r1, #20
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fec5 	bl	8000ca8 <bno055_getVector>
}
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <bno055_getVectorEuler>:
bno055_vector_t bno055_getVectorEuler() {
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_EULER);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	211a      	movs	r1, #26
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff feb8 	bl	8000ca8 <bno055_getVector>
}
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <bno055_getVectorLinearAccel>:
bno055_vector_t bno055_getVectorLinearAccel() {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2128      	movs	r1, #40	; 0x28
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff feab 	bl	8000ca8 <bno055_getVector>
}
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <bno055_getVectorGravity>:
bno055_vector_t bno055_getVectorGravity() {
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	212e      	movs	r1, #46	; 0x2e
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fe9e 	bl	8000ca8 <bno055_getVector>
}
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <bno055_getVectorQuaternion>:
bno055_vector_t bno055_getVectorQuaternion() {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2120      	movs	r1, #32
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fe91 	bl	8000ca8 <bno055_getVector>
}
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <SELECT>:
static uint8_t CardType;                                /* SD Type 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power condition Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2101      	movs	r1, #1
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <SELECT+0x14>)
 8000f9a:	f001 fde9 	bl	8002b70 <HAL_GPIO_WritePin>
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40010c00 	.word	0x40010c00

08000fa8 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2101      	movs	r1, #1
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <DESELECT+0x14>)
 8000fb2:	f001 fddd 	bl	8002b70 <HAL_GPIO_WritePin>
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40010c00 	.word	0x40010c00

08000fc0 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000fca:	bf00      	nop
 8000fcc:	4808      	ldr	r0, [pc, #32]	; (8000ff0 <SPI_TxByte+0x30>)
 8000fce:	f003 fd35 	bl	8004a3c <HAL_SPI_GetState>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d1f9      	bne.n	8000fcc <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000fd8:	1df9      	adds	r1, r7, #7
 8000fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <SPI_TxByte+0x30>)
 8000fe2:	f003 fa4d 	bl	8004480 <HAL_SPI_Transmit>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000ad8 	.word	0x20000ad8

08000ff4 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000ffa:	23ff      	movs	r3, #255	; 0xff
 8000ffc:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8001002:	bf00      	nop
 8001004:	4809      	ldr	r0, [pc, #36]	; (800102c <SPI_RxByte+0x38>)
 8001006:	f003 fd19 	bl	8004a3c <HAL_SPI_GetState>
 800100a:	4603      	mov	r3, r0
 800100c:	2b01      	cmp	r3, #1
 800100e:	d1f9      	bne.n	8001004 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8001010:	1dba      	adds	r2, r7, #6
 8001012:	1df9      	adds	r1, r7, #7
 8001014:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2301      	movs	r3, #1
 800101c:	4803      	ldr	r0, [pc, #12]	; (800102c <SPI_RxByte+0x38>)
 800101e:	f003 fb6b 	bl	80046f8 <HAL_SPI_TransmitReceive>

  return data;
 8001022:	79bb      	ldrb	r3, [r7, #6]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000ad8 	.word	0x20000ad8

08001030 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001038:	f7ff ffdc 	bl	8000ff4 <SPI_RxByte>
 800103c:	4603      	mov	r3, r0
 800103e:	461a      	mov	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	701a      	strb	r2, [r3, #0]
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <SD_ReadyWait+0x34>)
 8001054:	2232      	movs	r2, #50	; 0x32
 8001056:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001058:	f7ff ffcc 	bl	8000ff4 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 800105c:	f7ff ffca 	bl	8000ff4 <SPI_RxByte>
 8001060:	4603      	mov	r3, r0
 8001062:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	2bff      	cmp	r3, #255	; 0xff
 8001068:	d004      	beq.n	8001074 <SD_ReadyWait+0x28>
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <SD_ReadyWait+0x34>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1f3      	bne.n	800105c <SD_ReadyWait+0x10>

  return res;
 8001074:	79fb      	ldrb	r3, [r7, #7]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000b32 	.word	0x20000b32

08001084 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800108a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800108e:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8001090:	f7ff ff8a 	bl	8000fa8 <DESELECT>

  for(int i = 0; i < 10; i++)
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	e005      	b.n	80010a6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800109a:	20ff      	movs	r0, #255	; 0xff
 800109c:	f7ff ff90 	bl	8000fc0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	3301      	adds	r3, #1
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	2b09      	cmp	r3, #9
 80010aa:	ddf6      	ble.n	800109a <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 80010ac:	f7ff ff70 	bl	8000f90 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 80010b0:	2340      	movs	r3, #64	; 0x40
 80010b2:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80010c4:	2395      	movs	r3, #149	; 0x95
 80010c6:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	e009      	b.n	80010e2 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80010ce:	1d3a      	adds	r2, r7, #4
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4413      	add	r3, r2
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ff72 	bl	8000fc0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	3301      	adds	r3, #1
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2b05      	cmp	r3, #5
 80010e6:	ddf2      	ble.n	80010ce <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80010e8:	e002      	b.n	80010f0 <SD_PowerOn+0x6c>
  {
    Count--;
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	3b01      	subs	r3, #1
 80010ee:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80010f0:	f7ff ff80 	bl	8000ff4 <SPI_RxByte>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d002      	beq.n	8001100 <SD_PowerOn+0x7c>
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1f4      	bne.n	80010ea <SD_PowerOn+0x66>
  }

  DESELECT();
 8001100:	f7ff ff52 	bl	8000fa8 <DESELECT>
  SPI_TxByte(0XFF);
 8001104:	20ff      	movs	r0, #255	; 0xff
 8001106:	f7ff ff5b 	bl	8000fc0 <SPI_TxByte>

  PowerFlag = 1;
 800110a:	4b03      	ldr	r3, [pc, #12]	; (8001118 <SD_PowerOn+0x94>)
 800110c:	2201      	movs	r2, #1
 800110e:	701a      	strb	r2, [r3, #0]
}
 8001110:	bf00      	nop
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	2000021d 	.word	0x2000021d

0800111c <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <SD_PowerOff+0x14>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	2000021d 	.word	0x2000021d

08001134 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001138:	4b02      	ldr	r3, [pc, #8]	; (8001144 <SD_CheckPower+0x10>)
 800113a:	781b      	ldrb	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	2000021d 	.word	0x2000021d

08001148 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8001152:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <SD_RxDataBlock+0x68>)
 8001154:	220a      	movs	r2, #10
 8001156:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8001158:	f7ff ff4c 	bl	8000ff4 <SPI_RxByte>
 800115c:	4603      	mov	r3, r0
 800115e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	2bff      	cmp	r3, #255	; 0xff
 8001164:	d104      	bne.n	8001170 <SD_RxDataBlock+0x28>
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <SD_RxDataBlock+0x68>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1f3      	bne.n	8001158 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	2bfe      	cmp	r3, #254	; 0xfe
 8001174:	d001      	beq.n	800117a <SD_RxDataBlock+0x32>
    return FALSE;
 8001176:	2300      	movs	r3, #0
 8001178:	e016      	b.n	80011a8 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	1c5a      	adds	r2, r3, #1
 800117e:	607a      	str	r2, [r7, #4]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff55 	bl	8001030 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	607a      	str	r2, [r7, #4]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff4f 	bl	8001030 <SPI_RxBytePtr>
  } while(btr -= 2);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	3b02      	subs	r3, #2
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1ed      	bne.n	800117a <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 800119e:	f7ff ff29 	bl	8000ff4 <SPI_RxByte>
  SPI_RxByte();
 80011a2:	f7ff ff27 	bl	8000ff4 <SPI_RxByte>

  return TRUE;
 80011a6:	2301      	movs	r3, #1
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000b31 	.word	0x20000b31

080011b4 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80011c4:	f7ff ff42 	bl	800104c <SD_ReadyWait>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2bff      	cmp	r3, #255	; 0xff
 80011cc:	d001      	beq.n	80011d2 <SD_TxDataBlock+0x1e>
    return FALSE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e040      	b.n	8001254 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80011d2:	78fb      	ldrb	r3, [r7, #3]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fef3 	bl	8000fc0 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80011da:	78fb      	ldrb	r3, [r7, #3]
 80011dc:	2bfd      	cmp	r3, #253	; 0xfd
 80011de:	d031      	beq.n	8001244 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	1c5a      	adds	r2, r3, #1
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fee7 	bl	8000fc0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fee0 	bl	8000fc0 <SPI_TxByte>
    } while (--wc);
 8001200:	7bbb      	ldrb	r3, [r7, #14]
 8001202:	3b01      	subs	r3, #1
 8001204:	73bb      	strb	r3, [r7, #14]
 8001206:	7bbb      	ldrb	r3, [r7, #14]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1eb      	bne.n	80011e4 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 800120c:	f7ff fef2 	bl	8000ff4 <SPI_RxByte>
    SPI_RxByte();
 8001210:	f7ff fef0 	bl	8000ff4 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8001214:	e00b      	b.n	800122e <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8001216:	f7ff feed 	bl	8000ff4 <SPI_RxByte>
 800121a:	4603      	mov	r3, r0
 800121c:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	f003 031f 	and.w	r3, r3, #31
 8001224:	2b05      	cmp	r3, #5
 8001226:	d006      	beq.n	8001236 <SD_TxDataBlock+0x82>
        break;

      i++;
 8001228:	7b7b      	ldrb	r3, [r7, #13]
 800122a:	3301      	adds	r3, #1
 800122c:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 800122e:	7b7b      	ldrb	r3, [r7, #13]
 8001230:	2b40      	cmp	r3, #64	; 0x40
 8001232:	d9f0      	bls.n	8001216 <SD_TxDataBlock+0x62>
 8001234:	e000      	b.n	8001238 <SD_TxDataBlock+0x84>
        break;
 8001236:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001238:	bf00      	nop
 800123a:	f7ff fedb 	bl	8000ff4 <SPI_RxByte>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0fa      	beq.n	800123a <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	f003 031f 	and.w	r3, r3, #31
 800124a:	2b05      	cmp	r3, #5
 800124c:	d101      	bne.n	8001252 <SD_TxDataBlock+0x9e>
    return TRUE;
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001268:	f7ff fef0 	bl	800104c <SD_ReadyWait>
 800126c:	4603      	mov	r3, r0
 800126e:	2bff      	cmp	r3, #255	; 0xff
 8001270:	d001      	beq.n	8001276 <SD_SendCmd+0x1a>
    return 0xFF;
 8001272:	23ff      	movs	r3, #255	; 0xff
 8001274:	e040      	b.n	80012f8 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fea1 	bl	8000fc0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	0e1b      	lsrs	r3, r3, #24
 8001282:	b2db      	uxtb	r3, r3
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fe9b 	bl	8000fc0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	0c1b      	lsrs	r3, r3, #16
 800128e:	b2db      	uxtb	r3, r3
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fe95 	bl	8000fc0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	0a1b      	lsrs	r3, r3, #8
 800129a:	b2db      	uxtb	r3, r3
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fe8f 	bl	8000fc0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fe8a 	bl	8000fc0 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	2b40      	cmp	r3, #64	; 0x40
 80012b4:	d101      	bne.n	80012ba <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80012b6:	2395      	movs	r3, #149	; 0x95
 80012b8:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	2b48      	cmp	r3, #72	; 0x48
 80012be:	d101      	bne.n	80012c4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80012c0:	2387      	movs	r3, #135	; 0x87
 80012c2:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fe7a 	bl	8000fc0 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	2b4c      	cmp	r3, #76	; 0x4c
 80012d0:	d101      	bne.n	80012d6 <SD_SendCmd+0x7a>
    SPI_RxByte();
 80012d2:	f7ff fe8f 	bl	8000ff4 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80012d6:	230a      	movs	r3, #10
 80012d8:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80012da:	f7ff fe8b 	bl	8000ff4 <SPI_RxByte>
 80012de:	4603      	mov	r3, r0
 80012e0:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80012e2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	da05      	bge.n	80012f6 <SD_SendCmd+0x9a>
 80012ea:	7bbb      	ldrb	r3, [r7, #14]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	73bb      	strb	r3, [r7, #14]
 80012f0:	7bbb      	ldrb	r3, [r7, #14]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f1      	bne.n	80012da <SD_SendCmd+0x7e>

  return res;
 80012f6:	7b7b      	ldrb	r3, [r7, #13]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001310:	2301      	movs	r3, #1
 8001312:	e0d5      	b.n	80014c0 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001314:	4b6c      	ldr	r3, [pc, #432]	; (80014c8 <SD_disk_initialize+0x1c8>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <SD_disk_initialize+0x2a>
    return Stat;
 8001322:	4b69      	ldr	r3, [pc, #420]	; (80014c8 <SD_disk_initialize+0x1c8>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	b2db      	uxtb	r3, r3
 8001328:	e0ca      	b.n	80014c0 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 800132a:	f7ff feab 	bl	8001084 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 800132e:	f7ff fe2f 	bl	8000f90 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001336:	2100      	movs	r1, #0
 8001338:	2040      	movs	r0, #64	; 0x40
 800133a:	f7ff ff8f 	bl	800125c <SD_SendCmd>
 800133e:	4603      	mov	r3, r0
 8001340:	2b01      	cmp	r3, #1
 8001342:	f040 80a5 	bne.w	8001490 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001346:	4b61      	ldr	r3, [pc, #388]	; (80014cc <SD_disk_initialize+0x1cc>)
 8001348:	2264      	movs	r2, #100	; 0x64
 800134a:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800134c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001350:	2048      	movs	r0, #72	; 0x48
 8001352:	f7ff ff83 	bl	800125c <SD_SendCmd>
 8001356:	4603      	mov	r3, r0
 8001358:	2b01      	cmp	r3, #1
 800135a:	d158      	bne.n	800140e <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 800135c:	2300      	movs	r3, #0
 800135e:	73fb      	strb	r3, [r7, #15]
 8001360:	e00c      	b.n	800137c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001362:	7bfc      	ldrb	r4, [r7, #15]
 8001364:	f7ff fe46 	bl	8000ff4 <SPI_RxByte>
 8001368:	4603      	mov	r3, r0
 800136a:	461a      	mov	r2, r3
 800136c:	f104 0310 	add.w	r3, r4, #16
 8001370:	443b      	add	r3, r7
 8001372:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	3301      	adds	r3, #1
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	2b03      	cmp	r3, #3
 8001380:	d9ef      	bls.n	8001362 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001382:	7abb      	ldrb	r3, [r7, #10]
 8001384:	2b01      	cmp	r3, #1
 8001386:	f040 8083 	bne.w	8001490 <SD_disk_initialize+0x190>
 800138a:	7afb      	ldrb	r3, [r7, #11]
 800138c:	2baa      	cmp	r3, #170	; 0xaa
 800138e:	d17f      	bne.n	8001490 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001390:	2100      	movs	r1, #0
 8001392:	2077      	movs	r0, #119	; 0x77
 8001394:	f7ff ff62 	bl	800125c <SD_SendCmd>
 8001398:	4603      	mov	r3, r0
 800139a:	2b01      	cmp	r3, #1
 800139c:	d807      	bhi.n	80013ae <SD_disk_initialize+0xae>
 800139e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80013a2:	2069      	movs	r0, #105	; 0x69
 80013a4:	f7ff ff5a 	bl	800125c <SD_SendCmd>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d005      	beq.n	80013ba <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80013ae:	4b47      	ldr	r3, [pc, #284]	; (80014cc <SD_disk_initialize+0x1cc>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1eb      	bne.n	8001390 <SD_disk_initialize+0x90>
 80013b8:	e000      	b.n	80013bc <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80013ba:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80013bc:	4b43      	ldr	r3, [pc, #268]	; (80014cc <SD_disk_initialize+0x1cc>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d064      	beq.n	8001490 <SD_disk_initialize+0x190>
 80013c6:	2100      	movs	r1, #0
 80013c8:	207a      	movs	r0, #122	; 0x7a
 80013ca:	f7ff ff47 	bl	800125c <SD_SendCmd>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d15d      	bne.n	8001490 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80013d4:	2300      	movs	r3, #0
 80013d6:	73fb      	strb	r3, [r7, #15]
 80013d8:	e00c      	b.n	80013f4 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80013da:	7bfc      	ldrb	r4, [r7, #15]
 80013dc:	f7ff fe0a 	bl	8000ff4 <SPI_RxByte>
 80013e0:	4603      	mov	r3, r0
 80013e2:	461a      	mov	r2, r3
 80013e4:	f104 0310 	add.w	r3, r4, #16
 80013e8:	443b      	add	r3, r7
 80013ea:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	3301      	adds	r3, #1
 80013f2:	73fb      	strb	r3, [r7, #15]
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	2b03      	cmp	r3, #3
 80013f8:	d9ef      	bls.n	80013da <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80013fa:	7a3b      	ldrb	r3, [r7, #8]
 80013fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <SD_disk_initialize+0x108>
 8001404:	2306      	movs	r3, #6
 8001406:	e000      	b.n	800140a <SD_disk_initialize+0x10a>
 8001408:	2302      	movs	r3, #2
 800140a:	73bb      	strb	r3, [r7, #14]
 800140c:	e040      	b.n	8001490 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800140e:	2100      	movs	r1, #0
 8001410:	2077      	movs	r0, #119	; 0x77
 8001412:	f7ff ff23 	bl	800125c <SD_SendCmd>
 8001416:	4603      	mov	r3, r0
 8001418:	2b01      	cmp	r3, #1
 800141a:	d808      	bhi.n	800142e <SD_disk_initialize+0x12e>
 800141c:	2100      	movs	r1, #0
 800141e:	2069      	movs	r0, #105	; 0x69
 8001420:	f7ff ff1c 	bl	800125c <SD_SendCmd>
 8001424:	4603      	mov	r3, r0
 8001426:	2b01      	cmp	r3, #1
 8001428:	d801      	bhi.n	800142e <SD_disk_initialize+0x12e>
 800142a:	2302      	movs	r3, #2
 800142c:	e000      	b.n	8001430 <SD_disk_initialize+0x130>
 800142e:	2301      	movs	r3, #1
 8001430:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001432:	7bbb      	ldrb	r3, [r7, #14]
 8001434:	2b02      	cmp	r3, #2
 8001436:	d10e      	bne.n	8001456 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001438:	2100      	movs	r1, #0
 800143a:	2077      	movs	r0, #119	; 0x77
 800143c:	f7ff ff0e 	bl	800125c <SD_SendCmd>
 8001440:	4603      	mov	r3, r0
 8001442:	2b01      	cmp	r3, #1
 8001444:	d80e      	bhi.n	8001464 <SD_disk_initialize+0x164>
 8001446:	2100      	movs	r1, #0
 8001448:	2069      	movs	r0, #105	; 0x69
 800144a:	f7ff ff07 	bl	800125c <SD_SendCmd>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d107      	bne.n	8001464 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001454:	e00d      	b.n	8001472 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001456:	2100      	movs	r1, #0
 8001458:	2041      	movs	r0, #65	; 0x41
 800145a:	f7ff feff 	bl	800125c <SD_SendCmd>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d005      	beq.n	8001470 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001464:	4b19      	ldr	r3, [pc, #100]	; (80014cc <SD_disk_initialize+0x1cc>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1e1      	bne.n	8001432 <SD_disk_initialize+0x132>
 800146e:	e000      	b.n	8001472 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001470:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <SD_disk_initialize+0x1cc>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b00      	cmp	r3, #0
 800147a:	d007      	beq.n	800148c <SD_disk_initialize+0x18c>
 800147c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001480:	2050      	movs	r0, #80	; 0x50
 8001482:	f7ff feeb 	bl	800125c <SD_SendCmd>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001490:	4a0f      	ldr	r2, [pc, #60]	; (80014d0 <SD_disk_initialize+0x1d0>)
 8001492:	7bbb      	ldrb	r3, [r7, #14]
 8001494:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001496:	f7ff fd87 	bl	8000fa8 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800149a:	f7ff fdab 	bl	8000ff4 <SPI_RxByte>

  if (type)
 800149e:	7bbb      	ldrb	r3, [r7, #14]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d008      	beq.n	80014b6 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <SD_disk_initialize+0x1c8>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	f023 0301 	bic.w	r3, r3, #1
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <SD_disk_initialize+0x1c8>)
 80014b2:	701a      	strb	r2, [r3, #0]
 80014b4:	e001      	b.n	80014ba <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80014b6:	f7ff fe31 	bl	800111c <SD_PowerOff>
  }

  return Stat;
 80014ba:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <SD_disk_initialize+0x1c8>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	b2db      	uxtb	r3, r3
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd90      	pop	{r4, r7, pc}
 80014c8:	2000000a 	.word	0x2000000a
 80014cc:	20000b31 	.word	0x20000b31
 80014d0:	2000021c 	.word	0x2000021c

080014d4 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <SD_disk_status+0x14>
    return STA_NOINIT;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e002      	b.n	80014ee <SD_disk_status+0x1a>

  return Stat;
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <SD_disk_status+0x24>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	b2db      	uxtb	r3, r3
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	2000000a 	.word	0x2000000a

080014fc <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	4603      	mov	r3, r0
 800150a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d102      	bne.n	8001518 <SD_disk_read+0x1c>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <SD_disk_read+0x20>
    return RES_PARERR;
 8001518:	2304      	movs	r3, #4
 800151a:	e051      	b.n	80015c0 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 800151c:	4b2a      	ldr	r3, [pc, #168]	; (80015c8 <SD_disk_read+0xcc>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <SD_disk_read+0x32>
    return RES_NOTRDY;
 800152a:	2303      	movs	r3, #3
 800152c:	e048      	b.n	80015c0 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 800152e:	4b27      	ldr	r3, [pc, #156]	; (80015cc <SD_disk_read+0xd0>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	2b00      	cmp	r3, #0
 8001538:	d102      	bne.n	8001540 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	025b      	lsls	r3, r3, #9
 800153e:	607b      	str	r3, [r7, #4]

  SELECT();
 8001540:	f7ff fd26 	bl	8000f90 <SELECT>

  if (count == 1)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d111      	bne.n	800156e <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	2051      	movs	r0, #81	; 0x51
 800154e:	f7ff fe85 	bl	800125c <SD_SendCmd>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d129      	bne.n	80015ac <SD_disk_read+0xb0>
 8001558:	f44f 7100 	mov.w	r1, #512	; 0x200
 800155c:	68b8      	ldr	r0, [r7, #8]
 800155e:	f7ff fdf3 	bl	8001148 <SD_RxDataBlock>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d021      	beq.n	80015ac <SD_disk_read+0xb0>
      count = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	e01e      	b.n	80015ac <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	2052      	movs	r0, #82	; 0x52
 8001572:	f7ff fe73 	bl	800125c <SD_SendCmd>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d117      	bne.n	80015ac <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 800157c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001580:	68b8      	ldr	r0, [r7, #8]
 8001582:	f7ff fde1 	bl	8001148 <SD_RxDataBlock>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00a      	beq.n	80015a2 <SD_disk_read+0xa6>
          break;

        buff += 512;
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001592:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	3b01      	subs	r3, #1
 8001598:	603b      	str	r3, [r7, #0]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1ed      	bne.n	800157c <SD_disk_read+0x80>
 80015a0:	e000      	b.n	80015a4 <SD_disk_read+0xa8>
          break;
 80015a2:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 80015a4:	2100      	movs	r1, #0
 80015a6:	204c      	movs	r0, #76	; 0x4c
 80015a8:	f7ff fe58 	bl	800125c <SD_SendCmd>
    }
  }

  DESELECT();
 80015ac:	f7ff fcfc 	bl	8000fa8 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80015b0:	f7ff fd20 	bl	8000ff4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	bf14      	ite	ne
 80015ba:	2301      	movne	r3, #1
 80015bc:	2300      	moveq	r3, #0
 80015be:	b2db      	uxtb	r3, r3
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	2000000a 	.word	0x2000000a
 80015cc:	2000021c 	.word	0x2000021c

080015d0 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	4603      	mov	r3, r0
 80015de:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d102      	bne.n	80015ec <SD_disk_write+0x1c>
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <SD_disk_write+0x20>
    return RES_PARERR;
 80015ec:	2304      	movs	r3, #4
 80015ee:	e06b      	b.n	80016c8 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80015f0:	4b37      	ldr	r3, [pc, #220]	; (80016d0 <SD_disk_write+0x100>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <SD_disk_write+0x32>
    return RES_NOTRDY;
 80015fe:	2303      	movs	r3, #3
 8001600:	e062      	b.n	80016c8 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8001602:	4b33      	ldr	r3, [pc, #204]	; (80016d0 <SD_disk_write+0x100>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001610:	2302      	movs	r3, #2
 8001612:	e059      	b.n	80016c8 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001614:	4b2f      	ldr	r3, [pc, #188]	; (80016d4 <SD_disk_write+0x104>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	025b      	lsls	r3, r3, #9
 8001624:	607b      	str	r3, [r7, #4]

  SELECT();
 8001626:	f7ff fcb3 	bl	8000f90 <SELECT>

  if (count == 1)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d110      	bne.n	8001652 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	2058      	movs	r0, #88	; 0x58
 8001634:	f7ff fe12 	bl	800125c <SD_SendCmd>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d13a      	bne.n	80016b4 <SD_disk_write+0xe4>
 800163e:	21fe      	movs	r1, #254	; 0xfe
 8001640:	68b8      	ldr	r0, [r7, #8]
 8001642:	f7ff fdb7 	bl	80011b4 <SD_TxDataBlock>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d033      	beq.n	80016b4 <SD_disk_write+0xe4>
      count = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	e030      	b.n	80016b4 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001652:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <SD_disk_write+0x104>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d007      	beq.n	800166e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800165e:	2100      	movs	r1, #0
 8001660:	2077      	movs	r0, #119	; 0x77
 8001662:	f7ff fdfb 	bl	800125c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001666:	6839      	ldr	r1, [r7, #0]
 8001668:	2057      	movs	r0, #87	; 0x57
 800166a:	f7ff fdf7 	bl	800125c <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	2059      	movs	r0, #89	; 0x59
 8001672:	f7ff fdf3 	bl	800125c <SD_SendCmd>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d11b      	bne.n	80016b4 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 800167c:	21fc      	movs	r1, #252	; 0xfc
 800167e:	68b8      	ldr	r0, [r7, #8]
 8001680:	f7ff fd98 	bl	80011b4 <SD_TxDataBlock>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00a      	beq.n	80016a0 <SD_disk_write+0xd0>
          break;

        buff += 512;
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001690:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	3b01      	subs	r3, #1
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1ee      	bne.n	800167c <SD_disk_write+0xac>
 800169e:	e000      	b.n	80016a2 <SD_disk_write+0xd2>
          break;
 80016a0:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 80016a2:	21fd      	movs	r1, #253	; 0xfd
 80016a4:	2000      	movs	r0, #0
 80016a6:	f7ff fd85 	bl	80011b4 <SD_TxDataBlock>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d101      	bne.n	80016b4 <SD_disk_write+0xe4>
      {
        count = 1;
 80016b0:	2301      	movs	r3, #1
 80016b2:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80016b4:	f7ff fc78 	bl	8000fa8 <DESELECT>
  SPI_RxByte();
 80016b8:	f7ff fc9c 	bl	8000ff4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	bf14      	ite	ne
 80016c2:	2301      	movne	r3, #1
 80016c4:	2300      	moveq	r3, #0
 80016c6:	b2db      	uxtb	r3, r3
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	2000000a 	.word	0x2000000a
 80016d4:	2000021c 	.word	0x2000021c

080016d8 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b08b      	sub	sp, #44	; 0x2c
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	603a      	str	r2, [r7, #0]
 80016e2:	71fb      	strb	r3, [r7, #7]
 80016e4:	460b      	mov	r3, r1
 80016e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80016f2:	2304      	movs	r3, #4
 80016f4:	e11b      	b.n	800192e <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80016fc:	79bb      	ldrb	r3, [r7, #6]
 80016fe:	2b05      	cmp	r3, #5
 8001700:	d129      	bne.n	8001756 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d017      	beq.n	800173a <SD_disk_ioctl+0x62>
 800170a:	2b02      	cmp	r3, #2
 800170c:	dc1f      	bgt.n	800174e <SD_disk_ioctl+0x76>
 800170e:	2b00      	cmp	r3, #0
 8001710:	d002      	beq.n	8001718 <SD_disk_ioctl+0x40>
 8001712:	2b01      	cmp	r3, #1
 8001714:	d00b      	beq.n	800172e <SD_disk_ioctl+0x56>
 8001716:	e01a      	b.n	800174e <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001718:	f7ff fd0c 	bl	8001134 <SD_CheckPower>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001722:	f7ff fcfb 	bl	800111c <SD_PowerOff>
      res = RES_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800172c:	e0fd      	b.n	800192a <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 800172e:	f7ff fca9 	bl	8001084 <SD_PowerOn>
      res = RES_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001738:	e0f7      	b.n	800192a <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800173a:	6a3b      	ldr	r3, [r7, #32]
 800173c:	1c5c      	adds	r4, r3, #1
 800173e:	f7ff fcf9 	bl	8001134 <SD_CheckPower>
 8001742:	4603      	mov	r3, r0
 8001744:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001746:	2300      	movs	r3, #0
 8001748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800174c:	e0ed      	b.n	800192a <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 800174e:	2304      	movs	r3, #4
 8001750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001754:	e0e9      	b.n	800192a <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8001756:	4b78      	ldr	r3, [pc, #480]	; (8001938 <SD_disk_ioctl+0x260>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	b2db      	uxtb	r3, r3
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001764:	2303      	movs	r3, #3
 8001766:	e0e2      	b.n	800192e <SD_disk_ioctl+0x256>

    SELECT();
 8001768:	f7ff fc12 	bl	8000f90 <SELECT>

    switch (ctrl)
 800176c:	79bb      	ldrb	r3, [r7, #6]
 800176e:	2b0d      	cmp	r3, #13
 8001770:	f200 80cc 	bhi.w	800190c <SD_disk_ioctl+0x234>
 8001774:	a201      	add	r2, pc, #4	; (adr r2, 800177c <SD_disk_ioctl+0xa4>)
 8001776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177a:	bf00      	nop
 800177c:	08001877 	.word	0x08001877
 8001780:	080017b5 	.word	0x080017b5
 8001784:	08001867 	.word	0x08001867
 8001788:	0800190d 	.word	0x0800190d
 800178c:	0800190d 	.word	0x0800190d
 8001790:	0800190d 	.word	0x0800190d
 8001794:	0800190d 	.word	0x0800190d
 8001798:	0800190d 	.word	0x0800190d
 800179c:	0800190d 	.word	0x0800190d
 80017a0:	0800190d 	.word	0x0800190d
 80017a4:	0800190d 	.word	0x0800190d
 80017a8:	08001889 	.word	0x08001889
 80017ac:	080018ad 	.word	0x080018ad
 80017b0:	080018d1 	.word	0x080018d1
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80017b4:	2100      	movs	r1, #0
 80017b6:	2049      	movs	r0, #73	; 0x49
 80017b8:	f7ff fd50 	bl	800125c <SD_SendCmd>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f040 80a8 	bne.w	8001914 <SD_disk_ioctl+0x23c>
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	2110      	movs	r1, #16
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fcbc 	bl	8001148 <SD_RxDataBlock>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 809e 	beq.w	8001914 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 80017d8:	7b3b      	ldrb	r3, [r7, #12]
 80017da:	099b      	lsrs	r3, r3, #6
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d10e      	bne.n	8001800 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80017e2:	7d7b      	ldrb	r3, [r7, #21]
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	7d3b      	ldrb	r3, [r7, #20]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	4413      	add	r3, r2
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	3301      	adds	r3, #1
 80017f4:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80017f6:	8bfb      	ldrh	r3, [r7, #30]
 80017f8:	029a      	lsls	r2, r3, #10
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	e02e      	b.n	800185e <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001800:	7c7b      	ldrb	r3, [r7, #17]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	b2da      	uxtb	r2, r3
 8001808:	7dbb      	ldrb	r3, [r7, #22]
 800180a:	09db      	lsrs	r3, r3, #7
 800180c:	b2db      	uxtb	r3, r3
 800180e:	4413      	add	r3, r2
 8001810:	b2da      	uxtb	r2, r3
 8001812:	7d7b      	ldrb	r3, [r7, #21]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	b2db      	uxtb	r3, r3
 8001818:	f003 0306 	and.w	r3, r3, #6
 800181c:	b2db      	uxtb	r3, r3
 800181e:	4413      	add	r3, r2
 8001820:	b2db      	uxtb	r3, r3
 8001822:	3302      	adds	r3, #2
 8001824:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001828:	7d3b      	ldrb	r3, [r7, #20]
 800182a:	099b      	lsrs	r3, r3, #6
 800182c:	b2db      	uxtb	r3, r3
 800182e:	b29a      	uxth	r2, r3
 8001830:	7cfb      	ldrb	r3, [r7, #19]
 8001832:	b29b      	uxth	r3, r3
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	b29b      	uxth	r3, r3
 8001838:	4413      	add	r3, r2
 800183a:	b29a      	uxth	r2, r3
 800183c:	7cbb      	ldrb	r3, [r7, #18]
 800183e:	029b      	lsls	r3, r3, #10
 8001840:	b29b      	uxth	r3, r3
 8001842:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001846:	b29b      	uxth	r3, r3
 8001848:	4413      	add	r3, r2
 800184a:	b29b      	uxth	r3, r3
 800184c:	3301      	adds	r3, #1
 800184e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001850:	8bfa      	ldrh	r2, [r7, #30]
 8001852:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001856:	3b09      	subs	r3, #9
 8001858:	409a      	lsls	r2, r3
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001864:	e056      	b.n	8001914 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800186c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800186e:	2300      	movs	r3, #0
 8001870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001874:	e055      	b.n	8001922 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001876:	f7ff fbe9 	bl	800104c <SD_ReadyWait>
 800187a:	4603      	mov	r3, r0
 800187c:	2bff      	cmp	r3, #255	; 0xff
 800187e:	d14b      	bne.n	8001918 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001880:	2300      	movs	r3, #0
 8001882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001886:	e047      	b.n	8001918 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001888:	2100      	movs	r1, #0
 800188a:	2049      	movs	r0, #73	; 0x49
 800188c:	f7ff fce6 	bl	800125c <SD_SendCmd>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d142      	bne.n	800191c <SD_disk_ioctl+0x244>
 8001896:	2110      	movs	r1, #16
 8001898:	6a38      	ldr	r0, [r7, #32]
 800189a:	f7ff fc55 	bl	8001148 <SD_RxDataBlock>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d03b      	beq.n	800191c <SD_disk_ioctl+0x244>
        res = RES_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80018aa:	e037      	b.n	800191c <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80018ac:	2100      	movs	r1, #0
 80018ae:	204a      	movs	r0, #74	; 0x4a
 80018b0:	f7ff fcd4 	bl	800125c <SD_SendCmd>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d132      	bne.n	8001920 <SD_disk_ioctl+0x248>
 80018ba:	2110      	movs	r1, #16
 80018bc:	6a38      	ldr	r0, [r7, #32]
 80018be:	f7ff fc43 	bl	8001148 <SD_RxDataBlock>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d02b      	beq.n	8001920 <SD_disk_ioctl+0x248>
        res = RES_OK;
 80018c8:	2300      	movs	r3, #0
 80018ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80018ce:	e027      	b.n	8001920 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 80018d0:	2100      	movs	r1, #0
 80018d2:	207a      	movs	r0, #122	; 0x7a
 80018d4:	f7ff fcc2 	bl	800125c <SD_SendCmd>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d116      	bne.n	800190c <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 80018de:	2300      	movs	r3, #0
 80018e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80018e4:	e00b      	b.n	80018fe <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 80018e6:	6a3c      	ldr	r4, [r7, #32]
 80018e8:	1c63      	adds	r3, r4, #1
 80018ea:	623b      	str	r3, [r7, #32]
 80018ec:	f7ff fb82 	bl	8000ff4 <SPI_RxByte>
 80018f0:	4603      	mov	r3, r0
 80018f2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80018f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018f8:	3301      	adds	r3, #1
 80018fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80018fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001902:	2b03      	cmp	r3, #3
 8001904:	d9ef      	bls.n	80018e6 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 800190c:	2304      	movs	r3, #4
 800190e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001912:	e006      	b.n	8001922 <SD_disk_ioctl+0x24a>
      break;
 8001914:	bf00      	nop
 8001916:	e004      	b.n	8001922 <SD_disk_ioctl+0x24a>
      break;
 8001918:	bf00      	nop
 800191a:	e002      	b.n	8001922 <SD_disk_ioctl+0x24a>
      break;
 800191c:	bf00      	nop
 800191e:	e000      	b.n	8001922 <SD_disk_ioctl+0x24a>
      break;
 8001920:	bf00      	nop
    }

    DESELECT();
 8001922:	f7ff fb41 	bl	8000fa8 <DESELECT>
    SPI_RxByte();
 8001926:	f7ff fb65 	bl	8000ff4 <SPI_RxByte>
  }

  return res;
 800192a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800192e:	4618      	mov	r0, r3
 8001930:	372c      	adds	r7, #44	; 0x2c
 8001932:	46bd      	mov	sp, r7
 8001934:	bd90      	pop	{r4, r7, pc}
 8001936:	bf00      	nop
 8001938:	2000000a 	.word	0x2000000a

0800193c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001942:	f107 0310 	add.w	r3, r7, #16
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001950:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <MX_GPIO_Init+0xcc>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4a2c      	ldr	r2, [pc, #176]	; (8001a08 <MX_GPIO_Init+0xcc>)
 8001956:	f043 0310 	orr.w	r3, r3, #16
 800195a:	6193      	str	r3, [r2, #24]
 800195c:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <MX_GPIO_Init+0xcc>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f003 0310 	and.w	r3, r3, #16
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001968:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <MX_GPIO_Init+0xcc>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	4a26      	ldr	r2, [pc, #152]	; (8001a08 <MX_GPIO_Init+0xcc>)
 800196e:	f043 0320 	orr.w	r3, r3, #32
 8001972:	6193      	str	r3, [r2, #24]
 8001974:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <MX_GPIO_Init+0xcc>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f003 0320 	and.w	r3, r3, #32
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001980:	4b21      	ldr	r3, [pc, #132]	; (8001a08 <MX_GPIO_Init+0xcc>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	4a20      	ldr	r2, [pc, #128]	; (8001a08 <MX_GPIO_Init+0xcc>)
 8001986:	f043 0304 	orr.w	r3, r3, #4
 800198a:	6193      	str	r3, [r2, #24]
 800198c:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <MX_GPIO_Init+0xcc>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001998:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <MX_GPIO_Init+0xcc>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	4a1a      	ldr	r2, [pc, #104]	; (8001a08 <MX_GPIO_Init+0xcc>)
 800199e:	f043 0308 	orr.w	r3, r3, #8
 80019a2:	6193      	str	r3, [r2, #24]
 80019a4:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <MX_GPIO_Init+0xcc>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	603b      	str	r3, [r7, #0]
 80019ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019b0:	2200      	movs	r2, #0
 80019b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019b6:	4815      	ldr	r0, [pc, #84]	; (8001a0c <MX_GPIO_Init+0xd0>)
 80019b8:	f001 f8da 	bl	8002b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80019bc:	2200      	movs	r2, #0
 80019be:	2101      	movs	r1, #1
 80019c0:	4813      	ldr	r0, [pc, #76]	; (8001a10 <MX_GPIO_Init+0xd4>)
 80019c2:	f001 f8d5 	bl	8002b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019cc:	2301      	movs	r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d4:	2302      	movs	r3, #2
 80019d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	4619      	mov	r1, r3
 80019de:	480b      	ldr	r0, [pc, #44]	; (8001a0c <MX_GPIO_Init+0xd0>)
 80019e0:	f000 ff42 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019e4:	2301      	movs	r3, #1
 80019e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e8:	2301      	movs	r3, #1
 80019ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2302      	movs	r3, #2
 80019f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f4:	f107 0310 	add.w	r3, r7, #16
 80019f8:	4619      	mov	r1, r3
 80019fa:	4805      	ldr	r0, [pc, #20]	; (8001a10 <MX_GPIO_Init+0xd4>)
 80019fc:	f000 ff34 	bl	8002868 <HAL_GPIO_Init>

}
 8001a00:	bf00      	nop
 8001a02:	3720      	adds	r7, #32
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40011000 	.word	0x40011000
 8001a10:	40010c00 	.word	0x40010c00

08001a14 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <MX_I2C2_Init+0x50>)
 8001a1a:	4a13      	ldr	r2, [pc, #76]	; (8001a68 <MX_I2C2_Init+0x54>)
 8001a1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <MX_I2C2_Init+0x50>)
 8001a20:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <MX_I2C2_Init+0x58>)
 8001a22:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <MX_I2C2_Init+0x50>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <MX_I2C2_Init+0x50>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <MX_I2C2_Init+0x50>)
 8001a32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a36:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a38:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <MX_I2C2_Init+0x50>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <MX_I2C2_Init+0x50>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a44:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <MX_I2C2_Init+0x50>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <MX_I2C2_Init+0x50>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a50:	4804      	ldr	r0, [pc, #16]	; (8001a64 <MX_I2C2_Init+0x50>)
 8001a52:	f001 f8a5 	bl	8002ba0 <HAL_I2C_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a5c:	f000 fb99 	bl	8002192 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000220 	.word	0x20000220
 8001a68:	40005800 	.word	0x40005800
 8001a6c:	00061a80 	.word	0x00061a80

08001a70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0310 	add.w	r3, r7, #16
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a16      	ldr	r2, [pc, #88]	; (8001ae4 <HAL_I2C_MspInit+0x74>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d124      	bne.n	8001ada <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a90:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <HAL_I2C_MspInit+0x78>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	4a14      	ldr	r2, [pc, #80]	; (8001ae8 <HAL_I2C_MspInit+0x78>)
 8001a96:	f043 0308 	orr.w	r3, r3, #8
 8001a9a:	6193      	str	r3, [r2, #24]
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <HAL_I2C_MspInit+0x78>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001aa8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001aac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aae:	2312      	movs	r3, #18
 8001ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab6:	f107 0310 	add.w	r3, r7, #16
 8001aba:	4619      	mov	r1, r3
 8001abc:	480b      	ldr	r0, [pc, #44]	; (8001aec <HAL_I2C_MspInit+0x7c>)
 8001abe:	f000 fed3 	bl	8002868 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_I2C_MspInit+0x78>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	4a08      	ldr	r2, [pc, #32]	; (8001ae8 <HAL_I2C_MspInit+0x78>)
 8001ac8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001acc:	61d3      	str	r3, [r2, #28]
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_I2C_MspInit+0x78>)
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001ada:	bf00      	nop
 8001adc:	3720      	adds	r7, #32
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40005800 	.word	0x40005800
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40010c00 	.word	0x40010c00

08001af0 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001af8:	4a03      	ldr	r2, [pc, #12]	; (8001b08 <bno055_assignI2C+0x18>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6013      	str	r3, [r2, #0]
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr
 8001b08:	20000274 	.word	0x20000274

08001b0c <bno055_delay>:

void bno055_delay(int time) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 fd9e 	bl	8002658 <HAL_Delay>
#endif
}
 8001b1c:	bf00      	nop
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	460a      	mov	r2, r1
 8001b2e:	71fb      	strb	r3, [r7, #7]
 8001b30:	4613      	mov	r3, r2
 8001b32:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	733b      	strb	r3, [r7, #12]
 8001b38:	79bb      	ldrb	r3, [r7, #6]
 8001b3a:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001b3c:	4b5a      	ldr	r3, [pc, #360]	; (8001ca8 <bno055_writeData+0x184>)
 8001b3e:	6818      	ldr	r0, [r3, #0]
 8001b40:	f107 020c 	add.w	r2, r7, #12
 8001b44:	230a      	movs	r3, #10
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	2302      	movs	r3, #2
 8001b4a:	2152      	movs	r1, #82	; 0x52
 8001b4c:	f001 f96c 	bl	8002e28 <HAL_I2C_Master_Transmit>
 8001b50:	4603      	mov	r3, r0
 8001b52:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001b54:	7dfb      	ldrb	r3, [r7, #23]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 80a0 	beq.w	8001c9c <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001b5c:	7dfb      	ldrb	r3, [r7, #23]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d103      	bne.n	8001b6a <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001b62:	4852      	ldr	r0, [pc, #328]	; (8001cac <bno055_writeData+0x188>)
 8001b64:	f007 f8b2 	bl	8008ccc <puts>
 8001b68:	e012      	b.n	8001b90 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d103      	bne.n	8001b78 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001b70:	484f      	ldr	r0, [pc, #316]	; (8001cb0 <bno055_writeData+0x18c>)
 8001b72:	f007 f8ab 	bl	8008ccc <puts>
 8001b76:	e00b      	b.n	8001b90 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001b78:	7dfb      	ldrb	r3, [r7, #23]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d103      	bne.n	8001b86 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001b7e:	484d      	ldr	r0, [pc, #308]	; (8001cb4 <bno055_writeData+0x190>)
 8001b80:	f007 f8a4 	bl	8008ccc <puts>
 8001b84:	e004      	b.n	8001b90 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	484b      	ldr	r0, [pc, #300]	; (8001cb8 <bno055_writeData+0x194>)
 8001b8c:	f007 f818 	bl	8008bc0 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001b90:	4b45      	ldr	r3, [pc, #276]	; (8001ca8 <bno055_writeData+0x184>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f001 fcb2 	bl	80034fe <HAL_I2C_GetError>
 8001b9a:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d07e      	beq.n	8001ca0 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d103      	bne.n	8001bb0 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001ba8:	4844      	ldr	r0, [pc, #272]	; (8001cbc <bno055_writeData+0x198>)
 8001baa:	f007 f88f 	bl	8008ccc <puts>
 8001bae:	e021      	b.n	8001bf4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d103      	bne.n	8001bbe <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001bb6:	4842      	ldr	r0, [pc, #264]	; (8001cc0 <bno055_writeData+0x19c>)
 8001bb8:	f007 f888 	bl	8008ccc <puts>
 8001bbc:	e01a      	b.n	8001bf4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d103      	bne.n	8001bcc <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001bc4:	483f      	ldr	r0, [pc, #252]	; (8001cc4 <bno055_writeData+0x1a0>)
 8001bc6:	f007 f881 	bl	8008ccc <puts>
 8001bca:	e013      	b.n	8001bf4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d103      	bne.n	8001bda <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001bd2:	483d      	ldr	r0, [pc, #244]	; (8001cc8 <bno055_writeData+0x1a4>)
 8001bd4:	f007 f87a 	bl	8008ccc <puts>
 8001bd8:	e00c      	b.n	8001bf4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	2b10      	cmp	r3, #16
 8001bde:	d103      	bne.n	8001be8 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001be0:	483a      	ldr	r0, [pc, #232]	; (8001ccc <bno055_writeData+0x1a8>)
 8001be2:	f007 f873 	bl	8008ccc <puts>
 8001be6:	e005      	b.n	8001bf4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	2b20      	cmp	r3, #32
 8001bec:	d102      	bne.n	8001bf4 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001bee:	4838      	ldr	r0, [pc, #224]	; (8001cd0 <bno055_writeData+0x1ac>)
 8001bf0:	f007 f86c 	bl	8008ccc <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001bf4:	4b2c      	ldr	r3, [pc, #176]	; (8001ca8 <bno055_writeData+0x184>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f001 fc73 	bl	80034e4 <HAL_I2C_GetState>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d103      	bne.n	8001c10 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001c08:	4832      	ldr	r0, [pc, #200]	; (8001cd4 <bno055_writeData+0x1b0>)
 8001c0a:	f007 f85f 	bl	8008ccc <puts>
 8001c0e:	e048      	b.n	8001ca2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	2b20      	cmp	r3, #32
 8001c14:	d103      	bne.n	8001c1e <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001c16:	482f      	ldr	r0, [pc, #188]	; (8001cd4 <bno055_writeData+0x1b0>)
 8001c18:	f007 f858 	bl	8008ccc <puts>
 8001c1c:	e041      	b.n	8001ca2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	2b24      	cmp	r3, #36	; 0x24
 8001c22:	d103      	bne.n	8001c2c <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001c24:	482c      	ldr	r0, [pc, #176]	; (8001cd8 <bno055_writeData+0x1b4>)
 8001c26:	f007 f851 	bl	8008ccc <puts>
 8001c2a:	e03a      	b.n	8001ca2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	2b21      	cmp	r3, #33	; 0x21
 8001c30:	d103      	bne.n	8001c3a <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001c32:	482a      	ldr	r0, [pc, #168]	; (8001cdc <bno055_writeData+0x1b8>)
 8001c34:	f007 f84a 	bl	8008ccc <puts>
 8001c38:	e033      	b.n	8001ca2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	2b22      	cmp	r3, #34	; 0x22
 8001c3e:	d103      	bne.n	8001c48 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001c40:	4827      	ldr	r0, [pc, #156]	; (8001ce0 <bno055_writeData+0x1bc>)
 8001c42:	f007 f843 	bl	8008ccc <puts>
 8001c46:	e02c      	b.n	8001ca2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
 8001c4a:	2b28      	cmp	r3, #40	; 0x28
 8001c4c:	d103      	bne.n	8001c56 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001c4e:	4825      	ldr	r0, [pc, #148]	; (8001ce4 <bno055_writeData+0x1c0>)
 8001c50:	f007 f83c 	bl	8008ccc <puts>
 8001c54:	e025      	b.n	8001ca2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	2b29      	cmp	r3, #41	; 0x29
 8001c5a:	d103      	bne.n	8001c64 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001c5c:	4822      	ldr	r0, [pc, #136]	; (8001ce8 <bno055_writeData+0x1c4>)
 8001c5e:	f007 f835 	bl	8008ccc <puts>
 8001c62:	e01e      	b.n	8001ca2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	2b2a      	cmp	r3, #42	; 0x2a
 8001c68:	d103      	bne.n	8001c72 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001c6a:	4820      	ldr	r0, [pc, #128]	; (8001cec <bno055_writeData+0x1c8>)
 8001c6c:	f007 f82e 	bl	8008ccc <puts>
 8001c70:	e017      	b.n	8001ca2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	2b60      	cmp	r3, #96	; 0x60
 8001c76:	d103      	bne.n	8001c80 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001c78:	481d      	ldr	r0, [pc, #116]	; (8001cf0 <bno055_writeData+0x1cc>)
 8001c7a:	f007 f827 	bl	8008ccc <puts>
 8001c7e:	e010      	b.n	8001ca2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	2ba0      	cmp	r3, #160	; 0xa0
 8001c84:	d103      	bne.n	8001c8e <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001c86:	481b      	ldr	r0, [pc, #108]	; (8001cf4 <bno055_writeData+0x1d0>)
 8001c88:	f007 f820 	bl	8008ccc <puts>
 8001c8c:	e009      	b.n	8001ca2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	2be0      	cmp	r3, #224	; 0xe0
 8001c92:	d106      	bne.n	8001ca2 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001c94:	4818      	ldr	r0, [pc, #96]	; (8001cf8 <bno055_writeData+0x1d4>)
 8001c96:	f007 f819 	bl	8008ccc <puts>
 8001c9a:	e002      	b.n	8001ca2 <bno055_writeData+0x17e>
    return;
 8001c9c:	bf00      	nop
 8001c9e:	e000      	b.n	8001ca2 <bno055_writeData+0x17e>
    return;
 8001ca0:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000274 	.word	0x20000274
 8001cac:	0800c894 	.word	0x0800c894
 8001cb0:	0800c8b8 	.word	0x0800c8b8
 8001cb4:	0800c8e0 	.word	0x0800c8e0
 8001cb8:	0800c904 	.word	0x0800c904
 8001cbc:	0800c91c 	.word	0x0800c91c
 8001cc0:	0800c930 	.word	0x0800c930
 8001cc4:	0800c944 	.word	0x0800c944
 8001cc8:	0800c958 	.word	0x0800c958
 8001ccc:	0800c96c 	.word	0x0800c96c
 8001cd0:	0800c980 	.word	0x0800c980
 8001cd4:	0800c998 	.word	0x0800c998
 8001cd8:	0800c9b0 	.word	0x0800c9b0
 8001cdc:	0800c9c4 	.word	0x0800c9c4
 8001ce0:	0800c9dc 	.word	0x0800c9dc
 8001ce4:	0800c9f4 	.word	0x0800c9f4
 8001ce8:	0800ca0c 	.word	0x0800ca0c
 8001cec:	0800ca2c 	.word	0x0800ca2c
 8001cf0:	0800ca4c 	.word	0x0800ca4c
 8001cf4:	0800ca64 	.word	0x0800ca64
 8001cf8:	0800ca7c 	.word	0x0800ca7c

08001cfc <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af02      	add	r7, sp, #8
 8001d02:	4603      	mov	r3, r0
 8001d04:	6039      	str	r1, [r7, #0]
 8001d06:	71fb      	strb	r3, [r7, #7]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <bno055_readData+0x40>)
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	1dfa      	adds	r2, r7, #7
 8001d12:	2364      	movs	r3, #100	; 0x64
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	2301      	movs	r3, #1
 8001d18:	2152      	movs	r1, #82	; 0x52
 8001d1a:	f001 f885 	bl	8002e28 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <bno055_readData+0x40>)
 8001d20:	6818      	ldr	r0, [r3, #0]
 8001d22:	79bb      	ldrb	r3, [r7, #6]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	2264      	movs	r2, #100	; 0x64
 8001d28:	9200      	str	r2, [sp, #0]
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	2152      	movs	r1, #82	; 0x52
 8001d2e:	f001 f979 	bl	8003024 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000274 	.word	0x20000274

08001d40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d44:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 8001d48:	af34      	add	r7, sp, #208	; 0xd0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d4a:	f000 fc23 	bl	8002594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d4e:	f000 f9db 	bl	8002108 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d52:	f7ff fdf3 	bl	800193c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001d56:	f000 fa21 	bl	800219c <MX_SPI1_Init>
  MX_FATFS_Init();
 8001d5a:	f002 ff23 	bl	8004ba4 <MX_FATFS_Init>
  MX_I2C2_Init();
 8001d5e:	f7ff fe59 	bl	8001a14 <MX_I2C2_Init>

  //********************************    Inicio    ********************************

    float heading, roll, pitch;
    bno055_vector_t Accelerometer, Magnetometer, Gyroscope, VectorEuler, LinearAccel, Gravity, Quaternion;
    int count = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

    bno055_assignI2C(&hi2c2);
 8001d68:	483b      	ldr	r0, [pc, #236]	; (8001e58 <main+0x118>)
 8001d6a:	f7ff fec1 	bl	8001af0 <bno055_assignI2C>
    bno055_setup();
 8001d6e:	f7fe ff73 	bl	8000c58 <bno055_setup>
    bno055_setOperationModeNDOF();
 8001d72:	f7fe ff5e 	bl	8000c32 <bno055_setOperationModeNDOF>

    /* Mount SD Card */
    fresult = f_mount(&fs,"",0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	4938      	ldr	r1, [pc, #224]	; (8001e5c <main+0x11c>)
 8001d7a:	4839      	ldr	r0, [pc, #228]	; (8001e60 <main+0x120>)
 8001d7c:	f005 f9e0 	bl	8007140 <f_mount>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461a      	mov	r2, r3
 8001d84:	4b37      	ldr	r3, [pc, #220]	; (8001e64 <main+0x124>)
 8001d86:	701a      	strb	r2, [r3, #0]


    if (fresult != FR_OK) // Error in mounting SD CARD...
 8001d88:	4b36      	ldr	r3, [pc, #216]	; (8001e64 <main+0x124>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d01f      	beq.n	8001dd0 <main+0x90>
    {
        for(count = 0; count < 20; count++)
 8001d90:	2300      	movs	r3, #0
 8001d92:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001d96:	e016      	b.n	8001dc6 <main+0x86>
        {
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // desliga
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d9e:	4832      	ldr	r0, [pc, #200]	; (8001e68 <main+0x128>)
 8001da0:	f000 fee6 	bl	8002b70 <HAL_GPIO_WritePin>
            HAL_Delay(100);
 8001da4:	2064      	movs	r0, #100	; 0x64
 8001da6:	f000 fc57 	bl	8002658 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); // liga
 8001daa:	2200      	movs	r2, #0
 8001dac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001db0:	482d      	ldr	r0, [pc, #180]	; (8001e68 <main+0x128>)
 8001db2:	f000 fedd 	bl	8002b70 <HAL_GPIO_WritePin>
            HAL_Delay(100);
 8001db6:	2064      	movs	r0, #100	; 0x64
 8001db8:	f000 fc4e 	bl	8002658 <HAL_Delay>
        for(count = 0; count < 20; count++)
 8001dbc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001dc6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001dca:	2b13      	cmp	r3, #19
 8001dcc:	dde4      	ble.n	8001d98 <main+0x58>
 8001dce:	e01e      	b.n	8001e0e <main+0xce>



    }
    else{             // Ok in  mounting SD CARD...
        for(count = 0; count < 40; count++)
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001dd6:	e016      	b.n	8001e06 <main+0xc6>
        {
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); // liga
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dde:	4822      	ldr	r0, [pc, #136]	; (8001e68 <main+0x128>)
 8001de0:	f000 fec6 	bl	8002b70 <HAL_GPIO_WritePin>
            HAL_Delay(50);
 8001de4:	2032      	movs	r0, #50	; 0x32
 8001de6:	f000 fc37 	bl	8002658 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // desliga
 8001dea:	2201      	movs	r2, #1
 8001dec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001df0:	481d      	ldr	r0, [pc, #116]	; (8001e68 <main+0x128>)
 8001df2:	f000 febd 	bl	8002b70 <HAL_GPIO_WritePin>
            HAL_Delay(50);
 8001df6:	2032      	movs	r0, #50	; 0x32
 8001df8:	f000 fc2e 	bl	8002658 <HAL_Delay>
        for(count = 0; count < 40; count++)
 8001dfc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001e00:	3301      	adds	r3, #1
 8001e02:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001e06:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001e0a:	2b27      	cmp	r3, #39	; 0x27
 8001e0c:	dde4      	ble.n	8001dd8 <main+0x98>





    sprintf(buffer," Heading (degrees), Roll (degrees), Pitch (degrees),"
 8001e0e:	4917      	ldr	r1, [pc, #92]	; (8001e6c <main+0x12c>)
 8001e10:	4817      	ldr	r0, [pc, #92]	; (8001e70 <main+0x130>)
 8001e12:	f006 ff67 	bl	8008ce4 <siprintf>
    		  " LinearAccel W (m/s²), LinearAccel X (m/s²), LinearAccel Y (m/s²), LinearAccel Z (m/s²),"
    		  " Gravity W (m/s²), Gravity X (m/s²), Gravity Y (m/s²), Gravity Z (m/s²) \r\n\n");


    /* Open file to write/ create a file if it doesn't exist  */
    fresult = f_open(&fil, "Dados_Foguete.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001e16:	2213      	movs	r2, #19
 8001e18:	4916      	ldr	r1, [pc, #88]	; (8001e74 <main+0x134>)
 8001e1a:	4817      	ldr	r0, [pc, #92]	; (8001e78 <main+0x138>)
 8001e1c:	f005 f9d8 	bl	80071d0 <f_open>
 8001e20:	4603      	mov	r3, r0
 8001e22:	461a      	mov	r2, r3
 8001e24:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <main+0x124>)
 8001e26:	701a      	strb	r2, [r3, #0]
    fresult = f_puts(" Eng Adolfo\n",&fil);
 8001e28:	4913      	ldr	r1, [pc, #76]	; (8001e78 <main+0x138>)
 8001e2a:	4814      	ldr	r0, [pc, #80]	; (8001e7c <main+0x13c>)
 8001e2c:	f005 ff1e 	bl	8007c6c <f_puts>
 8001e30:	4603      	mov	r3, r0
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <main+0x124>)
 8001e36:	701a      	strb	r2, [r3, #0]
    fresult = f_puts(buffer,&fil);
 8001e38:	490f      	ldr	r1, [pc, #60]	; (8001e78 <main+0x138>)
 8001e3a:	480d      	ldr	r0, [pc, #52]	; (8001e70 <main+0x130>)
 8001e3c:	f005 ff16 	bl	8007c6c <f_puts>
 8001e40:	4603      	mov	r3, r0
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <main+0x124>)
 8001e46:	701a      	strb	r2, [r3, #0]


	  	//  HAL_Delay(100);
  	  //    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // desliga

	  	  HAL_Delay(1000);
 8001e48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e4c:	f000 fc04 	bl	8002658 <HAL_Delay>

	  //	  CDC_Transmit_FS(buffer, strlen(buffer));



	  	for(count = 0; count < 40; count++){
 8001e50:	2300      	movs	r3, #0
 8001e52:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001e56:	e12d      	b.n	80020b4 <main+0x374>
 8001e58:	20000220 	.word	0x20000220
 8001e5c:	0800ca94 	.word	0x0800ca94
 8001e60:	20000278 	.word	0x20000278
 8001e64:	200006d4 	.word	0x200006d4
 8001e68:	40011000 	.word	0x40011000
 8001e6c:	0800ca98 	.word	0x0800ca98
 8001e70:	200006d8 	.word	0x200006d8
 8001e74:	0800ccc0 	.word	0x0800ccc0
 8001e78:	200004a8 	.word	0x200004a8
 8001e7c:	0800ccd4 	.word	0x0800ccd4
	  		  VectorEuler	    = bno055_getVectorEuler();
 8001e80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff f84e 	bl	8000f26 <bno055_getVectorEuler>
	  		  	  Quaternion	    = bno055_getVectorQuaternion();
 8001e8a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff f870 	bl	8000f74 <bno055_getVectorQuaternion>
	  		  	  Accelerometer     = bno055_getVectorAccelerometer();
 8001e94:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff f81d 	bl	8000ed8 <bno055_getVectorAccelerometer>
	  		  	  Magnetometer      = bno055_getVectorMagnetometer();
 8001e9e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff f825 	bl	8000ef2 <bno055_getVectorMagnetometer>
	  		  	  Gyroscope		    = bno055_getVectorGyroscope();
 8001ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff f82d 	bl	8000f0c <bno055_getVectorGyroscope>
	  		  	  LinearAccel       = bno055_getVectorLinearAccel();
 8001eb2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff f842 	bl	8000f40 <bno055_getVectorLinearAccel>
	  		  	  Gravity	        = bno055_getVectorGravity();
 8001ebc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff f84a 	bl	8000f5a <bno055_getVectorGravity>
	  		  	  heading = VectorEuler.x;
 8001ec6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f7fe fdfb 	bl	8000ac8 <__aeabi_d2f>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	  		  	  roll    = VectorEuler.y;
 8001ed8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f7fe fdf2 	bl	8000ac8 <__aeabi_d2f>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	  		  	  pitch   = VectorEuler.z;
 8001eea:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f7fe fde9 	bl	8000ac8 <__aeabi_d2f>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

	  		  	  sprintf(buffer,"%.5f, %.5f, %.5f,"
 8001efc:	f8d7 0198 	ldr.w	r0, [r7, #408]	; 0x198
 8001f00:	f7fe fa92 	bl	8000428 <__aeabi_f2d>
 8001f04:	e9c7 012a 	strd	r0, r1, [r7, #168]	; 0xa8
 8001f08:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 8001f0c:	f7fe fa8c 	bl	8000428 <__aeabi_f2d>
 8001f10:	e9c7 0128 	strd	r0, r1, [r7, #160]	; 0xa0
 8001f14:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8001f18:	f7fe fa86 	bl	8000428 <__aeabi_f2d>
 8001f1c:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
 8001f20:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8001f24:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8001f28:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8001f2c:	e9c7 1222 	strd	r1, r2, [r7, #136]	; 0x88
 8001f30:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8001f34:	e9c7 4520 	strd	r4, r5, [r7, #128]	; 0x80
 8001f38:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8001f3c:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
 8001f40:	e9d7 9a5c 	ldrd	r9, sl, [r7, #368]	; 0x170
 8001f44:	e9c7 9a1c 	strd	r9, sl, [r7, #112]	; 0x70
 8001f48:	e9d7 ab5e 	ldrd	sl, fp, [r7, #376]	; 0x178
 8001f4c:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
 8001f50:	e9d7 bc60 	ldrd	fp, ip, [r7, #384]	; 0x180
 8001f54:	e9c7 bc18 	strd	fp, ip, [r7, #96]	; 0x60
 8001f58:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001f5c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001f60:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8001f64:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8001f68:	e9d7 1256 	ldrd	r1, r2, [r7, #344]	; 0x158
 8001f6c:	e9c7 1212 	strd	r1, r2, [r7, #72]	; 0x48
 8001f70:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8001f74:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
 8001f78:	e9d7 895a 	ldrd	r8, r9, [r7, #360]	; 0x168
 8001f7c:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 8001f80:	e9d7 9a4c 	ldrd	r9, sl, [r7, #304]	; 0x130
 8001f84:	e9c7 9a0c 	strd	r9, sl, [r7, #48]	; 0x30
 8001f88:	e9d7 ab4e 	ldrd	sl, fp, [r7, #312]	; 0x138
 8001f8c:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
 8001f90:	e9d7 bc50 	ldrd	fp, ip, [r7, #320]	; 0x140
 8001f94:	e9c7 bc08 	strd	fp, ip, [r7, #32]
 8001f98:	e9d7 5652 	ldrd	r5, r6, [r7, #328]	; 0x148
 8001f9c:	e9c7 5606 	strd	r5, r6, [r7, #24]
 8001fa0:	e9d7 563c 	ldrd	r5, r6, [r7, #240]	; 0xf0
 8001fa4:	e9c7 5604 	strd	r5, r6, [r7, #16]
 8001fa8:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8001fac:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001fb0:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8001fb4:	e9c7 0100 	strd	r0, r1, [r7]
 8001fb8:	e9d7 ab42 	ldrd	sl, fp, [r7, #264]	; 0x108
 8001fbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001fc0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001fc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001fc8:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8001fcc:	e9cd 2332 	strd	r2, r3, [sp, #200]	; 0xc8
 8001fd0:	e9cd 0130 	strd	r0, r1, [sp, #192]	; 0xc0
 8001fd4:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 8001fd8:	e9cd 892c 	strd	r8, r9, [sp, #176]	; 0xb0
 8001fdc:	e9cd ab2a 	strd	sl, fp, [sp, #168]	; 0xa8
 8001fe0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fe4:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 8001fe8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fec:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 8001ff0:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8001ff4:	e9cd 5624 	strd	r5, r6, [sp, #144]	; 0x90
 8001ff8:	e9d7 5606 	ldrd	r5, r6, [r7, #24]
 8001ffc:	e9cd 5622 	strd	r5, r6, [sp, #136]	; 0x88
 8002000:	e9d7 bc08 	ldrd	fp, ip, [r7, #32]
 8002004:	e9cd bc20 	strd	fp, ip, [sp, #128]	; 0x80
 8002008:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 800200c:	e9cd ab1e 	strd	sl, fp, [sp, #120]	; 0x78
 8002010:	e9d7 9a0c 	ldrd	r9, sl, [r7, #48]	; 0x30
 8002014:	e9cd 9a1c 	strd	r9, sl, [sp, #112]	; 0x70
 8002018:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800201c:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
 8002020:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8002024:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
 8002028:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800202c:	e9cd 1216 	strd	r1, r2, [sp, #88]	; 0x58
 8002030:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8002034:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
 8002038:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800203c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8002040:	e9d7 bc18 	ldrd	fp, ip, [r7, #96]	; 0x60
 8002044:	e9cd bc10 	strd	fp, ip, [sp, #64]	; 0x40
 8002048:	e9d7 ab1a 	ldrd	sl, fp, [r7, #104]	; 0x68
 800204c:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8002050:	e9d7 9a1c 	ldrd	r9, sl, [r7, #112]	; 0x70
 8002054:	e9cd 9a0c 	strd	r9, sl, [sp, #48]	; 0x30
 8002058:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800205c:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8002060:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002064:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8002068:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800206c:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8002070:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8002074:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002078:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800207c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002080:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8002084:	e9cd 3400 	strd	r3, r4, [sp]
 8002088:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800208c:	4919      	ldr	r1, [pc, #100]	; (80020f4 <main+0x3b4>)
 800208e:	481a      	ldr	r0, [pc, #104]	; (80020f8 <main+0x3b8>)
 8002090:	f006 fe28 	bl	8008ce4 <siprintf>
	  		  			  Gyroscope.w      , Gyroscope.x      , Gyroscope.y      , Gyroscope.z      ,
	  		  			  LinearAccel.w    , LinearAccel.x    , LinearAccel.y    , LinearAccel.z    ,
	  		  			  Gravity.w        , Gravity.x        , Gravity.y        , Gravity.z);

	  		  	 //  bno055 = 27 variaveis * 4 bytes = 108 Bytes
			      HAL_Delay(100);
 8002094:	2064      	movs	r0, #100	; 0x64
 8002096:	f000 fadf 	bl	8002658 <HAL_Delay>
			      fresult = f_puts(buffer,&fil);
 800209a:	4918      	ldr	r1, [pc, #96]	; (80020fc <main+0x3bc>)
 800209c:	4816      	ldr	r0, [pc, #88]	; (80020f8 <main+0x3b8>)
 800209e:	f005 fde5 	bl	8007c6c <f_puts>
 80020a2:	4603      	mov	r3, r0
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	4b16      	ldr	r3, [pc, #88]	; (8002100 <main+0x3c0>)
 80020a8:	701a      	strb	r2, [r3, #0]
	  	for(count = 0; count < 40; count++){
 80020aa:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80020ae:	3301      	adds	r3, #1
 80020b0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80020b4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80020b8:	2b27      	cmp	r3, #39	; 0x27
 80020ba:	f77f aee1 	ble.w	8001e80 <main+0x140>

	  	  }

	    fresult = f_close(&fil);
 80020be:	480f      	ldr	r0, [pc, #60]	; (80020fc <main+0x3bc>)
 80020c0:	f005 fd6f 	bl	8007ba2 <f_close>
 80020c4:	4603      	mov	r3, r0
 80020c6:	461a      	mov	r2, r3
 80020c8:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <main+0x3c0>)
 80020ca:	701a      	strb	r2, [r3, #0]

	  	while(1)
	  	{
		  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // desliga
 80020cc:	2201      	movs	r2, #1
 80020ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020d2:	480c      	ldr	r0, [pc, #48]	; (8002104 <main+0x3c4>)
 80020d4:	f000 fd4c 	bl	8002b70 <HAL_GPIO_WritePin>
		      HAL_Delay(100);
 80020d8:	2064      	movs	r0, #100	; 0x64
 80020da:	f000 fabd 	bl	8002658 <HAL_Delay>
		      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); // liga
 80020de:	2200      	movs	r2, #0
 80020e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020e4:	4807      	ldr	r0, [pc, #28]	; (8002104 <main+0x3c4>)
 80020e6:	f000 fd43 	bl	8002b70 <HAL_GPIO_WritePin>
		      HAL_Delay(100);
 80020ea:	2064      	movs	r0, #100	; 0x64
 80020ec:	f000 fab4 	bl	8002658 <HAL_Delay>
		  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // desliga
 80020f0:	e7ec      	b.n	80020cc <main+0x38c>
 80020f2:	bf00      	nop
 80020f4:	0800cce4 	.word	0x0800cce4
 80020f8:	200006d8 	.word	0x200006d8
 80020fc:	200004a8 	.word	0x200004a8
 8002100:	200006d4 	.word	0x200006d4
 8002104:	40011000 	.word	0x40011000

08002108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b090      	sub	sp, #64	; 0x40
 800210c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800210e:	f107 0318 	add.w	r3, r7, #24
 8002112:	2228      	movs	r2, #40	; 0x28
 8002114:	2100      	movs	r1, #0
 8002116:	4618      	mov	r0, r3
 8002118:	f005 fedc 	bl	8007ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800211c:	1d3b      	adds	r3, r7, #4
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]
 8002124:	609a      	str	r2, [r3, #8]
 8002126:	60da      	str	r2, [r3, #12]
 8002128:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800212a:	2301      	movs	r3, #1
 800212c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800212e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002132:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002134:	2300      	movs	r3, #0
 8002136:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002138:	2301      	movs	r3, #1
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800213c:	2302      	movs	r3, #2
 800213e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002140:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002144:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002146:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800214a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800214c:	f107 0318 	add.w	r3, r7, #24
 8002150:	4618      	mov	r0, r3
 8002152:	f001 fd0b 	bl	8003b6c <HAL_RCC_OscConfig>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800215c:	f000 f819 	bl	8002192 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002160:	230f      	movs	r3, #15
 8002162:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002164:	2302      	movs	r3, #2
 8002166:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002168:	2300      	movs	r3, #0
 800216a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002170:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002176:	1d3b      	adds	r3, r7, #4
 8002178:	2102      	movs	r1, #2
 800217a:	4618      	mov	r0, r3
 800217c:	f001 ff78 	bl	8004070 <HAL_RCC_ClockConfig>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002186:	f000 f804 	bl	8002192 <Error_Handler>
  }
}
 800218a:	bf00      	nop
 800218c:	3740      	adds	r7, #64	; 0x40
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002196:	b672      	cpsid	i
}
 8002198:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800219a:	e7fe      	b.n	800219a <Error_Handler+0x8>

0800219c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80021a0:	4b17      	ldr	r3, [pc, #92]	; (8002200 <MX_SPI1_Init+0x64>)
 80021a2:	4a18      	ldr	r2, [pc, #96]	; (8002204 <MX_SPI1_Init+0x68>)
 80021a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021a6:	4b16      	ldr	r3, [pc, #88]	; (8002200 <MX_SPI1_Init+0x64>)
 80021a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021ae:	4b14      	ldr	r3, [pc, #80]	; (8002200 <MX_SPI1_Init+0x64>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021b4:	4b12      	ldr	r3, [pc, #72]	; (8002200 <MX_SPI1_Init+0x64>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021ba:	4b11      	ldr	r3, [pc, #68]	; (8002200 <MX_SPI1_Init+0x64>)
 80021bc:	2200      	movs	r2, #0
 80021be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <MX_SPI1_Init+0x64>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <MX_SPI1_Init+0x64>)
 80021c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80021ce:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <MX_SPI1_Init+0x64>)
 80021d0:	2210      	movs	r2, #16
 80021d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021d4:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <MX_SPI1_Init+0x64>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <MX_SPI1_Init+0x64>)
 80021dc:	2200      	movs	r2, #0
 80021de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021e0:	4b07      	ldr	r3, [pc, #28]	; (8002200 <MX_SPI1_Init+0x64>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80021e6:	4b06      	ldr	r3, [pc, #24]	; (8002200 <MX_SPI1_Init+0x64>)
 80021e8:	220a      	movs	r2, #10
 80021ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021ec:	4804      	ldr	r0, [pc, #16]	; (8002200 <MX_SPI1_Init+0x64>)
 80021ee:	f002 f8c3 	bl	8004378 <HAL_SPI_Init>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80021f8:	f7ff ffcb 	bl	8002192 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021fc:	bf00      	nop
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20000ad8 	.word	0x20000ad8
 8002204:	40013000 	.word	0x40013000

08002208 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 0310 	add.w	r3, r7, #16
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a1b      	ldr	r2, [pc, #108]	; (8002290 <HAL_SPI_MspInit+0x88>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d12f      	bne.n	8002288 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002228:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <HAL_SPI_MspInit+0x8c>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	4a19      	ldr	r2, [pc, #100]	; (8002294 <HAL_SPI_MspInit+0x8c>)
 800222e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002232:	6193      	str	r3, [r2, #24]
 8002234:	4b17      	ldr	r3, [pc, #92]	; (8002294 <HAL_SPI_MspInit+0x8c>)
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002240:	4b14      	ldr	r3, [pc, #80]	; (8002294 <HAL_SPI_MspInit+0x8c>)
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	4a13      	ldr	r2, [pc, #76]	; (8002294 <HAL_SPI_MspInit+0x8c>)
 8002246:	f043 0304 	orr.w	r3, r3, #4
 800224a:	6193      	str	r3, [r2, #24]
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <HAL_SPI_MspInit+0x8c>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002258:	23a0      	movs	r3, #160	; 0xa0
 800225a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225c:	2302      	movs	r3, #2
 800225e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002260:	2303      	movs	r3, #3
 8002262:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002264:	f107 0310 	add.w	r3, r7, #16
 8002268:	4619      	mov	r1, r3
 800226a:	480b      	ldr	r0, [pc, #44]	; (8002298 <HAL_SPI_MspInit+0x90>)
 800226c:	f000 fafc 	bl	8002868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002270:	2340      	movs	r3, #64	; 0x40
 8002272:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227c:	f107 0310 	add.w	r3, r7, #16
 8002280:	4619      	mov	r1, r3
 8002282:	4805      	ldr	r0, [pc, #20]	; (8002298 <HAL_SPI_MspInit+0x90>)
 8002284:	f000 faf0 	bl	8002868 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002288:	bf00      	nop
 800228a:	3720      	adds	r7, #32
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40013000 	.word	0x40013000
 8002294:	40021000 	.word	0x40021000
 8002298:	40010800 	.word	0x40010800

0800229c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022a2:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <HAL_MspInit+0x5c>)
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	4a14      	ldr	r2, [pc, #80]	; (80022f8 <HAL_MspInit+0x5c>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	6193      	str	r3, [r2, #24]
 80022ae:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <HAL_MspInit+0x5c>)
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ba:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <HAL_MspInit+0x5c>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	4a0e      	ldr	r2, [pc, #56]	; (80022f8 <HAL_MspInit+0x5c>)
 80022c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c4:	61d3      	str	r3, [r2, #28]
 80022c6:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <HAL_MspInit+0x5c>)
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ce:	607b      	str	r3, [r7, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022d2:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <HAL_MspInit+0x60>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	4a04      	ldr	r2, [pc, #16]	; (80022fc <HAL_MspInit+0x60>)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ee:	bf00      	nop
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40010000 	.word	0x40010000

08002300 <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8002304:	4b0d      	ldr	r3, [pc, #52]	; (800233c <SDTimer_Handler+0x3c>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d006      	beq.n	800231c <SDTimer_Handler+0x1c>
		Timer1--;
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <SDTimer_Handler+0x3c>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	b2db      	uxtb	r3, r3
 8002314:	3b01      	subs	r3, #1
 8002316:	b2da      	uxtb	r2, r3
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <SDTimer_Handler+0x3c>)
 800231a:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <SDTimer_Handler+0x40>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d006      	beq.n	8002334 <SDTimer_Handler+0x34>
		Timer2--;
 8002326:	4b06      	ldr	r3, [pc, #24]	; (8002340 <SDTimer_Handler+0x40>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	b2db      	uxtb	r3, r3
 800232c:	3b01      	subs	r3, #1
 800232e:	b2da      	uxtb	r2, r3
 8002330:	4b03      	ldr	r3, [pc, #12]	; (8002340 <SDTimer_Handler+0x40>)
 8002332:	701a      	strb	r2, [r3, #0]
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr
 800233c:	20000b31 	.word	0x20000b31
 8002340:	20000b32 	.word	0x20000b32

08002344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002348:	e7fe      	b.n	8002348 <NMI_Handler+0x4>

0800234a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800234a:	b480      	push	{r7}
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800234e:	e7fe      	b.n	800234e <HardFault_Handler+0x4>

08002350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002354:	e7fe      	b.n	8002354 <MemManage_Handler+0x4>

08002356 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002356:	b480      	push	{r7}
 8002358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800235a:	e7fe      	b.n	800235a <BusFault_Handler+0x4>

0800235c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002360:	e7fe      	b.n	8002360 <UsageFault_Handler+0x4>

08002362 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr

0800236e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr

0800237a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800237a:	b480      	push	{r7}
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr
	...

08002388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <SysTick_Handler+0x30>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	3301      	adds	r3, #1
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <SysTick_Handler+0x30>)
 8002398:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >=10)
 800239a:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <SysTick_Handler+0x30>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b09      	cmp	r3, #9
 80023a2:	d904      	bls.n	80023ae <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 80023a4:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <SysTick_Handler+0x30>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80023aa:	f7ff ffa9 	bl	8002300 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023ae:	f000 f937 	bl	8002620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000b30 	.word	0x20000b30

080023bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
	return 1;
 80023c0:	2301      	movs	r3, #1
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr

080023ca <_kill>:

int _kill(int pid, int sig)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023d4:	f005 fd46 	bl	8007e64 <__errno>
 80023d8:	4603      	mov	r3, r0
 80023da:	2216      	movs	r2, #22
 80023dc:	601a      	str	r2, [r3, #0]
	return -1;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <_exit>:

void _exit (int status)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023f2:	f04f 31ff 	mov.w	r1, #4294967295
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff ffe7 	bl	80023ca <_kill>
	while (1) {}		/* Make sure we hang here */
 80023fc:	e7fe      	b.n	80023fc <_exit+0x12>

080023fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b086      	sub	sp, #24
 8002402:	af00      	add	r7, sp, #0
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	e00a      	b.n	8002426 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002410:	f3af 8000 	nop.w
 8002414:	4601      	mov	r1, r0
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	60ba      	str	r2, [r7, #8]
 800241c:	b2ca      	uxtb	r2, r1
 800241e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	3301      	adds	r3, #1
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	429a      	cmp	r2, r3
 800242c:	dbf0      	blt.n	8002410 <_read+0x12>
	}

return len;
 800242e:	687b      	ldr	r3, [r7, #4]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	e009      	b.n	800245e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	60ba      	str	r2, [r7, #8]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	3301      	adds	r3, #1
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	429a      	cmp	r2, r3
 8002464:	dbf1      	blt.n	800244a <_write+0x12>
	}
	return len;
 8002466:	687b      	ldr	r3, [r7, #4]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <_close>:

int _close(int file)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
	return -1;
 8002478:	f04f 33ff 	mov.w	r3, #4294967295
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr

08002486 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002496:	605a      	str	r2, [r3, #4]
	return 0;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <_isatty>:

int _isatty(int file)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
	return 1;
 80024ac:	2301      	movs	r3, #1
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
	return 0;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024d8:	4a14      	ldr	r2, [pc, #80]	; (800252c <_sbrk+0x5c>)
 80024da:	4b15      	ldr	r3, [pc, #84]	; (8002530 <_sbrk+0x60>)
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024e4:	4b13      	ldr	r3, [pc, #76]	; (8002534 <_sbrk+0x64>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d102      	bne.n	80024f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024ec:	4b11      	ldr	r3, [pc, #68]	; (8002534 <_sbrk+0x64>)
 80024ee:	4a12      	ldr	r2, [pc, #72]	; (8002538 <_sbrk+0x68>)
 80024f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <_sbrk+0x64>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d207      	bcs.n	8002510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002500:	f005 fcb0 	bl	8007e64 <__errno>
 8002504:	4603      	mov	r3, r0
 8002506:	220c      	movs	r2, #12
 8002508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800250a:	f04f 33ff 	mov.w	r3, #4294967295
 800250e:	e009      	b.n	8002524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002510:	4b08      	ldr	r3, [pc, #32]	; (8002534 <_sbrk+0x64>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002516:	4b07      	ldr	r3, [pc, #28]	; (8002534 <_sbrk+0x64>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	4a05      	ldr	r2, [pc, #20]	; (8002534 <_sbrk+0x64>)
 8002520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002522:	68fb      	ldr	r3, [r7, #12]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20005000 	.word	0x20005000
 8002530:	00000400 	.word	0x00000400
 8002534:	20000b34 	.word	0x20000b34
 8002538:	20000d80 	.word	0x20000d80

0800253c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002548:	480c      	ldr	r0, [pc, #48]	; (800257c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800254a:	490d      	ldr	r1, [pc, #52]	; (8002580 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800254c:	4a0d      	ldr	r2, [pc, #52]	; (8002584 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800254e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002550:	e002      	b.n	8002558 <LoopCopyDataInit>

08002552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002556:	3304      	adds	r3, #4

08002558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800255a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800255c:	d3f9      	bcc.n	8002552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800255e:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002560:	4c0a      	ldr	r4, [pc, #40]	; (800258c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002564:	e001      	b.n	800256a <LoopFillZerobss>

08002566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002568:	3204      	adds	r2, #4

0800256a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800256a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800256c:	d3fb      	bcc.n	8002566 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800256e:	f7ff ffe5 	bl	800253c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002572:	f005 fc7d 	bl	8007e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002576:	f7ff fbe3 	bl	8001d40 <main>
  bx lr
 800257a:	4770      	bx	lr
  ldr r0, =_sdata
 800257c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002580:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8002584:	0800d7fc 	.word	0x0800d7fc
  ldr r2, =_sbss
 8002588:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 800258c:	20000d80 	.word	0x20000d80

08002590 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002590:	e7fe      	b.n	8002590 <ADC1_2_IRQHandler>
	...

08002594 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002598:	4b08      	ldr	r3, [pc, #32]	; (80025bc <HAL_Init+0x28>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a07      	ldr	r2, [pc, #28]	; (80025bc <HAL_Init+0x28>)
 800259e:	f043 0310 	orr.w	r3, r3, #16
 80025a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025a4:	2003      	movs	r0, #3
 80025a6:	f000 f92b 	bl	8002800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025aa:	200f      	movs	r0, #15
 80025ac:	f000 f808 	bl	80025c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025b0:	f7ff fe74 	bl	800229c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40022000 	.word	0x40022000

080025c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025c8:	4b12      	ldr	r3, [pc, #72]	; (8002614 <HAL_InitTick+0x54>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b12      	ldr	r3, [pc, #72]	; (8002618 <HAL_InitTick+0x58>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	4619      	mov	r1, r3
 80025d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025da:	fbb2 f3f3 	udiv	r3, r2, r3
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 f935 	bl	800284e <HAL_SYSTICK_Config>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e00e      	b.n	800260c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b0f      	cmp	r3, #15
 80025f2:	d80a      	bhi.n	800260a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025f4:	2200      	movs	r2, #0
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	f04f 30ff 	mov.w	r0, #4294967295
 80025fc:	f000 f90b 	bl	8002816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002600:	4a06      	ldr	r2, [pc, #24]	; (800261c <HAL_InitTick+0x5c>)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	e000      	b.n	800260c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
}
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	2000000c 	.word	0x2000000c
 8002618:	20000014 	.word	0x20000014
 800261c:	20000010 	.word	0x20000010

08002620 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_IncTick+0x1c>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	4b05      	ldr	r3, [pc, #20]	; (8002640 <HAL_IncTick+0x20>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4413      	add	r3, r2
 8002630:	4a03      	ldr	r2, [pc, #12]	; (8002640 <HAL_IncTick+0x20>)
 8002632:	6013      	str	r3, [r2, #0]
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	20000014 	.word	0x20000014
 8002640:	20000b38 	.word	0x20000b38

08002644 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return uwTick;
 8002648:	4b02      	ldr	r3, [pc, #8]	; (8002654 <HAL_GetTick+0x10>)
 800264a:	681b      	ldr	r3, [r3, #0]
}
 800264c:	4618      	mov	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr
 8002654:	20000b38 	.word	0x20000b38

08002658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002660:	f7ff fff0 	bl	8002644 <HAL_GetTick>
 8002664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002670:	d005      	beq.n	800267e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002672:	4b0a      	ldr	r3, [pc, #40]	; (800269c <HAL_Delay+0x44>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4413      	add	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800267e:	bf00      	nop
 8002680:	f7ff ffe0 	bl	8002644 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	429a      	cmp	r2, r3
 800268e:	d8f7      	bhi.n	8002680 <HAL_Delay+0x28>
  {
  }
}
 8002690:	bf00      	nop
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000014 	.word	0x20000014

080026a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b0:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <__NVIC_SetPriorityGrouping+0x44>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026bc:	4013      	ands	r3, r2
 80026be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026d2:	4a04      	ldr	r2, [pc, #16]	; (80026e4 <__NVIC_SetPriorityGrouping+0x44>)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	60d3      	str	r3, [r2, #12]
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026ec:	4b04      	ldr	r3, [pc, #16]	; (8002700 <__NVIC_GetPriorityGrouping+0x18>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	0a1b      	lsrs	r3, r3, #8
 80026f2:	f003 0307 	and.w	r3, r3, #7
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	6039      	str	r1, [r7, #0]
 800270e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002714:	2b00      	cmp	r3, #0
 8002716:	db0a      	blt.n	800272e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	b2da      	uxtb	r2, r3
 800271c:	490c      	ldr	r1, [pc, #48]	; (8002750 <__NVIC_SetPriority+0x4c>)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	0112      	lsls	r2, r2, #4
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	440b      	add	r3, r1
 8002728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800272c:	e00a      	b.n	8002744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	b2da      	uxtb	r2, r3
 8002732:	4908      	ldr	r1, [pc, #32]	; (8002754 <__NVIC_SetPriority+0x50>)
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	3b04      	subs	r3, #4
 800273c:	0112      	lsls	r2, r2, #4
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	440b      	add	r3, r1
 8002742:	761a      	strb	r2, [r3, #24]
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	e000e100 	.word	0xe000e100
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	; 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f1c3 0307 	rsb	r3, r3, #7
 8002772:	2b04      	cmp	r3, #4
 8002774:	bf28      	it	cs
 8002776:	2304      	movcs	r3, #4
 8002778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3304      	adds	r3, #4
 800277e:	2b06      	cmp	r3, #6
 8002780:	d902      	bls.n	8002788 <NVIC_EncodePriority+0x30>
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3b03      	subs	r3, #3
 8002786:	e000      	b.n	800278a <NVIC_EncodePriority+0x32>
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800278c:	f04f 32ff 	mov.w	r2, #4294967295
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43da      	mvns	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	401a      	ands	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a0:	f04f 31ff 	mov.w	r1, #4294967295
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	fa01 f303 	lsl.w	r3, r1, r3
 80027aa:	43d9      	mvns	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b0:	4313      	orrs	r3, r2
         );
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3724      	adds	r7, #36	; 0x24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027cc:	d301      	bcc.n	80027d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ce:	2301      	movs	r3, #1
 80027d0:	e00f      	b.n	80027f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027d2:	4a0a      	ldr	r2, [pc, #40]	; (80027fc <SysTick_Config+0x40>)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027da:	210f      	movs	r1, #15
 80027dc:	f04f 30ff 	mov.w	r0, #4294967295
 80027e0:	f7ff ff90 	bl	8002704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <SysTick_Config+0x40>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ea:	4b04      	ldr	r3, [pc, #16]	; (80027fc <SysTick_Config+0x40>)
 80027ec:	2207      	movs	r2, #7
 80027ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	e000e010 	.word	0xe000e010

08002800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff ff49 	bl	80026a0 <__NVIC_SetPriorityGrouping>
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002816:	b580      	push	{r7, lr}
 8002818:	b086      	sub	sp, #24
 800281a:	af00      	add	r7, sp, #0
 800281c:	4603      	mov	r3, r0
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	607a      	str	r2, [r7, #4]
 8002822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002828:	f7ff ff5e 	bl	80026e8 <__NVIC_GetPriorityGrouping>
 800282c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68b9      	ldr	r1, [r7, #8]
 8002832:	6978      	ldr	r0, [r7, #20]
 8002834:	f7ff ff90 	bl	8002758 <NVIC_EncodePriority>
 8002838:	4602      	mov	r2, r0
 800283a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff5f 	bl	8002704 <__NVIC_SetPriority>
}
 8002846:	bf00      	nop
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff ffb0 	bl	80027bc <SysTick_Config>
 800285c:	4603      	mov	r3, r0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002868:	b480      	push	{r7}
 800286a:	b08b      	sub	sp, #44	; 0x2c
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002872:	2300      	movs	r3, #0
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002876:	2300      	movs	r3, #0
 8002878:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800287a:	e169      	b.n	8002b50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800287c:	2201      	movs	r2, #1
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	69fa      	ldr	r2, [r7, #28]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	429a      	cmp	r2, r3
 8002896:	f040 8158 	bne.w	8002b4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	4a9a      	ldr	r2, [pc, #616]	; (8002b08 <HAL_GPIO_Init+0x2a0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d05e      	beq.n	8002962 <HAL_GPIO_Init+0xfa>
 80028a4:	4a98      	ldr	r2, [pc, #608]	; (8002b08 <HAL_GPIO_Init+0x2a0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d875      	bhi.n	8002996 <HAL_GPIO_Init+0x12e>
 80028aa:	4a98      	ldr	r2, [pc, #608]	; (8002b0c <HAL_GPIO_Init+0x2a4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d058      	beq.n	8002962 <HAL_GPIO_Init+0xfa>
 80028b0:	4a96      	ldr	r2, [pc, #600]	; (8002b0c <HAL_GPIO_Init+0x2a4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d86f      	bhi.n	8002996 <HAL_GPIO_Init+0x12e>
 80028b6:	4a96      	ldr	r2, [pc, #600]	; (8002b10 <HAL_GPIO_Init+0x2a8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d052      	beq.n	8002962 <HAL_GPIO_Init+0xfa>
 80028bc:	4a94      	ldr	r2, [pc, #592]	; (8002b10 <HAL_GPIO_Init+0x2a8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d869      	bhi.n	8002996 <HAL_GPIO_Init+0x12e>
 80028c2:	4a94      	ldr	r2, [pc, #592]	; (8002b14 <HAL_GPIO_Init+0x2ac>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d04c      	beq.n	8002962 <HAL_GPIO_Init+0xfa>
 80028c8:	4a92      	ldr	r2, [pc, #584]	; (8002b14 <HAL_GPIO_Init+0x2ac>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d863      	bhi.n	8002996 <HAL_GPIO_Init+0x12e>
 80028ce:	4a92      	ldr	r2, [pc, #584]	; (8002b18 <HAL_GPIO_Init+0x2b0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d046      	beq.n	8002962 <HAL_GPIO_Init+0xfa>
 80028d4:	4a90      	ldr	r2, [pc, #576]	; (8002b18 <HAL_GPIO_Init+0x2b0>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d85d      	bhi.n	8002996 <HAL_GPIO_Init+0x12e>
 80028da:	2b12      	cmp	r3, #18
 80028dc:	d82a      	bhi.n	8002934 <HAL_GPIO_Init+0xcc>
 80028de:	2b12      	cmp	r3, #18
 80028e0:	d859      	bhi.n	8002996 <HAL_GPIO_Init+0x12e>
 80028e2:	a201      	add	r2, pc, #4	; (adr r2, 80028e8 <HAL_GPIO_Init+0x80>)
 80028e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e8:	08002963 	.word	0x08002963
 80028ec:	0800293d 	.word	0x0800293d
 80028f0:	0800294f 	.word	0x0800294f
 80028f4:	08002991 	.word	0x08002991
 80028f8:	08002997 	.word	0x08002997
 80028fc:	08002997 	.word	0x08002997
 8002900:	08002997 	.word	0x08002997
 8002904:	08002997 	.word	0x08002997
 8002908:	08002997 	.word	0x08002997
 800290c:	08002997 	.word	0x08002997
 8002910:	08002997 	.word	0x08002997
 8002914:	08002997 	.word	0x08002997
 8002918:	08002997 	.word	0x08002997
 800291c:	08002997 	.word	0x08002997
 8002920:	08002997 	.word	0x08002997
 8002924:	08002997 	.word	0x08002997
 8002928:	08002997 	.word	0x08002997
 800292c:	08002945 	.word	0x08002945
 8002930:	08002959 	.word	0x08002959
 8002934:	4a79      	ldr	r2, [pc, #484]	; (8002b1c <HAL_GPIO_Init+0x2b4>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d013      	beq.n	8002962 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800293a:	e02c      	b.n	8002996 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	623b      	str	r3, [r7, #32]
          break;
 8002942:	e029      	b.n	8002998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	3304      	adds	r3, #4
 800294a:	623b      	str	r3, [r7, #32]
          break;
 800294c:	e024      	b.n	8002998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	3308      	adds	r3, #8
 8002954:	623b      	str	r3, [r7, #32]
          break;
 8002956:	e01f      	b.n	8002998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	330c      	adds	r3, #12
 800295e:	623b      	str	r3, [r7, #32]
          break;
 8002960:	e01a      	b.n	8002998 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d102      	bne.n	8002970 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800296a:	2304      	movs	r3, #4
 800296c:	623b      	str	r3, [r7, #32]
          break;
 800296e:	e013      	b.n	8002998 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d105      	bne.n	8002984 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002978:	2308      	movs	r3, #8
 800297a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69fa      	ldr	r2, [r7, #28]
 8002980:	611a      	str	r2, [r3, #16]
          break;
 8002982:	e009      	b.n	8002998 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002984:	2308      	movs	r3, #8
 8002986:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	615a      	str	r2, [r3, #20]
          break;
 800298e:	e003      	b.n	8002998 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002990:	2300      	movs	r3, #0
 8002992:	623b      	str	r3, [r7, #32]
          break;
 8002994:	e000      	b.n	8002998 <HAL_GPIO_Init+0x130>
          break;
 8002996:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	2bff      	cmp	r3, #255	; 0xff
 800299c:	d801      	bhi.n	80029a2 <HAL_GPIO_Init+0x13a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	e001      	b.n	80029a6 <HAL_GPIO_Init+0x13e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3304      	adds	r3, #4
 80029a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	2bff      	cmp	r3, #255	; 0xff
 80029ac:	d802      	bhi.n	80029b4 <HAL_GPIO_Init+0x14c>
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	e002      	b.n	80029ba <HAL_GPIO_Init+0x152>
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	3b08      	subs	r3, #8
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	210f      	movs	r1, #15
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	fa01 f303 	lsl.w	r3, r1, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	401a      	ands	r2, r3
 80029cc:	6a39      	ldr	r1, [r7, #32]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	fa01 f303 	lsl.w	r3, r1, r3
 80029d4:	431a      	orrs	r2, r3
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 80b1 	beq.w	8002b4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029e8:	4b4d      	ldr	r3, [pc, #308]	; (8002b20 <HAL_GPIO_Init+0x2b8>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	4a4c      	ldr	r2, [pc, #304]	; (8002b20 <HAL_GPIO_Init+0x2b8>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	6193      	str	r3, [r2, #24]
 80029f4:	4b4a      	ldr	r3, [pc, #296]	; (8002b20 <HAL_GPIO_Init+0x2b8>)
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a00:	4a48      	ldr	r2, [pc, #288]	; (8002b24 <HAL_GPIO_Init+0x2bc>)
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	089b      	lsrs	r3, r3, #2
 8002a06:	3302      	adds	r3, #2
 8002a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	220f      	movs	r2, #15
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	4013      	ands	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a40      	ldr	r2, [pc, #256]	; (8002b28 <HAL_GPIO_Init+0x2c0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d013      	beq.n	8002a54 <HAL_GPIO_Init+0x1ec>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a3f      	ldr	r2, [pc, #252]	; (8002b2c <HAL_GPIO_Init+0x2c4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d00d      	beq.n	8002a50 <HAL_GPIO_Init+0x1e8>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a3e      	ldr	r2, [pc, #248]	; (8002b30 <HAL_GPIO_Init+0x2c8>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d007      	beq.n	8002a4c <HAL_GPIO_Init+0x1e4>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a3d      	ldr	r2, [pc, #244]	; (8002b34 <HAL_GPIO_Init+0x2cc>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d101      	bne.n	8002a48 <HAL_GPIO_Init+0x1e0>
 8002a44:	2303      	movs	r3, #3
 8002a46:	e006      	b.n	8002a56 <HAL_GPIO_Init+0x1ee>
 8002a48:	2304      	movs	r3, #4
 8002a4a:	e004      	b.n	8002a56 <HAL_GPIO_Init+0x1ee>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e002      	b.n	8002a56 <HAL_GPIO_Init+0x1ee>
 8002a50:	2301      	movs	r3, #1
 8002a52:	e000      	b.n	8002a56 <HAL_GPIO_Init+0x1ee>
 8002a54:	2300      	movs	r3, #0
 8002a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a58:	f002 0203 	and.w	r2, r2, #3
 8002a5c:	0092      	lsls	r2, r2, #2
 8002a5e:	4093      	lsls	r3, r2
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a66:	492f      	ldr	r1, [pc, #188]	; (8002b24 <HAL_GPIO_Init+0x2bc>)
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	089b      	lsrs	r3, r3, #2
 8002a6c:	3302      	adds	r3, #2
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d006      	beq.n	8002a8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a80:	4b2d      	ldr	r3, [pc, #180]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	492c      	ldr	r1, [pc, #176]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	600b      	str	r3, [r1, #0]
 8002a8c:	e006      	b.n	8002a9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a8e:	4b2a      	ldr	r3, [pc, #168]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	4928      	ldr	r1, [pc, #160]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d006      	beq.n	8002ab6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002aa8:	4b23      	ldr	r3, [pc, #140]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	4922      	ldr	r1, [pc, #136]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
 8002ab4:	e006      	b.n	8002ac4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ab6:	4b20      	ldr	r3, [pc, #128]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	491e      	ldr	r1, [pc, #120]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d006      	beq.n	8002ade <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ad0:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	4918      	ldr	r1, [pc, #96]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	608b      	str	r3, [r1, #8]
 8002adc:	e006      	b.n	8002aec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ade:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	4914      	ldr	r1, [pc, #80]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d021      	beq.n	8002b3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002af8:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	490e      	ldr	r1, [pc, #56]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60cb      	str	r3, [r1, #12]
 8002b04:	e021      	b.n	8002b4a <HAL_GPIO_Init+0x2e2>
 8002b06:	bf00      	nop
 8002b08:	10320000 	.word	0x10320000
 8002b0c:	10310000 	.word	0x10310000
 8002b10:	10220000 	.word	0x10220000
 8002b14:	10210000 	.word	0x10210000
 8002b18:	10120000 	.word	0x10120000
 8002b1c:	10110000 	.word	0x10110000
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40010000 	.word	0x40010000
 8002b28:	40010800 	.word	0x40010800
 8002b2c:	40010c00 	.word	0x40010c00
 8002b30:	40011000 	.word	0x40011000
 8002b34:	40011400 	.word	0x40011400
 8002b38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <HAL_GPIO_Init+0x304>)
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	43db      	mvns	r3, r3
 8002b44:	4909      	ldr	r1, [pc, #36]	; (8002b6c <HAL_GPIO_Init+0x304>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f47f ae8e 	bne.w	800287c <HAL_GPIO_Init+0x14>
  }
}
 8002b60:	bf00      	nop
 8002b62:	bf00      	nop
 8002b64:	372c      	adds	r7, #44	; 0x2c
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr
 8002b6c:	40010400 	.word	0x40010400

08002b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	807b      	strh	r3, [r7, #2]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b80:	787b      	ldrb	r3, [r7, #1]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b86:	887a      	ldrh	r2, [r7, #2]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b8c:	e003      	b.n	8002b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b8e:	887b      	ldrh	r3, [r7, #2]
 8002b90:	041a      	lsls	r2, r3, #16
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	611a      	str	r2, [r3, #16]
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e12b      	b.n	8002e0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fe ff52 	bl	8001a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2224      	movs	r2, #36	; 0x24
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0201 	bic.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bf2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c04:	f001 fb86 	bl	8004314 <HAL_RCC_GetPCLK1Freq>
 8002c08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4a81      	ldr	r2, [pc, #516]	; (8002e14 <HAL_I2C_Init+0x274>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d807      	bhi.n	8002c24 <HAL_I2C_Init+0x84>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4a80      	ldr	r2, [pc, #512]	; (8002e18 <HAL_I2C_Init+0x278>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	bf94      	ite	ls
 8002c1c:	2301      	movls	r3, #1
 8002c1e:	2300      	movhi	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	e006      	b.n	8002c32 <HAL_I2C_Init+0x92>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4a7d      	ldr	r2, [pc, #500]	; (8002e1c <HAL_I2C_Init+0x27c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	bf94      	ite	ls
 8002c2c:	2301      	movls	r3, #1
 8002c2e:	2300      	movhi	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e0e7      	b.n	8002e0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4a78      	ldr	r2, [pc, #480]	; (8002e20 <HAL_I2C_Init+0x280>)
 8002c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c42:	0c9b      	lsrs	r3, r3, #18
 8002c44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	4a6a      	ldr	r2, [pc, #424]	; (8002e14 <HAL_I2C_Init+0x274>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d802      	bhi.n	8002c74 <HAL_I2C_Init+0xd4>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	3301      	adds	r3, #1
 8002c72:	e009      	b.n	8002c88 <HAL_I2C_Init+0xe8>
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c7a:	fb02 f303 	mul.w	r3, r2, r3
 8002c7e:	4a69      	ldr	r2, [pc, #420]	; (8002e24 <HAL_I2C_Init+0x284>)
 8002c80:	fba2 2303 	umull	r2, r3, r2, r3
 8002c84:	099b      	lsrs	r3, r3, #6
 8002c86:	3301      	adds	r3, #1
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	495c      	ldr	r1, [pc, #368]	; (8002e14 <HAL_I2C_Init+0x274>)
 8002ca4:	428b      	cmp	r3, r1
 8002ca6:	d819      	bhi.n	8002cdc <HAL_I2C_Init+0x13c>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	1e59      	subs	r1, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cb6:	1c59      	adds	r1, r3, #1
 8002cb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cbc:	400b      	ands	r3, r1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00a      	beq.n	8002cd8 <HAL_I2C_Init+0x138>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1e59      	subs	r1, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd6:	e051      	b.n	8002d7c <HAL_I2C_Init+0x1dc>
 8002cd8:	2304      	movs	r3, #4
 8002cda:	e04f      	b.n	8002d7c <HAL_I2C_Init+0x1dc>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d111      	bne.n	8002d08 <HAL_I2C_Init+0x168>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	1e58      	subs	r0, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6859      	ldr	r1, [r3, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	440b      	add	r3, r1
 8002cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	bf0c      	ite	eq
 8002d00:	2301      	moveq	r3, #1
 8002d02:	2300      	movne	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	e012      	b.n	8002d2e <HAL_I2C_Init+0x18e>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	1e58      	subs	r0, r3, #1
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6859      	ldr	r1, [r3, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	0099      	lsls	r1, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d1e:	3301      	adds	r3, #1
 8002d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	bf0c      	ite	eq
 8002d28:	2301      	moveq	r3, #1
 8002d2a:	2300      	movne	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_I2C_Init+0x196>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e022      	b.n	8002d7c <HAL_I2C_Init+0x1dc>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10e      	bne.n	8002d5c <HAL_I2C_Init+0x1bc>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	1e58      	subs	r0, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6859      	ldr	r1, [r3, #4]
 8002d46:	460b      	mov	r3, r1
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	440b      	add	r3, r1
 8002d4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d50:	3301      	adds	r3, #1
 8002d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d5a:	e00f      	b.n	8002d7c <HAL_I2C_Init+0x1dc>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1e58      	subs	r0, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6859      	ldr	r1, [r3, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	0099      	lsls	r1, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d72:	3301      	adds	r3, #1
 8002d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	6809      	ldr	r1, [r1, #0]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69da      	ldr	r2, [r3, #28]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002daa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6911      	ldr	r1, [r2, #16]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68d2      	ldr	r2, [r2, #12]
 8002db6:	4311      	orrs	r1, r2
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	430b      	orrs	r3, r1
 8002dbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	000186a0 	.word	0x000186a0
 8002e18:	001e847f 	.word	0x001e847f
 8002e1c:	003d08ff 	.word	0x003d08ff
 8002e20:	431bde83 	.word	0x431bde83
 8002e24:	10624dd3 	.word	0x10624dd3

08002e28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	607a      	str	r2, [r7, #4]
 8002e32:	461a      	mov	r2, r3
 8002e34:	460b      	mov	r3, r1
 8002e36:	817b      	strh	r3, [r7, #10]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e3c:	f7ff fc02 	bl	8002644 <HAL_GetTick>
 8002e40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b20      	cmp	r3, #32
 8002e4c:	f040 80e0 	bne.w	8003010 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	2319      	movs	r3, #25
 8002e56:	2201      	movs	r2, #1
 8002e58:	4970      	ldr	r1, [pc, #448]	; (800301c <HAL_I2C_Master_Transmit+0x1f4>)
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 fcaa 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e66:	2302      	movs	r3, #2
 8002e68:	e0d3      	b.n	8003012 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_I2C_Master_Transmit+0x50>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e0cc      	b.n	8003012 <HAL_I2C_Master_Transmit+0x1ea>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d007      	beq.n	8002e9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f042 0201 	orr.w	r2, r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2221      	movs	r2, #33	; 0x21
 8002eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2210      	movs	r2, #16
 8002eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	893a      	ldrh	r2, [r7, #8]
 8002ece:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4a50      	ldr	r2, [pc, #320]	; (8003020 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ede:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ee0:	8979      	ldrh	r1, [r7, #10]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	6a3a      	ldr	r2, [r7, #32]
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 fb14 	bl	8003514 <I2C_MasterRequestWrite>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e08d      	b.n	8003012 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f0c:	e066      	b.n	8002fdc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	6a39      	ldr	r1, [r7, #32]
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 fd24 	bl	8003960 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00d      	beq.n	8002f3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d107      	bne.n	8002f36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e06b      	b.n	8003012 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	781a      	ldrb	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d11b      	bne.n	8002fb0 <HAL_I2C_Master_Transmit+0x188>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d017      	beq.n	8002fb0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	781a      	ldrb	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	6a39      	ldr	r1, [r7, #32]
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 fd14 	bl	80039e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00d      	beq.n	8002fdc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d107      	bne.n	8002fd8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e01a      	b.n	8003012 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d194      	bne.n	8002f0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800300c:	2300      	movs	r3, #0
 800300e:	e000      	b.n	8003012 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003010:	2302      	movs	r3, #2
  }
}
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	00100002 	.word	0x00100002
 8003020:	ffff0000 	.word	0xffff0000

08003024 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08c      	sub	sp, #48	; 0x30
 8003028:	af02      	add	r7, sp, #8
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	461a      	mov	r2, r3
 8003030:	460b      	mov	r3, r1
 8003032:	817b      	strh	r3, [r7, #10]
 8003034:	4613      	mov	r3, r2
 8003036:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800303c:	f7ff fb02 	bl	8002644 <HAL_GetTick>
 8003040:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b20      	cmp	r3, #32
 800304c:	f040 823f 	bne.w	80034ce <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	2319      	movs	r3, #25
 8003056:	2201      	movs	r2, #1
 8003058:	497f      	ldr	r1, [pc, #508]	; (8003258 <HAL_I2C_Master_Receive+0x234>)
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 fbaa 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003066:	2302      	movs	r3, #2
 8003068:	e232      	b.n	80034d0 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_I2C_Master_Receive+0x54>
 8003074:	2302      	movs	r3, #2
 8003076:	e22b      	b.n	80034d0 <HAL_I2C_Master_Receive+0x4ac>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b01      	cmp	r3, #1
 800308c:	d007      	beq.n	800309e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f042 0201 	orr.w	r2, r2, #1
 800309c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2222      	movs	r2, #34	; 0x22
 80030b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2210      	movs	r2, #16
 80030ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	893a      	ldrh	r2, [r7, #8]
 80030ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4a5f      	ldr	r2, [pc, #380]	; (800325c <HAL_I2C_Master_Receive+0x238>)
 80030de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030e0:	8979      	ldrh	r1, [r7, #10]
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 fa96 	bl	8003618 <I2C_MasterRequestRead>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e1ec      	b.n	80034d0 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d113      	bne.n	8003126 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	61fb      	str	r3, [r7, #28]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	e1c0      	b.n	80034a8 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312a:	2b01      	cmp	r3, #1
 800312c:	d11e      	bne.n	800316c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800313c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800313e:	b672      	cpsid	i
}
 8003140:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003142:	2300      	movs	r3, #0
 8003144:	61bb      	str	r3, [r7, #24]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	61bb      	str	r3, [r7, #24]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	61bb      	str	r3, [r7, #24]
 8003156:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003166:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003168:	b662      	cpsie	i
}
 800316a:	e035      	b.n	80031d8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003170:	2b02      	cmp	r3, #2
 8003172:	d11e      	bne.n	80031b2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003182:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003184:	b672      	cpsid	i
}
 8003186:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003188:	2300      	movs	r3, #0
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80031ae:	b662      	cpsie	i
}
 80031b0:	e012      	b.n	80031d8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031c2:	2300      	movs	r3, #0
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80031d8:	e166      	b.n	80034a8 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031de:	2b03      	cmp	r3, #3
 80031e0:	f200 811f 	bhi.w	8003422 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d123      	bne.n	8003234 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 fc37 	bl	8003a64 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e167      	b.n	80034d0 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691a      	ldr	r2, [r3, #16]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003228:	b29b      	uxth	r3, r3
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003232:	e139      	b.n	80034a8 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003238:	2b02      	cmp	r3, #2
 800323a:	d152      	bne.n	80032e2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003242:	2200      	movs	r2, #0
 8003244:	4906      	ldr	r1, [pc, #24]	; (8003260 <HAL_I2C_Master_Receive+0x23c>)
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 fab4 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d008      	beq.n	8003264 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e13c      	b.n	80034d0 <HAL_I2C_Master_Receive+0x4ac>
 8003256:	bf00      	nop
 8003258:	00100002 	.word	0x00100002
 800325c:	ffff0000 	.word	0xffff0000
 8003260:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003264:	b672      	cpsid	i
}
 8003266:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003276:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691a      	ldr	r2, [r3, #16]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80032aa:	b662      	cpsie	i
}
 80032ac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032e0:	e0e2      	b.n	80034a8 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e8:	2200      	movs	r2, #0
 80032ea:	497b      	ldr	r1, [pc, #492]	; (80034d8 <HAL_I2C_Master_Receive+0x4b4>)
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 fa61 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0e9      	b.n	80034d0 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800330a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800330c:	b672      	cpsid	i
}
 800330e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691a      	ldr	r2, [r3, #16]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003338:	b29b      	uxth	r3, r3
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003342:	4b66      	ldr	r3, [pc, #408]	; (80034dc <HAL_I2C_Master_Receive+0x4b8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	08db      	lsrs	r3, r3, #3
 8003348:	4a65      	ldr	r2, [pc, #404]	; (80034e0 <HAL_I2C_Master_Receive+0x4bc>)
 800334a:	fba2 2303 	umull	r2, r3, r2, r3
 800334e:	0a1a      	lsrs	r2, r3, #8
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	00da      	lsls	r2, r3, #3
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	3b01      	subs	r3, #1
 8003360:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d118      	bne.n	800339a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2220      	movs	r2, #32
 8003372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	f043 0220 	orr.w	r2, r3, #32
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800338a:	b662      	cpsie	i
}
 800338c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e09a      	b.n	80034d0 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d1d9      	bne.n	800335c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691a      	ldr	r2, [r3, #16]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80033ea:	b662      	cpsie	i
}
 80033ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340a:	3b01      	subs	r3, #1
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003420:	e042      	b.n	80034a8 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003424:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 fb1c 	bl	8003a64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e04c      	b.n	80034d0 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345e:	b29b      	uxth	r3, r3
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	2b04      	cmp	r3, #4
 8003474:	d118      	bne.n	80034a8 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f47f ae94 	bne.w	80031da <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	e000      	b.n	80034d0 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80034ce:	2302      	movs	r3, #2
  }
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3728      	adds	r7, #40	; 0x28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	00010004 	.word	0x00010004
 80034dc:	2000000c 	.word	0x2000000c
 80034e0:	14f8b589 	.word	0x14f8b589

080034e4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f2:	b2db      	uxtb	r3, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	4770      	bx	lr

080034fe <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800350a:	4618      	mov	r0, r3
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	bc80      	pop	{r7}
 8003512:	4770      	bx	lr

08003514 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	607a      	str	r2, [r7, #4]
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	460b      	mov	r3, r1
 8003522:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2b08      	cmp	r3, #8
 800352e:	d006      	beq.n	800353e <I2C_MasterRequestWrite+0x2a>
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d003      	beq.n	800353e <I2C_MasterRequestWrite+0x2a>
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800353c:	d108      	bne.n	8003550 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	e00b      	b.n	8003568 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003554:	2b12      	cmp	r3, #18
 8003556:	d107      	bne.n	8003568 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003566:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 f91d 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00d      	beq.n	800359c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800358e:	d103      	bne.n	8003598 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003596:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e035      	b.n	8003608 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035a4:	d108      	bne.n	80035b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035a6:	897b      	ldrh	r3, [r7, #10]
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	461a      	mov	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035b4:	611a      	str	r2, [r3, #16]
 80035b6:	e01b      	b.n	80035f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035b8:	897b      	ldrh	r3, [r7, #10]
 80035ba:	11db      	asrs	r3, r3, #7
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	f003 0306 	and.w	r3, r3, #6
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	f063 030f 	orn	r3, r3, #15
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	490e      	ldr	r1, [pc, #56]	; (8003610 <I2C_MasterRequestWrite+0xfc>)
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f943 	bl	8003862 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e010      	b.n	8003608 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035e6:	897b      	ldrh	r3, [r7, #10]
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	4907      	ldr	r1, [pc, #28]	; (8003614 <I2C_MasterRequestWrite+0x100>)
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f933 	bl	8003862 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e000      	b.n	8003608 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	00010008 	.word	0x00010008
 8003614:	00010002 	.word	0x00010002

08003618 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b088      	sub	sp, #32
 800361c:	af02      	add	r7, sp, #8
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	607a      	str	r2, [r7, #4]
 8003622:	603b      	str	r3, [r7, #0]
 8003624:	460b      	mov	r3, r1
 8003626:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800363c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2b08      	cmp	r3, #8
 8003642:	d006      	beq.n	8003652 <I2C_MasterRequestRead+0x3a>
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d003      	beq.n	8003652 <I2C_MasterRequestRead+0x3a>
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003650:	d108      	bne.n	8003664 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	e00b      	b.n	800367c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	2b11      	cmp	r3, #17
 800366a:	d107      	bne.n	800367c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800367a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f893 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00d      	beq.n	80036b0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a2:	d103      	bne.n	80036ac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e079      	b.n	80037a4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036b8:	d108      	bne.n	80036cc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80036ba:	897b      	ldrh	r3, [r7, #10]
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	f043 0301 	orr.w	r3, r3, #1
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	611a      	str	r2, [r3, #16]
 80036ca:	e05f      	b.n	800378c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80036cc:	897b      	ldrh	r3, [r7, #10]
 80036ce:	11db      	asrs	r3, r3, #7
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	f003 0306 	and.w	r3, r3, #6
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	f063 030f 	orn	r3, r3, #15
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	4930      	ldr	r1, [pc, #192]	; (80037ac <I2C_MasterRequestRead+0x194>)
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f8b9 	bl	8003862 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e054      	b.n	80037a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036fa:	897b      	ldrh	r3, [r7, #10]
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	4929      	ldr	r1, [pc, #164]	; (80037b0 <I2C_MasterRequestRead+0x198>)
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f8a9 	bl	8003862 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e044      	b.n	80037a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800371a:	2300      	movs	r3, #0
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	613b      	str	r3, [r7, #16]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800373e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 f831 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00d      	beq.n	8003774 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003766:	d103      	bne.n	8003770 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800376e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e017      	b.n	80037a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003774:	897b      	ldrh	r3, [r7, #10]
 8003776:	11db      	asrs	r3, r3, #7
 8003778:	b2db      	uxtb	r3, r3
 800377a:	f003 0306 	and.w	r3, r3, #6
 800377e:	b2db      	uxtb	r3, r3
 8003780:	f063 030e 	orn	r3, r3, #14
 8003784:	b2da      	uxtb	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	4907      	ldr	r1, [pc, #28]	; (80037b0 <I2C_MasterRequestRead+0x198>)
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 f865 	bl	8003862 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	00010008 	.word	0x00010008
 80037b0:	00010002 	.word	0x00010002

080037b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	4613      	mov	r3, r2
 80037c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037c4:	e025      	b.n	8003812 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037cc:	d021      	beq.n	8003812 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ce:	f7fe ff39 	bl	8002644 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d302      	bcc.n	80037e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d116      	bne.n	8003812 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	f043 0220 	orr.w	r2, r3, #32
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e023      	b.n	800385a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	0c1b      	lsrs	r3, r3, #16
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b01      	cmp	r3, #1
 800381a:	d10d      	bne.n	8003838 <I2C_WaitOnFlagUntilTimeout+0x84>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	43da      	mvns	r2, r3
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4013      	ands	r3, r2
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	bf0c      	ite	eq
 800382e:	2301      	moveq	r3, #1
 8003830:	2300      	movne	r3, #0
 8003832:	b2db      	uxtb	r3, r3
 8003834:	461a      	mov	r2, r3
 8003836:	e00c      	b.n	8003852 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	43da      	mvns	r2, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4013      	ands	r3, r2
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	bf0c      	ite	eq
 800384a:	2301      	moveq	r3, #1
 800384c:	2300      	movne	r3, #0
 800384e:	b2db      	uxtb	r3, r3
 8003850:	461a      	mov	r2, r3
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	429a      	cmp	r2, r3
 8003856:	d0b6      	beq.n	80037c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b084      	sub	sp, #16
 8003866:	af00      	add	r7, sp, #0
 8003868:	60f8      	str	r0, [r7, #12]
 800386a:	60b9      	str	r1, [r7, #8]
 800386c:	607a      	str	r2, [r7, #4]
 800386e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003870:	e051      	b.n	8003916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800387c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003880:	d123      	bne.n	80038ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003890:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800389a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	f043 0204 	orr.w	r2, r3, #4
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e046      	b.n	8003958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d0:	d021      	beq.n	8003916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d2:	f7fe feb7 	bl	8002644 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d302      	bcc.n	80038e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d116      	bne.n	8003916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2220      	movs	r2, #32
 80038f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	f043 0220 	orr.w	r2, r3, #32
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e020      	b.n	8003958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	0c1b      	lsrs	r3, r3, #16
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b01      	cmp	r3, #1
 800391e:	d10c      	bne.n	800393a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	43da      	mvns	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4013      	ands	r3, r2
 800392c:	b29b      	uxth	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	bf14      	ite	ne
 8003932:	2301      	movne	r3, #1
 8003934:	2300      	moveq	r3, #0
 8003936:	b2db      	uxtb	r3, r3
 8003938:	e00b      	b.n	8003952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	43da      	mvns	r2, r3
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	4013      	ands	r3, r2
 8003946:	b29b      	uxth	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	bf14      	ite	ne
 800394c:	2301      	movne	r3, #1
 800394e:	2300      	moveq	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d18d      	bne.n	8003872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800396c:	e02d      	b.n	80039ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 f8ce 	bl	8003b10 <I2C_IsAcknowledgeFailed>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e02d      	b.n	80039da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003984:	d021      	beq.n	80039ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003986:	f7fe fe5d 	bl	8002644 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	429a      	cmp	r2, r3
 8003994:	d302      	bcc.n	800399c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d116      	bne.n	80039ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	f043 0220 	orr.w	r2, r3, #32
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e007      	b.n	80039da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d4:	2b80      	cmp	r3, #128	; 0x80
 80039d6:	d1ca      	bne.n	800396e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b084      	sub	sp, #16
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	60f8      	str	r0, [r7, #12]
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039ee:	e02d      	b.n	8003a4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 f88d 	bl	8003b10 <I2C_IsAcknowledgeFailed>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e02d      	b.n	8003a5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a06:	d021      	beq.n	8003a4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a08:	f7fe fe1c 	bl	8002644 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d302      	bcc.n	8003a1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d116      	bne.n	8003a4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	f043 0220 	orr.w	r2, r3, #32
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e007      	b.n	8003a5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d1ca      	bne.n	80039f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a70:	e042      	b.n	8003af8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	f003 0310 	and.w	r3, r3, #16
 8003a7c:	2b10      	cmp	r3, #16
 8003a7e:	d119      	bne.n	8003ab4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0210 	mvn.w	r2, #16
 8003a88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e029      	b.n	8003b08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab4:	f7fe fdc6 	bl	8002644 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d302      	bcc.n	8003aca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d116      	bne.n	8003af8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	f043 0220 	orr.w	r2, r3, #32
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e007      	b.n	8003b08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b02:	2b40      	cmp	r3, #64	; 0x40
 8003b04:	d1b5      	bne.n	8003a72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b26:	d11b      	bne.n	8003b60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	f043 0204 	orr.w	r2, r3, #4
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr

08003b6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e272      	b.n	8004064 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 8087 	beq.w	8003c9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b8c:	4b92      	ldr	r3, [pc, #584]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f003 030c 	and.w	r3, r3, #12
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	d00c      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b98:	4b8f      	ldr	r3, [pc, #572]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 030c 	and.w	r3, r3, #12
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d112      	bne.n	8003bca <HAL_RCC_OscConfig+0x5e>
 8003ba4:	4b8c      	ldr	r3, [pc, #560]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb0:	d10b      	bne.n	8003bca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb2:	4b89      	ldr	r3, [pc, #548]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d06c      	beq.n	8003c98 <HAL_RCC_OscConfig+0x12c>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d168      	bne.n	8003c98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e24c      	b.n	8004064 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd2:	d106      	bne.n	8003be2 <HAL_RCC_OscConfig+0x76>
 8003bd4:	4b80      	ldr	r3, [pc, #512]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a7f      	ldr	r2, [pc, #508]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	e02e      	b.n	8003c40 <HAL_RCC_OscConfig+0xd4>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10c      	bne.n	8003c04 <HAL_RCC_OscConfig+0x98>
 8003bea:	4b7b      	ldr	r3, [pc, #492]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a7a      	ldr	r2, [pc, #488]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	4b78      	ldr	r3, [pc, #480]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a77      	ldr	r2, [pc, #476]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003bfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	e01d      	b.n	8003c40 <HAL_RCC_OscConfig+0xd4>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c0c:	d10c      	bne.n	8003c28 <HAL_RCC_OscConfig+0xbc>
 8003c0e:	4b72      	ldr	r3, [pc, #456]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a71      	ldr	r2, [pc, #452]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	4b6f      	ldr	r3, [pc, #444]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a6e      	ldr	r2, [pc, #440]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	e00b      	b.n	8003c40 <HAL_RCC_OscConfig+0xd4>
 8003c28:	4b6b      	ldr	r3, [pc, #428]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a6a      	ldr	r2, [pc, #424]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	4b68      	ldr	r3, [pc, #416]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a67      	ldr	r2, [pc, #412]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d013      	beq.n	8003c70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c48:	f7fe fcfc 	bl	8002644 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c50:	f7fe fcf8 	bl	8002644 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b64      	cmp	r3, #100	; 0x64
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e200      	b.n	8004064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c62:	4b5d      	ldr	r3, [pc, #372]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0xe4>
 8003c6e:	e014      	b.n	8003c9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c70:	f7fe fce8 	bl	8002644 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c78:	f7fe fce4 	bl	8002644 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b64      	cmp	r3, #100	; 0x64
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e1ec      	b.n	8004064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c8a:	4b53      	ldr	r3, [pc, #332]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f0      	bne.n	8003c78 <HAL_RCC_OscConfig+0x10c>
 8003c96:	e000      	b.n	8003c9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d063      	beq.n	8003d6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ca6:	4b4c      	ldr	r3, [pc, #304]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00b      	beq.n	8003cca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003cb2:	4b49      	ldr	r3, [pc, #292]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
 8003cba:	2b08      	cmp	r3, #8
 8003cbc:	d11c      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x18c>
 8003cbe:	4b46      	ldr	r3, [pc, #280]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d116      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cca:	4b43      	ldr	r3, [pc, #268]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d005      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x176>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d001      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e1c0      	b.n	8004064 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce2:	4b3d      	ldr	r3, [pc, #244]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	4939      	ldr	r1, [pc, #228]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf6:	e03a      	b.n	8003d6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d020      	beq.n	8003d42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d00:	4b36      	ldr	r3, [pc, #216]	; (8003ddc <HAL_RCC_OscConfig+0x270>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d06:	f7fe fc9d 	bl	8002644 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d0e:	f7fe fc99 	bl	8002644 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e1a1      	b.n	8004064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d20:	4b2d      	ldr	r3, [pc, #180]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0f0      	beq.n	8003d0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2c:	4b2a      	ldr	r3, [pc, #168]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	4927      	ldr	r1, [pc, #156]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	600b      	str	r3, [r1, #0]
 8003d40:	e015      	b.n	8003d6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d42:	4b26      	ldr	r3, [pc, #152]	; (8003ddc <HAL_RCC_OscConfig+0x270>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d48:	f7fe fc7c 	bl	8002644 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d50:	f7fe fc78 	bl	8002644 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e180      	b.n	8004064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d62:	4b1d      	ldr	r3, [pc, #116]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d03a      	beq.n	8003df0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d019      	beq.n	8003db6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d82:	4b17      	ldr	r3, [pc, #92]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003d84:	2201      	movs	r2, #1
 8003d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d88:	f7fe fc5c 	bl	8002644 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d90:	f7fe fc58 	bl	8002644 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e160      	b.n	8004064 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da2:	4b0d      	ldr	r3, [pc, #52]	; (8003dd8 <HAL_RCC_OscConfig+0x26c>)
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0f0      	beq.n	8003d90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003dae:	2001      	movs	r0, #1
 8003db0:	f000 fac4 	bl	800433c <RCC_Delay>
 8003db4:	e01c      	b.n	8003df0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db6:	4b0a      	ldr	r3, [pc, #40]	; (8003de0 <HAL_RCC_OscConfig+0x274>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dbc:	f7fe fc42 	bl	8002644 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc2:	e00f      	b.n	8003de4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc4:	f7fe fc3e 	bl	8002644 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d908      	bls.n	8003de4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e146      	b.n	8004064 <HAL_RCC_OscConfig+0x4f8>
 8003dd6:	bf00      	nop
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	42420000 	.word	0x42420000
 8003de0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de4:	4b92      	ldr	r3, [pc, #584]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1e9      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 80a6 	beq.w	8003f4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e02:	4b8b      	ldr	r3, [pc, #556]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10d      	bne.n	8003e2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0e:	4b88      	ldr	r3, [pc, #544]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	4a87      	ldr	r2, [pc, #540]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e18:	61d3      	str	r3, [r2, #28]
 8003e1a:	4b85      	ldr	r3, [pc, #532]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e22:	60bb      	str	r3, [r7, #8]
 8003e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e26:	2301      	movs	r3, #1
 8003e28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2a:	4b82      	ldr	r3, [pc, #520]	; (8004034 <HAL_RCC_OscConfig+0x4c8>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d118      	bne.n	8003e68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e36:	4b7f      	ldr	r3, [pc, #508]	; (8004034 <HAL_RCC_OscConfig+0x4c8>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a7e      	ldr	r2, [pc, #504]	; (8004034 <HAL_RCC_OscConfig+0x4c8>)
 8003e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e42:	f7fe fbff 	bl	8002644 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e4a:	f7fe fbfb 	bl	8002644 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b64      	cmp	r3, #100	; 0x64
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e103      	b.n	8004064 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5c:	4b75      	ldr	r3, [pc, #468]	; (8004034 <HAL_RCC_OscConfig+0x4c8>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0f0      	beq.n	8003e4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d106      	bne.n	8003e7e <HAL_RCC_OscConfig+0x312>
 8003e70:	4b6f      	ldr	r3, [pc, #444]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	4a6e      	ldr	r2, [pc, #440]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003e76:	f043 0301 	orr.w	r3, r3, #1
 8003e7a:	6213      	str	r3, [r2, #32]
 8003e7c:	e02d      	b.n	8003eda <HAL_RCC_OscConfig+0x36e>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10c      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x334>
 8003e86:	4b6a      	ldr	r3, [pc, #424]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	4a69      	ldr	r2, [pc, #420]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003e8c:	f023 0301 	bic.w	r3, r3, #1
 8003e90:	6213      	str	r3, [r2, #32]
 8003e92:	4b67      	ldr	r3, [pc, #412]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	4a66      	ldr	r2, [pc, #408]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003e98:	f023 0304 	bic.w	r3, r3, #4
 8003e9c:	6213      	str	r3, [r2, #32]
 8003e9e:	e01c      	b.n	8003eda <HAL_RCC_OscConfig+0x36e>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	2b05      	cmp	r3, #5
 8003ea6:	d10c      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x356>
 8003ea8:	4b61      	ldr	r3, [pc, #388]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	4a60      	ldr	r2, [pc, #384]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003eae:	f043 0304 	orr.w	r3, r3, #4
 8003eb2:	6213      	str	r3, [r2, #32]
 8003eb4:	4b5e      	ldr	r3, [pc, #376]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	4a5d      	ldr	r2, [pc, #372]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003eba:	f043 0301 	orr.w	r3, r3, #1
 8003ebe:	6213      	str	r3, [r2, #32]
 8003ec0:	e00b      	b.n	8003eda <HAL_RCC_OscConfig+0x36e>
 8003ec2:	4b5b      	ldr	r3, [pc, #364]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	4a5a      	ldr	r2, [pc, #360]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003ec8:	f023 0301 	bic.w	r3, r3, #1
 8003ecc:	6213      	str	r3, [r2, #32]
 8003ece:	4b58      	ldr	r3, [pc, #352]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	4a57      	ldr	r2, [pc, #348]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003ed4:	f023 0304 	bic.w	r3, r3, #4
 8003ed8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d015      	beq.n	8003f0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee2:	f7fe fbaf 	bl	8002644 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee8:	e00a      	b.n	8003f00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eea:	f7fe fbab 	bl	8002644 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e0b1      	b.n	8004064 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f00:	4b4b      	ldr	r3, [pc, #300]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0ee      	beq.n	8003eea <HAL_RCC_OscConfig+0x37e>
 8003f0c:	e014      	b.n	8003f38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f0e:	f7fe fb99 	bl	8002644 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f14:	e00a      	b.n	8003f2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f16:	f7fe fb95 	bl	8002644 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e09b      	b.n	8004064 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f2c:	4b40      	ldr	r3, [pc, #256]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1ee      	bne.n	8003f16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f38:	7dfb      	ldrb	r3, [r7, #23]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d105      	bne.n	8003f4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f3e:	4b3c      	ldr	r3, [pc, #240]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	4a3b      	ldr	r2, [pc, #236]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 8087 	beq.w	8004062 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f54:	4b36      	ldr	r3, [pc, #216]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f003 030c 	and.w	r3, r3, #12
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d061      	beq.n	8004024 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d146      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f68:	4b33      	ldr	r3, [pc, #204]	; (8004038 <HAL_RCC_OscConfig+0x4cc>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6e:	f7fe fb69 	bl	8002644 <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f74:	e008      	b.n	8003f88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f76:	f7fe fb65 	bl	8002644 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e06d      	b.n	8004064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f88:	4b29      	ldr	r3, [pc, #164]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1f0      	bne.n	8003f76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f9c:	d108      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f9e:	4b24      	ldr	r3, [pc, #144]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	4921      	ldr	r1, [pc, #132]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fb0:	4b1f      	ldr	r3, [pc, #124]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a19      	ldr	r1, [r3, #32]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	491b      	ldr	r1, [pc, #108]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fc8:	4b1b      	ldr	r3, [pc, #108]	; (8004038 <HAL_RCC_OscConfig+0x4cc>)
 8003fca:	2201      	movs	r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fce:	f7fe fb39 	bl	8002644 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd6:	f7fe fb35 	bl	8002644 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e03d      	b.n	8004064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fe8:	4b11      	ldr	r3, [pc, #68]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0f0      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x46a>
 8003ff4:	e035      	b.n	8004062 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff6:	4b10      	ldr	r3, [pc, #64]	; (8004038 <HAL_RCC_OscConfig+0x4cc>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffc:	f7fe fb22 	bl	8002644 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004004:	f7fe fb1e 	bl	8002644 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e026      	b.n	8004064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004016:	4b06      	ldr	r3, [pc, #24]	; (8004030 <HAL_RCC_OscConfig+0x4c4>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f0      	bne.n	8004004 <HAL_RCC_OscConfig+0x498>
 8004022:	e01e      	b.n	8004062 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d107      	bne.n	800403c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e019      	b.n	8004064 <HAL_RCC_OscConfig+0x4f8>
 8004030:	40021000 	.word	0x40021000
 8004034:	40007000 	.word	0x40007000
 8004038:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800403c:	4b0b      	ldr	r3, [pc, #44]	; (800406c <HAL_RCC_OscConfig+0x500>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	429a      	cmp	r2, r3
 800404e:	d106      	bne.n	800405e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405a:	429a      	cmp	r2, r3
 800405c:	d001      	beq.n	8004062 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40021000 	.word	0x40021000

08004070 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e0d0      	b.n	8004226 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004084:	4b6a      	ldr	r3, [pc, #424]	; (8004230 <HAL_RCC_ClockConfig+0x1c0>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d910      	bls.n	80040b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004092:	4b67      	ldr	r3, [pc, #412]	; (8004230 <HAL_RCC_ClockConfig+0x1c0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f023 0207 	bic.w	r2, r3, #7
 800409a:	4965      	ldr	r1, [pc, #404]	; (8004230 <HAL_RCC_ClockConfig+0x1c0>)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	4313      	orrs	r3, r2
 80040a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a2:	4b63      	ldr	r3, [pc, #396]	; (8004230 <HAL_RCC_ClockConfig+0x1c0>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0307 	and.w	r3, r3, #7
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d001      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e0b8      	b.n	8004226 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d020      	beq.n	8004102 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d005      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040cc:	4b59      	ldr	r3, [pc, #356]	; (8004234 <HAL_RCC_ClockConfig+0x1c4>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	4a58      	ldr	r2, [pc, #352]	; (8004234 <HAL_RCC_ClockConfig+0x1c4>)
 80040d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040e4:	4b53      	ldr	r3, [pc, #332]	; (8004234 <HAL_RCC_ClockConfig+0x1c4>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	4a52      	ldr	r2, [pc, #328]	; (8004234 <HAL_RCC_ClockConfig+0x1c4>)
 80040ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80040ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f0:	4b50      	ldr	r3, [pc, #320]	; (8004234 <HAL_RCC_ClockConfig+0x1c4>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	494d      	ldr	r1, [pc, #308]	; (8004234 <HAL_RCC_ClockConfig+0x1c4>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d040      	beq.n	8004190 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d107      	bne.n	8004126 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004116:	4b47      	ldr	r3, [pc, #284]	; (8004234 <HAL_RCC_ClockConfig+0x1c4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d115      	bne.n	800414e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e07f      	b.n	8004226 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b02      	cmp	r3, #2
 800412c:	d107      	bne.n	800413e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800412e:	4b41      	ldr	r3, [pc, #260]	; (8004234 <HAL_RCC_ClockConfig+0x1c4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d109      	bne.n	800414e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e073      	b.n	8004226 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800413e:	4b3d      	ldr	r3, [pc, #244]	; (8004234 <HAL_RCC_ClockConfig+0x1c4>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e06b      	b.n	8004226 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800414e:	4b39      	ldr	r3, [pc, #228]	; (8004234 <HAL_RCC_ClockConfig+0x1c4>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f023 0203 	bic.w	r2, r3, #3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	4936      	ldr	r1, [pc, #216]	; (8004234 <HAL_RCC_ClockConfig+0x1c4>)
 800415c:	4313      	orrs	r3, r2
 800415e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004160:	f7fe fa70 	bl	8002644 <HAL_GetTick>
 8004164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004166:	e00a      	b.n	800417e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004168:	f7fe fa6c 	bl	8002644 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	f241 3288 	movw	r2, #5000	; 0x1388
 8004176:	4293      	cmp	r3, r2
 8004178:	d901      	bls.n	800417e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e053      	b.n	8004226 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417e:	4b2d      	ldr	r3, [pc, #180]	; (8004234 <HAL_RCC_ClockConfig+0x1c4>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f003 020c 	and.w	r2, r3, #12
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	429a      	cmp	r2, r3
 800418e:	d1eb      	bne.n	8004168 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004190:	4b27      	ldr	r3, [pc, #156]	; (8004230 <HAL_RCC_ClockConfig+0x1c0>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	429a      	cmp	r2, r3
 800419c:	d210      	bcs.n	80041c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800419e:	4b24      	ldr	r3, [pc, #144]	; (8004230 <HAL_RCC_ClockConfig+0x1c0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f023 0207 	bic.w	r2, r3, #7
 80041a6:	4922      	ldr	r1, [pc, #136]	; (8004230 <HAL_RCC_ClockConfig+0x1c0>)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ae:	4b20      	ldr	r3, [pc, #128]	; (8004230 <HAL_RCC_ClockConfig+0x1c0>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d001      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e032      	b.n	8004226 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d008      	beq.n	80041de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041cc:	4b19      	ldr	r3, [pc, #100]	; (8004234 <HAL_RCC_ClockConfig+0x1c4>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	4916      	ldr	r1, [pc, #88]	; (8004234 <HAL_RCC_ClockConfig+0x1c4>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d009      	beq.n	80041fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041ea:	4b12      	ldr	r3, [pc, #72]	; (8004234 <HAL_RCC_ClockConfig+0x1c4>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	490e      	ldr	r1, [pc, #56]	; (8004234 <HAL_RCC_ClockConfig+0x1c4>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041fe:	f000 f821 	bl	8004244 <HAL_RCC_GetSysClockFreq>
 8004202:	4602      	mov	r2, r0
 8004204:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <HAL_RCC_ClockConfig+0x1c4>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	091b      	lsrs	r3, r3, #4
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	490a      	ldr	r1, [pc, #40]	; (8004238 <HAL_RCC_ClockConfig+0x1c8>)
 8004210:	5ccb      	ldrb	r3, [r1, r3]
 8004212:	fa22 f303 	lsr.w	r3, r2, r3
 8004216:	4a09      	ldr	r2, [pc, #36]	; (800423c <HAL_RCC_ClockConfig+0x1cc>)
 8004218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800421a:	4b09      	ldr	r3, [pc, #36]	; (8004240 <HAL_RCC_ClockConfig+0x1d0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f7fe f9ce 	bl	80025c0 <HAL_InitTick>

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	40022000 	.word	0x40022000
 8004234:	40021000 	.word	0x40021000
 8004238:	0800cde0 	.word	0x0800cde0
 800423c:	2000000c 	.word	0x2000000c
 8004240:	20000010 	.word	0x20000010

08004244 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004244:	b490      	push	{r4, r7}
 8004246:	b08a      	sub	sp, #40	; 0x28
 8004248:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800424a:	4b29      	ldr	r3, [pc, #164]	; (80042f0 <HAL_RCC_GetSysClockFreq+0xac>)
 800424c:	1d3c      	adds	r4, r7, #4
 800424e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004250:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004254:	f240 2301 	movw	r3, #513	; 0x201
 8004258:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800425a:	2300      	movs	r3, #0
 800425c:	61fb      	str	r3, [r7, #28]
 800425e:	2300      	movs	r3, #0
 8004260:	61bb      	str	r3, [r7, #24]
 8004262:	2300      	movs	r3, #0
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
 8004266:	2300      	movs	r3, #0
 8004268:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800426e:	4b21      	ldr	r3, [pc, #132]	; (80042f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f003 030c 	and.w	r3, r3, #12
 800427a:	2b04      	cmp	r3, #4
 800427c:	d002      	beq.n	8004284 <HAL_RCC_GetSysClockFreq+0x40>
 800427e:	2b08      	cmp	r3, #8
 8004280:	d003      	beq.n	800428a <HAL_RCC_GetSysClockFreq+0x46>
 8004282:	e02b      	b.n	80042dc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004284:	4b1c      	ldr	r3, [pc, #112]	; (80042f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004286:	623b      	str	r3, [r7, #32]
      break;
 8004288:	e02b      	b.n	80042e2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	0c9b      	lsrs	r3, r3, #18
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	3328      	adds	r3, #40	; 0x28
 8004294:	443b      	add	r3, r7
 8004296:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800429a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d012      	beq.n	80042cc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042a6:	4b13      	ldr	r3, [pc, #76]	; (80042f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	0c5b      	lsrs	r3, r3, #17
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	3328      	adds	r3, #40	; 0x28
 80042b2:	443b      	add	r3, r7
 80042b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80042b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	4a0e      	ldr	r2, [pc, #56]	; (80042f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80042be:	fb03 f202 	mul.w	r2, r3, r2
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24
 80042ca:	e004      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	4a0b      	ldr	r2, [pc, #44]	; (80042fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80042d0:	fb02 f303 	mul.w	r3, r2, r3
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	623b      	str	r3, [r7, #32]
      break;
 80042da:	e002      	b.n	80042e2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042dc:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80042de:	623b      	str	r3, [r7, #32]
      break;
 80042e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042e2:	6a3b      	ldr	r3, [r7, #32]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3728      	adds	r7, #40	; 0x28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bc90      	pop	{r4, r7}
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	0800cd88 	.word	0x0800cd88
 80042f4:	40021000 	.word	0x40021000
 80042f8:	007a1200 	.word	0x007a1200
 80042fc:	003d0900 	.word	0x003d0900

08004300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004304:	4b02      	ldr	r3, [pc, #8]	; (8004310 <HAL_RCC_GetHCLKFreq+0x10>)
 8004306:	681b      	ldr	r3, [r3, #0]
}
 8004308:	4618      	mov	r0, r3
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr
 8004310:	2000000c 	.word	0x2000000c

08004314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004318:	f7ff fff2 	bl	8004300 <HAL_RCC_GetHCLKFreq>
 800431c:	4602      	mov	r2, r0
 800431e:	4b05      	ldr	r3, [pc, #20]	; (8004334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	0a1b      	lsrs	r3, r3, #8
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	4903      	ldr	r1, [pc, #12]	; (8004338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800432a:	5ccb      	ldrb	r3, [r1, r3]
 800432c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004330:	4618      	mov	r0, r3
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40021000 	.word	0x40021000
 8004338:	0800cdf0 	.word	0x0800cdf0

0800433c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004344:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <RCC_Delay+0x34>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a0a      	ldr	r2, [pc, #40]	; (8004374 <RCC_Delay+0x38>)
 800434a:	fba2 2303 	umull	r2, r3, r2, r3
 800434e:	0a5b      	lsrs	r3, r3, #9
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	fb02 f303 	mul.w	r3, r2, r3
 8004356:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004358:	bf00      	nop
  }
  while (Delay --);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	1e5a      	subs	r2, r3, #1
 800435e:	60fa      	str	r2, [r7, #12]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1f9      	bne.n	8004358 <RCC_Delay+0x1c>
}
 8004364:	bf00      	nop
 8004366:	bf00      	nop
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr
 8004370:	2000000c 	.word	0x2000000c
 8004374:	10624dd3 	.word	0x10624dd3

08004378 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e076      	b.n	8004478 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	2b00      	cmp	r3, #0
 8004390:	d108      	bne.n	80043a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800439a:	d009      	beq.n	80043b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	61da      	str	r2, [r3, #28]
 80043a2:	e005      	b.n	80043b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d106      	bne.n	80043d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7fd ff1c 	bl	8002208 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043f8:	431a      	orrs	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004434:	ea42 0103 	orr.w	r1, r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	0c1a      	lsrs	r2, r3, #16
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f002 0204 	and.w	r2, r2, #4
 8004456:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	69da      	ldr	r2, [r3, #28]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004466:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b088      	sub	sp, #32
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	603b      	str	r3, [r7, #0]
 800448c:	4613      	mov	r3, r2
 800448e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800449a:	2b01      	cmp	r3, #1
 800449c:	d101      	bne.n	80044a2 <HAL_SPI_Transmit+0x22>
 800449e:	2302      	movs	r3, #2
 80044a0:	e126      	b.n	80046f0 <HAL_SPI_Transmit+0x270>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044aa:	f7fe f8cb 	bl	8002644 <HAL_GetTick>
 80044ae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80044b0:	88fb      	ldrh	r3, [r7, #6]
 80044b2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d002      	beq.n	80044c6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80044c0:	2302      	movs	r3, #2
 80044c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044c4:	e10b      	b.n	80046de <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d002      	beq.n	80044d2 <HAL_SPI_Transmit+0x52>
 80044cc:	88fb      	ldrh	r3, [r7, #6]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d102      	bne.n	80044d8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044d6:	e102      	b.n	80046de <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2203      	movs	r2, #3
 80044dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	88fa      	ldrh	r2, [r7, #6]
 80044f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	88fa      	ldrh	r2, [r7, #6]
 80044f6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800451e:	d10f      	bne.n	8004540 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800452e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800453e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454a:	2b40      	cmp	r3, #64	; 0x40
 800454c:	d007      	beq.n	800455e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800455c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004566:	d14b      	bne.n	8004600 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <HAL_SPI_Transmit+0xf6>
 8004570:	8afb      	ldrh	r3, [r7, #22]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d13e      	bne.n	80045f4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457a:	881a      	ldrh	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004586:	1c9a      	adds	r2, r3, #2
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004590:	b29b      	uxth	r3, r3
 8004592:	3b01      	subs	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800459a:	e02b      	b.n	80045f4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d112      	bne.n	80045d0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ae:	881a      	ldrh	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	1c9a      	adds	r2, r3, #2
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80045ce:	e011      	b.n	80045f4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045d0:	f7fe f838 	bl	8002644 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d803      	bhi.n	80045e8 <HAL_SPI_Transmit+0x168>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e6:	d102      	bne.n	80045ee <HAL_SPI_Transmit+0x16e>
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d102      	bne.n	80045f4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045f2:	e074      	b.n	80046de <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1ce      	bne.n	800459c <HAL_SPI_Transmit+0x11c>
 80045fe:	e04c      	b.n	800469a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <HAL_SPI_Transmit+0x18e>
 8004608:	8afb      	ldrh	r3, [r7, #22]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d140      	bne.n	8004690 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	330c      	adds	r3, #12
 8004618:	7812      	ldrb	r2, [r2, #0]
 800461a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004634:	e02c      	b.n	8004690 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b02      	cmp	r3, #2
 8004642:	d113      	bne.n	800466c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	330c      	adds	r3, #12
 800464e:	7812      	ldrb	r2, [r2, #0]
 8004650:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004660:	b29b      	uxth	r3, r3
 8004662:	3b01      	subs	r3, #1
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	86da      	strh	r2, [r3, #54]	; 0x36
 800466a:	e011      	b.n	8004690 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800466c:	f7fd ffea 	bl	8002644 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	429a      	cmp	r2, r3
 800467a:	d803      	bhi.n	8004684 <HAL_SPI_Transmit+0x204>
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004682:	d102      	bne.n	800468a <HAL_SPI_Transmit+0x20a>
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d102      	bne.n	8004690 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800468e:	e026      	b.n	80046de <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004694:	b29b      	uxth	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1cd      	bne.n	8004636 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	6839      	ldr	r1, [r7, #0]
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 fa62 	bl	8004b68 <SPI_EndRxTxTransaction>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2220      	movs	r2, #32
 80046ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10a      	bne.n	80046ce <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046b8:	2300      	movs	r3, #0
 80046ba:	613b      	str	r3, [r7, #16]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	613b      	str	r3, [r7, #16]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	613b      	str	r3, [r7, #16]
 80046cc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	77fb      	strb	r3, [r7, #31]
 80046da:	e000      	b.n	80046de <HAL_SPI_Transmit+0x25e>
  }

error:
 80046dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3720      	adds	r7, #32
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08c      	sub	sp, #48	; 0x30
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
 8004704:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004706:	2301      	movs	r3, #1
 8004708:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_SPI_TransmitReceive+0x26>
 800471a:	2302      	movs	r3, #2
 800471c:	e18a      	b.n	8004a34 <HAL_SPI_TransmitReceive+0x33c>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004726:	f7fd ff8d 	bl	8002644 <HAL_GetTick>
 800472a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800473c:	887b      	ldrh	r3, [r7, #2]
 800473e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004740:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004744:	2b01      	cmp	r3, #1
 8004746:	d00f      	beq.n	8004768 <HAL_SPI_TransmitReceive+0x70>
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800474e:	d107      	bne.n	8004760 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d103      	bne.n	8004760 <HAL_SPI_TransmitReceive+0x68>
 8004758:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800475c:	2b04      	cmp	r3, #4
 800475e:	d003      	beq.n	8004768 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004760:	2302      	movs	r3, #2
 8004762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004766:	e15b      	b.n	8004a20 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d005      	beq.n	800477a <HAL_SPI_TransmitReceive+0x82>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d002      	beq.n	800477a <HAL_SPI_TransmitReceive+0x82>
 8004774:	887b      	ldrh	r3, [r7, #2]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d103      	bne.n	8004782 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004780:	e14e      	b.n	8004a20 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b04      	cmp	r3, #4
 800478c:	d003      	beq.n	8004796 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2205      	movs	r2, #5
 8004792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	887a      	ldrh	r2, [r7, #2]
 80047a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	887a      	ldrh	r2, [r7, #2]
 80047ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	887a      	ldrh	r2, [r7, #2]
 80047b8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	887a      	ldrh	r2, [r7, #2]
 80047be:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d6:	2b40      	cmp	r3, #64	; 0x40
 80047d8:	d007      	beq.n	80047ea <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047f2:	d178      	bne.n	80048e6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <HAL_SPI_TransmitReceive+0x10a>
 80047fc:	8b7b      	ldrh	r3, [r7, #26]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d166      	bne.n	80048d0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004806:	881a      	ldrh	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	1c9a      	adds	r2, r3, #2
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800481c:	b29b      	uxth	r3, r3
 800481e:	3b01      	subs	r3, #1
 8004820:	b29a      	uxth	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004826:	e053      	b.n	80048d0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b02      	cmp	r3, #2
 8004834:	d11b      	bne.n	800486e <HAL_SPI_TransmitReceive+0x176>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800483a:	b29b      	uxth	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d016      	beq.n	800486e <HAL_SPI_TransmitReceive+0x176>
 8004840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004842:	2b01      	cmp	r3, #1
 8004844:	d113      	bne.n	800486e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484a:	881a      	ldrh	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	1c9a      	adds	r2, r3, #2
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004860:	b29b      	uxth	r3, r3
 8004862:	3b01      	subs	r3, #1
 8004864:	b29a      	uxth	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b01      	cmp	r3, #1
 800487a:	d119      	bne.n	80048b0 <HAL_SPI_TransmitReceive+0x1b8>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004880:	b29b      	uxth	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d014      	beq.n	80048b0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68da      	ldr	r2, [r3, #12]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004890:	b292      	uxth	r2, r2
 8004892:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004898:	1c9a      	adds	r2, r3, #2
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048ac:	2301      	movs	r3, #1
 80048ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048b0:	f7fd fec8 	bl	8002644 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048bc:	429a      	cmp	r2, r3
 80048be:	d807      	bhi.n	80048d0 <HAL_SPI_TransmitReceive+0x1d8>
 80048c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c6:	d003      	beq.n	80048d0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80048ce:	e0a7      	b.n	8004a20 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1a6      	bne.n	8004828 <HAL_SPI_TransmitReceive+0x130>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048de:	b29b      	uxth	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1a1      	bne.n	8004828 <HAL_SPI_TransmitReceive+0x130>
 80048e4:	e07c      	b.n	80049e0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <HAL_SPI_TransmitReceive+0x1fc>
 80048ee:	8b7b      	ldrh	r3, [r7, #26]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d16b      	bne.n	80049cc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	330c      	adds	r3, #12
 80048fe:	7812      	ldrb	r2, [r2, #0]
 8004900:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004906:	1c5a      	adds	r2, r3, #1
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004910:	b29b      	uxth	r3, r3
 8004912:	3b01      	subs	r3, #1
 8004914:	b29a      	uxth	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800491a:	e057      	b.n	80049cc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b02      	cmp	r3, #2
 8004928:	d11c      	bne.n	8004964 <HAL_SPI_TransmitReceive+0x26c>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800492e:	b29b      	uxth	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	d017      	beq.n	8004964 <HAL_SPI_TransmitReceive+0x26c>
 8004934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004936:	2b01      	cmp	r3, #1
 8004938:	d114      	bne.n	8004964 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	330c      	adds	r3, #12
 8004944:	7812      	ldrb	r2, [r2, #0]
 8004946:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004956:	b29b      	uxth	r3, r3
 8004958:	3b01      	subs	r3, #1
 800495a:	b29a      	uxth	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b01      	cmp	r3, #1
 8004970:	d119      	bne.n	80049a6 <HAL_SPI_TransmitReceive+0x2ae>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004976:	b29b      	uxth	r3, r3
 8004978:	2b00      	cmp	r3, #0
 800497a:	d014      	beq.n	80049a6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004998:	b29b      	uxth	r3, r3
 800499a:	3b01      	subs	r3, #1
 800499c:	b29a      	uxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049a2:	2301      	movs	r3, #1
 80049a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80049a6:	f7fd fe4d 	bl	8002644 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d803      	bhi.n	80049be <HAL_SPI_TransmitReceive+0x2c6>
 80049b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049bc:	d102      	bne.n	80049c4 <HAL_SPI_TransmitReceive+0x2cc>
 80049be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d103      	bne.n	80049cc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80049ca:	e029      	b.n	8004a20 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1a2      	bne.n	800491c <HAL_SPI_TransmitReceive+0x224>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049da:	b29b      	uxth	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d19d      	bne.n	800491c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 f8bf 	bl	8004b68 <SPI_EndRxTxTransaction>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d006      	beq.n	80049fe <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2220      	movs	r2, #32
 80049fa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80049fc:	e010      	b.n	8004a20 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10b      	bne.n	8004a1e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a06:	2300      	movs	r3, #0
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	617b      	str	r3, [r7, #20]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	e000      	b.n	8004a20 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004a1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3730      	adds	r7, #48	; 0x30
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a4a:	b2db      	uxtb	r3, r3
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr
	...

08004a58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	603b      	str	r3, [r7, #0]
 8004a64:	4613      	mov	r3, r2
 8004a66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a68:	f7fd fdec 	bl	8002644 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a70:	1a9b      	subs	r3, r3, r2
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	4413      	add	r3, r2
 8004a76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a78:	f7fd fde4 	bl	8002644 <HAL_GetTick>
 8004a7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a7e:	4b39      	ldr	r3, [pc, #228]	; (8004b64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	015b      	lsls	r3, r3, #5
 8004a84:	0d1b      	lsrs	r3, r3, #20
 8004a86:	69fa      	ldr	r2, [r7, #28]
 8004a88:	fb02 f303 	mul.w	r3, r2, r3
 8004a8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a8e:	e054      	b.n	8004b3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a96:	d050      	beq.n	8004b3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a98:	f7fd fdd4 	bl	8002644 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	69fa      	ldr	r2, [r7, #28]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d902      	bls.n	8004aae <SPI_WaitFlagStateUntilTimeout+0x56>
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d13d      	bne.n	8004b2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004abc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ac6:	d111      	bne.n	8004aec <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad0:	d004      	beq.n	8004adc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ada:	d107      	bne.n	8004aec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af4:	d10f      	bne.n	8004b16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e017      	b.n	8004b5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	4013      	ands	r3, r2
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	bf0c      	ite	eq
 8004b4a:	2301      	moveq	r3, #1
 8004b4c:	2300      	movne	r3, #0
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	461a      	mov	r2, r3
 8004b52:	79fb      	ldrb	r3, [r7, #7]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d19b      	bne.n	8004a90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3720      	adds	r7, #32
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	2000000c 	.word	0x2000000c

08004b68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af02      	add	r7, sp, #8
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	2180      	movs	r1, #128	; 0x80
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f7ff ff6a 	bl	8004a58 <SPI_WaitFlagStateUntilTimeout>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d007      	beq.n	8004b9a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8e:	f043 0220 	orr.w	r2, r3, #32
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e000      	b.n	8004b9c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004ba8:	4904      	ldr	r1, [pc, #16]	; (8004bbc <MX_FATFS_Init+0x18>)
 8004baa:	4805      	ldr	r0, [pc, #20]	; (8004bc0 <MX_FATFS_Init+0x1c>)
 8004bac:	f003 f8e2 	bl	8007d74 <FATFS_LinkDriver>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	4b03      	ldr	r3, [pc, #12]	; (8004bc4 <MX_FATFS_Init+0x20>)
 8004bb6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004bb8:	bf00      	nop
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	20000b40 	.word	0x20000b40
 8004bc0:	20000018 	.word	0x20000018
 8004bc4:	20000b3c 	.word	0x20000b3c

08004bc8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004bcc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bc80      	pop	{r7}
 8004bd4:	4770      	bx	lr

08004bd6 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b082      	sub	sp, #8
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	4603      	mov	r3, r0
 8004bde:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
    return SD_disk_initialize (pdrv);
 8004be0:	79fb      	ldrb	r3, [r7, #7]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fc fb8c 	bl	8001300 <SD_disk_initialize>
 8004be8:	4603      	mov	r3, r0
 8004bea:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	  //  Stat = STA_NOINIT;
	   // return Stat;
	    return SD_disk_status (pdrv);
 8004bfe:	79fb      	ldrb	r3, [r7, #7]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7fc fc67 	bl	80014d4 <SD_disk_status>
 8004c06:	4603      	mov	r3, r0
 8004c08:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	603b      	str	r3, [r7, #0]
 8004c1e:	4603      	mov	r3, r0
 8004c20:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	   // return RES_OK;
	    return SD_disk_read (pdrv, buff, sector, count);
 8004c22:	7bf8      	ldrb	r0, [r7, #15]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	68b9      	ldr	r1, [r7, #8]
 8004c2a:	f7fc fc67 	bl	80014fc <SD_disk_read>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b084      	sub	sp, #16
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	603b      	str	r3, [r7, #0]
 8004c46:	4603      	mov	r3, r0
 8004c48:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	   // return RES_OK;
	    return SD_disk_write (pdrv, buff, sector, count);
 8004c4a:	7bf8      	ldrb	r0, [r7, #15]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	68b9      	ldr	r1, [r7, #8]
 8004c52:	f7fc fcbd 	bl	80015d0 <SD_disk_write>
 8004c56:	4603      	mov	r3, r0
 8004c58:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b084      	sub	sp, #16
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	4603      	mov	r3, r0
 8004c6a:	603a      	str	r2, [r7, #0]
 8004c6c:	71fb      	strb	r3, [r7, #7]
 8004c6e:	460b      	mov	r3, r1
 8004c70:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
      DRESULT res = RES_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	73fb      	strb	r3, [r7, #15]
   // return res;
    return SD_disk_ioctl (pdrv, cmd, buff);
 8004c76:	79fb      	ldrb	r3, [r7, #7]
 8004c78:	79b9      	ldrb	r1, [r7, #6]
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7fc fd2b 	bl	80016d8 <SD_disk_ioctl>
 8004c82:	4603      	mov	r3, r0
 8004c84:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	4603      	mov	r3, r0
 8004c98:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004c9a:	79fb      	ldrb	r3, [r7, #7]
 8004c9c:	4a08      	ldr	r2, [pc, #32]	; (8004cc0 <disk_status+0x30>)
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	79fa      	ldrb	r2, [r7, #7]
 8004ca8:	4905      	ldr	r1, [pc, #20]	; (8004cc0 <disk_status+0x30>)
 8004caa:	440a      	add	r2, r1
 8004cac:	7a12      	ldrb	r2, [r2, #8]
 8004cae:	4610      	mov	r0, r2
 8004cb0:	4798      	blx	r3
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	20000d64 	.word	0x20000d64

08004cc4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	4603      	mov	r3, r0
 8004ccc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8004cd2:	79fb      	ldrb	r3, [r7, #7]
 8004cd4:	4a0d      	ldr	r2, [pc, #52]	; (8004d0c <disk_initialize+0x48>)
 8004cd6:	5cd3      	ldrb	r3, [r2, r3]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d111      	bne.n	8004d00 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	4a0b      	ldr	r2, [pc, #44]	; (8004d0c <disk_initialize+0x48>)
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004ce4:	79fb      	ldrb	r3, [r7, #7]
 8004ce6:	4a09      	ldr	r2, [pc, #36]	; (8004d0c <disk_initialize+0x48>)
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	79fa      	ldrb	r2, [r7, #7]
 8004cf2:	4906      	ldr	r1, [pc, #24]	; (8004d0c <disk_initialize+0x48>)
 8004cf4:	440a      	add	r2, r1
 8004cf6:	7a12      	ldrb	r2, [r2, #8]
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	4798      	blx	r3
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	20000d64 	.word	0x20000d64

08004d10 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004d10:	b590      	push	{r4, r7, lr}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	607a      	str	r2, [r7, #4]
 8004d1a:	603b      	str	r3, [r7, #0]
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
 8004d22:	4a0a      	ldr	r2, [pc, #40]	; (8004d4c <disk_read+0x3c>)
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	689c      	ldr	r4, [r3, #8]
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
 8004d2e:	4a07      	ldr	r2, [pc, #28]	; (8004d4c <disk_read+0x3c>)
 8004d30:	4413      	add	r3, r2
 8004d32:	7a18      	ldrb	r0, [r3, #8]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	47a0      	blx	r4
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	371c      	adds	r7, #28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd90      	pop	{r4, r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20000d64 	.word	0x20000d64

08004d50 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004d50:	b590      	push	{r4, r7, lr}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60b9      	str	r1, [r7, #8]
 8004d58:	607a      	str	r2, [r7, #4]
 8004d5a:	603b      	str	r3, [r7, #0]
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	4a0a      	ldr	r2, [pc, #40]	; (8004d8c <disk_write+0x3c>)
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	68dc      	ldr	r4, [r3, #12]
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
 8004d6e:	4a07      	ldr	r2, [pc, #28]	; (8004d8c <disk_write+0x3c>)
 8004d70:	4413      	add	r3, r2
 8004d72:	7a18      	ldrb	r0, [r3, #8]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	68b9      	ldr	r1, [r7, #8]
 8004d7a:	47a0      	blx	r4
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	371c      	adds	r7, #28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd90      	pop	{r4, r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20000d64 	.word	0x20000d64

08004d90 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	4603      	mov	r3, r0
 8004d98:	603a      	str	r2, [r7, #0]
 8004d9a:	71fb      	strb	r3, [r7, #7]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004da0:	79fb      	ldrb	r3, [r7, #7]
 8004da2:	4a09      	ldr	r2, [pc, #36]	; (8004dc8 <disk_ioctl+0x38>)
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	79fa      	ldrb	r2, [r7, #7]
 8004dae:	4906      	ldr	r1, [pc, #24]	; (8004dc8 <disk_ioctl+0x38>)
 8004db0:	440a      	add	r2, r1
 8004db2:	7a10      	ldrb	r0, [r2, #8]
 8004db4:	79b9      	ldrb	r1, [r7, #6]
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	4798      	blx	r3
 8004dba:	4603      	mov	r3, r0
 8004dbc:	73fb      	strb	r3, [r7, #15]
  return res;
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	20000d64 	.word	0x20000d64

08004dcc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8004de0:	e007      	b.n	8004df2 <mem_cpy+0x26>
		*d++ = *s++;
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	1c53      	adds	r3, r2, #1
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	1c59      	adds	r1, r3, #1
 8004dec:	6179      	str	r1, [r7, #20]
 8004dee:	7812      	ldrb	r2, [r2, #0]
 8004df0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	1e5a      	subs	r2, r3, #1
 8004df6:	607a      	str	r2, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1f2      	bne.n	8004de2 <mem_cpy+0x16>
}
 8004dfc:	bf00      	nop
 8004dfe:	bf00      	nop
 8004e00:	371c      	adds	r7, #28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bc80      	pop	{r7}
 8004e06:	4770      	bx	lr

08004e08 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004e18:	e005      	b.n	8004e26 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	617a      	str	r2, [r7, #20]
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	1e5a      	subs	r2, r3, #1
 8004e2a:	607a      	str	r2, [r7, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1f4      	bne.n	8004e1a <mem_set+0x12>
}
 8004e30:	bf00      	nop
 8004e32:	bf00      	nop
 8004e34:	371c      	adds	r7, #28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bc80      	pop	{r7}
 8004e3a:	4770      	bx	lr

08004e3c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004e3c:	b480      	push	{r7}
 8004e3e:	b089      	sub	sp, #36	; 0x24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	61fb      	str	r3, [r7, #28]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004e50:	2300      	movs	r3, #0
 8004e52:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004e54:	bf00      	nop
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	1e5a      	subs	r2, r3, #1
 8004e5a:	607a      	str	r2, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00d      	beq.n	8004e7c <mem_cmp+0x40>
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	61fa      	str	r2, [r7, #28]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	4619      	mov	r1, r3
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	61ba      	str	r2, [r7, #24]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	1acb      	subs	r3, r1, r3
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0ec      	beq.n	8004e56 <mem_cmp+0x1a>
	return r;
 8004e7c:	697b      	ldr	r3, [r7, #20]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3724      	adds	r7, #36	; 0x24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bc80      	pop	{r7}
 8004e86:	4770      	bx	lr

08004e88 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004e92:	e002      	b.n	8004e9a <chk_chr+0x12>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3301      	adds	r3, #1
 8004e98:	607b      	str	r3, [r7, #4]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d005      	beq.n	8004eae <chk_chr+0x26>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d1f2      	bne.n	8004e94 <chk_chr+0xc>
	return *str;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr

08004ebc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60bb      	str	r3, [r7, #8]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	60fb      	str	r3, [r7, #12]
 8004ece:	e038      	b.n	8004f42 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8004ed0:	492f      	ldr	r1, [pc, #188]	; (8004f90 <chk_lock+0xd4>)
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	4413      	add	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	440b      	add	r3, r1
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d029      	beq.n	8004f38 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004ee4:	492a      	ldr	r1, [pc, #168]	; (8004f90 <chk_lock+0xd4>)
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	4413      	add	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	440b      	add	r3, r1
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d11e      	bne.n	8004f3c <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8004efe:	4924      	ldr	r1, [pc, #144]	; (8004f90 <chk_lock+0xd4>)
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	4613      	mov	r3, r2
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	4413      	add	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	440b      	add	r3, r1
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d110      	bne.n	8004f3c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8004f1a:	491d      	ldr	r1, [pc, #116]	; (8004f90 <chk_lock+0xd4>)
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	440b      	add	r3, r1
 8004f28:	3308      	adds	r3, #8
 8004f2a:	881a      	ldrh	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d102      	bne.n	8004f3c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8004f36:	e007      	b.n	8004f48 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d9c3      	bls.n	8004ed0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d109      	bne.n	8004f62 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d102      	bne.n	8004f5a <chk_lock+0x9e>
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d101      	bne.n	8004f5e <chk_lock+0xa2>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e013      	b.n	8004f86 <chk_lock+0xca>
 8004f5e:	2312      	movs	r3, #18
 8004f60:	e011      	b.n	8004f86 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10b      	bne.n	8004f80 <chk_lock+0xc4>
 8004f68:	4909      	ldr	r1, [pc, #36]	; (8004f90 <chk_lock+0xd4>)
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	4413      	add	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	440b      	add	r3, r1
 8004f76:	330a      	adds	r3, #10
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f7e:	d101      	bne.n	8004f84 <chk_lock+0xc8>
 8004f80:	2310      	movs	r3, #16
 8004f82:	e000      	b.n	8004f86 <chk_lock+0xca>
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bc80      	pop	{r7}
 8004f8e:	4770      	bx	lr
 8004f90:	20000b4c 	.word	0x20000b4c

08004f94 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	607b      	str	r3, [r7, #4]
 8004f9e:	e002      	b.n	8004fa6 <enq_lock+0x12>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	607b      	str	r3, [r7, #4]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d809      	bhi.n	8004fc0 <enq_lock+0x2c>
 8004fac:	490a      	ldr	r1, [pc, #40]	; (8004fd8 <enq_lock+0x44>)
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1ef      	bne.n	8004fa0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	bf14      	ite	ne
 8004fc6:	2301      	movne	r3, #1
 8004fc8:	2300      	moveq	r3, #0
 8004fca:	b2db      	uxtb	r3, r3
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bc80      	pop	{r7}
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	20000b4c 	.word	0x20000b4c

08004fdc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	e02b      	b.n	8005044 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8004fec:	4955      	ldr	r1, [pc, #340]	; (8005144 <inc_lock+0x168>)
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	4413      	add	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005002:	429a      	cmp	r2, r3
 8005004:	d11b      	bne.n	800503e <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8005006:	494f      	ldr	r1, [pc, #316]	; (8005144 <inc_lock+0x168>)
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	4613      	mov	r3, r2
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	4413      	add	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	440b      	add	r3, r1
 8005014:	3304      	adds	r3, #4
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 800501e:	429a      	cmp	r2, r3
 8005020:	d10d      	bne.n	800503e <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8005022:	4948      	ldr	r1, [pc, #288]	; (8005144 <inc_lock+0x168>)
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4613      	mov	r3, r2
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	4413      	add	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	440b      	add	r3, r1
 8005030:	3308      	adds	r3, #8
 8005032:	881a      	ldrh	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 800503a:	429a      	cmp	r2, r3
 800503c:	d006      	beq.n	800504c <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3301      	adds	r3, #1
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d9d0      	bls.n	8004fec <inc_lock+0x10>
 800504a:	e000      	b.n	800504e <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800504c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d145      	bne.n	80050e0 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005054:	2300      	movs	r3, #0
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	e002      	b.n	8005060 <inc_lock+0x84>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3301      	adds	r3, #1
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d809      	bhi.n	800507a <inc_lock+0x9e>
 8005066:	4937      	ldr	r1, [pc, #220]	; (8005144 <inc_lock+0x168>)
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	4613      	mov	r3, r2
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	4413      	add	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	440b      	add	r3, r1
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1ef      	bne.n	800505a <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2b02      	cmp	r3, #2
 800507e:	d101      	bne.n	8005084 <inc_lock+0xa8>
 8005080:	2300      	movs	r3, #0
 8005082:	e05a      	b.n	800513a <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800508a:	482e      	ldr	r0, [pc, #184]	; (8005144 <inc_lock+0x168>)
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4613      	mov	r3, r2
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	4413      	add	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4403      	add	r3, r0
 8005098:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 80050a0:	4828      	ldr	r0, [pc, #160]	; (8005144 <inc_lock+0x168>)
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4613      	mov	r3, r2
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	4413      	add	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4403      	add	r3, r0
 80050ae:	3304      	adds	r3, #4
 80050b0:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 80050b8:	4922      	ldr	r1, [pc, #136]	; (8005144 <inc_lock+0x168>)
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4613      	mov	r3, r2
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	4413      	add	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	440b      	add	r3, r1
 80050c6:	3308      	adds	r3, #8
 80050c8:	4602      	mov	r2, r0
 80050ca:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80050cc:	491d      	ldr	r1, [pc, #116]	; (8005144 <inc_lock+0x168>)
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	4613      	mov	r3, r2
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	4413      	add	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	440b      	add	r3, r1
 80050da:	330a      	adds	r3, #10
 80050dc:	2200      	movs	r2, #0
 80050de:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00c      	beq.n	8005100 <inc_lock+0x124>
 80050e6:	4917      	ldr	r1, [pc, #92]	; (8005144 <inc_lock+0x168>)
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4613      	mov	r3, r2
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	4413      	add	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	440b      	add	r3, r1
 80050f4:	330a      	adds	r3, #10
 80050f6:	881b      	ldrh	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <inc_lock+0x124>
 80050fc:	2300      	movs	r3, #0
 80050fe:	e01c      	b.n	800513a <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10b      	bne.n	800511e <inc_lock+0x142>
 8005106:	490f      	ldr	r1, [pc, #60]	; (8005144 <inc_lock+0x168>)
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	4613      	mov	r3, r2
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	4413      	add	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	440b      	add	r3, r1
 8005114:	330a      	adds	r3, #10
 8005116:	881b      	ldrh	r3, [r3, #0]
 8005118:	3301      	adds	r3, #1
 800511a:	b299      	uxth	r1, r3
 800511c:	e001      	b.n	8005122 <inc_lock+0x146>
 800511e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005122:	4808      	ldr	r0, [pc, #32]	; (8005144 <inc_lock+0x168>)
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4613      	mov	r3, r2
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4403      	add	r3, r0
 8005130:	330a      	adds	r3, #10
 8005132:	460a      	mov	r2, r1
 8005134:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	3301      	adds	r3, #1
}
 800513a:	4618      	mov	r0, r3
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	bc80      	pop	{r7}
 8005142:	4770      	bx	lr
 8005144:	20000b4c 	.word	0x20000b4c

08005148 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3b01      	subs	r3, #1
 8005154:	607b      	str	r3, [r7, #4]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d82e      	bhi.n	80051ba <dec_lock+0x72>
		n = Files[i].ctr;
 800515c:	491b      	ldr	r1, [pc, #108]	; (80051cc <dec_lock+0x84>)
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	4613      	mov	r3, r2
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	4413      	add	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	330a      	adds	r3, #10
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005170:	89fb      	ldrh	r3, [r7, #14]
 8005172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005176:	d101      	bne.n	800517c <dec_lock+0x34>
 8005178:	2300      	movs	r3, #0
 800517a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800517c:	89fb      	ldrh	r3, [r7, #14]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <dec_lock+0x40>
 8005182:	89fb      	ldrh	r3, [r7, #14]
 8005184:	3b01      	subs	r3, #1
 8005186:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005188:	4910      	ldr	r1, [pc, #64]	; (80051cc <dec_lock+0x84>)
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	4613      	mov	r3, r2
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	4413      	add	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	440b      	add	r3, r1
 8005196:	330a      	adds	r3, #10
 8005198:	89fa      	ldrh	r2, [r7, #14]
 800519a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800519c:	89fb      	ldrh	r3, [r7, #14]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d108      	bne.n	80051b4 <dec_lock+0x6c>
 80051a2:	490a      	ldr	r1, [pc, #40]	; (80051cc <dec_lock+0x84>)
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	4613      	mov	r3, r2
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	4413      	add	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	440b      	add	r3, r1
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80051b4:	2300      	movs	r3, #0
 80051b6:	737b      	strb	r3, [r7, #13]
 80051b8:	e001      	b.n	80051be <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80051ba:	2302      	movs	r3, #2
 80051bc:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80051be:	7b7b      	ldrb	r3, [r7, #13]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bc80      	pop	{r7}
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	20000b4c 	.word	0x20000b4c

080051d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	e016      	b.n	800520c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80051de:	4910      	ldr	r1, [pc, #64]	; (8005220 <clear_lock+0x50>)
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4613      	mov	r3, r2
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	4413      	add	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	440b      	add	r3, r1
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d108      	bne.n	8005206 <clear_lock+0x36>
 80051f4:	490a      	ldr	r1, [pc, #40]	; (8005220 <clear_lock+0x50>)
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4613      	mov	r3, r2
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	4413      	add	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	440b      	add	r3, r1
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	3301      	adds	r3, #1
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d9e5      	bls.n	80051de <clear_lock+0xe>
	}
}
 8005212:	bf00      	nop
 8005214:	bf00      	nop
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	bc80      	pop	{r7}
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	20000b4c 	.word	0x20000b4c

08005224 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800522c:	2300      	movs	r3, #0
 800522e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8005236:	2b00      	cmp	r3, #0
 8005238:	d038      	beq.n	80052ac <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005240:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005248:	6879      	ldr	r1, [r7, #4]
 800524a:	2301      	movs	r3, #1
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	f7ff fd7f 	bl	8004d50 <disk_write>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <sync_window+0x3a>
			res = FR_DISK_ERR;
 8005258:	2301      	movs	r3, #1
 800525a:	73fb      	strb	r3, [r7, #15]
 800525c:	e026      	b.n	80052ac <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	1ad2      	subs	r2, r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005276:	429a      	cmp	r2, r3
 8005278:	d218      	bcs.n	80052ac <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005280:	613b      	str	r3, [r7, #16]
 8005282:	e010      	b.n	80052a6 <sync_window+0x82>
					wsect += fs->fsize;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	4413      	add	r3, r2
 800528e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	2301      	movs	r3, #1
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	f7ff fd58 	bl	8004d50 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	613b      	str	r3, [r7, #16]
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d8eb      	bhi.n	8005284 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b084      	sub	sp, #16
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d01b      	beq.n	8005308 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7ff ffa7 	bl	8005224 <sync_window>
 80052d6:	4603      	mov	r3, r0
 80052d8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80052da:	7bfb      	ldrb	r3, [r7, #15]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d113      	bne.n	8005308 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80052e6:	6879      	ldr	r1, [r7, #4]
 80052e8:	2301      	movs	r3, #1
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	f7ff fd10 	bl	8004d10 <disk_read>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d004      	beq.n	8005300 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80052f6:	f04f 33ff 	mov.w	r3, #4294967295
 80052fa:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8005308:	7bfb      	ldrb	r3, [r7, #15]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7ff ff82 	bl	8005224 <sync_window>
 8005320:	4603      	mov	r3, r0
 8005322:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005324:	7bfb      	ldrb	r3, [r7, #15]
 8005326:	2b00      	cmp	r3, #0
 8005328:	f040 809b 	bne.w	8005462 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005332:	2b03      	cmp	r3, #3
 8005334:	f040 8088 	bne.w	8005448 <sync_fs+0x136>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800533e:	2b01      	cmp	r3, #1
 8005340:	f040 8082 	bne.w	8005448 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800534a:	2100      	movs	r1, #0
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff fd5b 	bl	8004e08 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2255      	movs	r2, #85	; 0x55
 8005356:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	22aa      	movs	r2, #170	; 0xaa
 800535e:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2252      	movs	r2, #82	; 0x52
 8005366:	701a      	strb	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2252      	movs	r2, #82	; 0x52
 800536c:	705a      	strb	r2, [r3, #1]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2261      	movs	r2, #97	; 0x61
 8005372:	709a      	strb	r2, [r3, #2]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2241      	movs	r2, #65	; 0x41
 8005378:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2272      	movs	r2, #114	; 0x72
 800537e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2272      	movs	r2, #114	; 0x72
 8005386:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2241      	movs	r2, #65	; 0x41
 800538e:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2261      	movs	r2, #97	; 0x61
 8005396:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	0a1b      	lsrs	r3, r3, #8
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80053c2:	0c1b      	lsrs	r3, r3, #16
 80053c4:	b2da      	uxtb	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80053d2:	0e1b      	lsrs	r3, r3, #24
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	0a1b      	lsrs	r3, r3, #8
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005404:	0c1b      	lsrs	r3, r3, #16
 8005406:	b2da      	uxtb	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005414:	0e1b      	lsrs	r3, r3, #24
 8005416:	b2da      	uxtb	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005424:	1c5a      	adds	r2, r3, #1
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800543a:	2301      	movs	r3, #1
 800543c:	f7ff fc88 	bl	8004d50 <disk_write>
			fs->fsi_flag = 0;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800544e:	2200      	movs	r2, #0
 8005450:	2100      	movs	r1, #0
 8005452:	4618      	mov	r0, r3
 8005454:	f7ff fc9c 	bl	8004d90 <disk_ioctl>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <sync_fs+0x150>
			res = FR_DISK_ERR;
 800545e:	2301      	movs	r3, #1
 8005460:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005462:	7bfb      	ldrb	r3, [r7, #15]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	3b02      	subs	r3, #2
 800547a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005482:	3b02      	subs	r3, #2
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d301      	bcc.n	800548e <clust2sect+0x22>
 800548a:	2300      	movs	r3, #0
 800548c:	e00a      	b.n	80054a4 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005494:	461a      	mov	r2, r3
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	fb03 f202 	mul.w	r2, r3, r2
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80054a2:	4413      	add	r3, r2
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bc80      	pop	{r7}
 80054ac:	4770      	bx	lr

080054ae <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b086      	sub	sp, #24
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
 80054b6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d905      	bls.n	80054ca <get_fat+0x1c>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d302      	bcc.n	80054d0 <get_fat+0x22>
		val = 1;	/* Internal error */
 80054ca:	2301      	movs	r3, #1
 80054cc:	617b      	str	r3, [r7, #20]
 80054ce:	e0a3      	b.n	8005618 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80054d0:	f04f 33ff 	mov.w	r3, #4294967295
 80054d4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80054dc:	2b03      	cmp	r3, #3
 80054de:	d068      	beq.n	80055b2 <get_fat+0x104>
 80054e0:	2b03      	cmp	r3, #3
 80054e2:	f300 808f 	bgt.w	8005604 <get_fat+0x156>
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d002      	beq.n	80054f0 <get_fat+0x42>
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d040      	beq.n	8005570 <get_fat+0xc2>
 80054ee:	e089      	b.n	8005604 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	085b      	lsrs	r3, r3, #1
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	4413      	add	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	0a5b      	lsrs	r3, r3, #9
 8005508:	4413      	add	r3, r2
 800550a:	4619      	mov	r1, r3
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7ff fed2 	bl	80052b6 <move_window>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d178      	bne.n	800560a <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	60fa      	str	r2, [r7, #12]
 800551e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	5cd3      	ldrb	r3, [r2, r3]
 8005526:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	0a5b      	lsrs	r3, r3, #9
 8005532:	4413      	add	r3, r2
 8005534:	4619      	mov	r1, r3
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7ff febd 	bl	80052b6 <move_window>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d165      	bne.n	800560e <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	5cd3      	ldrb	r3, [r2, r3]
 800554c:	021b      	lsls	r3, r3, #8
 800554e:	461a      	mov	r2, r3
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	4313      	orrs	r3, r2
 8005554:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <get_fat+0xb8>
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	091b      	lsrs	r3, r3, #4
 8005564:	e002      	b.n	800556c <get_fat+0xbe>
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800556c:	617b      	str	r3, [r7, #20]
			break;
 800556e:	e053      	b.n	8005618 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	0a1b      	lsrs	r3, r3, #8
 800557a:	4413      	add	r3, r2
 800557c:	4619      	mov	r1, r3
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7ff fe99 	bl	80052b6 <move_window>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d143      	bne.n	8005612 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	4413      	add	r3, r2
 8005596:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	3301      	adds	r3, #1
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	021b      	lsls	r3, r3, #8
 80055a0:	b21a      	sxth	r2, r3
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	b21b      	sxth	r3, r3
 80055a8:	4313      	orrs	r3, r2
 80055aa:	b21b      	sxth	r3, r3
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	617b      	str	r3, [r7, #20]
			break;
 80055b0:	e032      	b.n	8005618 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	09db      	lsrs	r3, r3, #7
 80055bc:	4413      	add	r3, r2
 80055be:	4619      	mov	r1, r3
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7ff fe78 	bl	80052b6 <move_window>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d124      	bne.n	8005616 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	4413      	add	r3, r2
 80055d8:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	3303      	adds	r3, #3
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	061a      	lsls	r2, r3, #24
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	3302      	adds	r3, #2
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	041b      	lsls	r3, r3, #16
 80055ea:	4313      	orrs	r3, r2
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	3201      	adds	r2, #1
 80055f0:	7812      	ldrb	r2, [r2, #0]
 80055f2:	0212      	lsls	r2, r2, #8
 80055f4:	4313      	orrs	r3, r2
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	7812      	ldrb	r2, [r2, #0]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005600:	617b      	str	r3, [r7, #20]
			break;
 8005602:	e009      	b.n	8005618 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8005604:	2301      	movs	r3, #1
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	e006      	b.n	8005618 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800560a:	bf00      	nop
 800560c:	e004      	b.n	8005618 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800560e:	bf00      	nop
 8005610:	e002      	b.n	8005618 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005612:	bf00      	nop
 8005614:	e000      	b.n	8005618 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005616:	bf00      	nop
		}
	}

	return val;
 8005618:	697b      	ldr	r3, [r7, #20]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b088      	sub	sp, #32
 8005626:	af00      	add	r7, sp, #0
 8005628:	60f8      	str	r0, [r7, #12]
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d905      	bls.n	8005640 <put_fat+0x1e>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	429a      	cmp	r2, r3
 800563e:	d302      	bcc.n	8005646 <put_fat+0x24>
		res = FR_INT_ERR;
 8005640:	2302      	movs	r3, #2
 8005642:	77fb      	strb	r3, [r7, #31]
 8005644:	e0f6      	b.n	8005834 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800564c:	2b03      	cmp	r3, #3
 800564e:	f000 809e 	beq.w	800578e <put_fat+0x16c>
 8005652:	2b03      	cmp	r3, #3
 8005654:	f300 80e4 	bgt.w	8005820 <put_fat+0x1fe>
 8005658:	2b01      	cmp	r3, #1
 800565a:	d002      	beq.n	8005662 <put_fat+0x40>
 800565c:	2b02      	cmp	r3, #2
 800565e:	d06f      	beq.n	8005740 <put_fat+0x11e>
 8005660:	e0de      	b.n	8005820 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	617b      	str	r3, [r7, #20]
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	085b      	lsrs	r3, r3, #1
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	4413      	add	r3, r2
 800566e:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	0a5b      	lsrs	r3, r3, #9
 800567a:	4413      	add	r3, r2
 800567c:	4619      	mov	r1, r3
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f7ff fe19 	bl	80052b6 <move_window>
 8005684:	4603      	mov	r3, r0
 8005686:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005688:	7ffb      	ldrb	r3, [r7, #31]
 800568a:	2b00      	cmp	r3, #0
 800568c:	f040 80cb 	bne.w	8005826 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	617a      	str	r2, [r7, #20]
 8005696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	4413      	add	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00d      	beq.n	80056c6 <put_fat+0xa4>
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	b25b      	sxtb	r3, r3
 80056b0:	f003 030f 	and.w	r3, r3, #15
 80056b4:	b25a      	sxtb	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	b25b      	sxtb	r3, r3
 80056be:	4313      	orrs	r3, r2
 80056c0:	b25b      	sxtb	r3, r3
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	e001      	b.n	80056ca <put_fat+0xa8>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	0a5b      	lsrs	r3, r3, #9
 80056e0:	4413      	add	r3, r2
 80056e2:	4619      	mov	r1, r3
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f7ff fde6 	bl	80052b6 <move_window>
 80056ea:	4603      	mov	r3, r0
 80056ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80056ee:	7ffb      	ldrb	r3, [r7, #31]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f040 809a 	bne.w	800582a <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <put_fat+0xf2>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	091b      	lsrs	r3, r3, #4
 8005710:	b2db      	uxtb	r3, r3
 8005712:	e00e      	b.n	8005732 <put_fat+0x110>
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	b25b      	sxtb	r3, r3
 800571a:	f023 030f 	bic.w	r3, r3, #15
 800571e:	b25a      	sxtb	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	0a1b      	lsrs	r3, r3, #8
 8005724:	b25b      	sxtb	r3, r3
 8005726:	f003 030f 	and.w	r3, r3, #15
 800572a:	b25b      	sxtb	r3, r3
 800572c:	4313      	orrs	r3, r2
 800572e:	b25b      	sxtb	r3, r3
 8005730:	b2db      	uxtb	r3, r3
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800573e:	e079      	b.n	8005834 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	0a1b      	lsrs	r3, r3, #8
 800574a:	4413      	add	r3, r2
 800574c:	4619      	mov	r1, r3
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f7ff fdb1 	bl	80052b6 <move_window>
 8005754:	4603      	mov	r3, r0
 8005756:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005758:	7ffb      	ldrb	r3, [r7, #31]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d167      	bne.n	800582e <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	005b      	lsls	r3, r3, #1
 8005762:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	4413      	add	r3, r2
 800576a:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	b2da      	uxtb	r2, r3
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	701a      	strb	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	b29b      	uxth	r3, r3
 8005778:	0a1b      	lsrs	r3, r3, #8
 800577a:	b29a      	uxth	r2, r3
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	3301      	adds	r3, #1
 8005780:	b2d2      	uxtb	r2, r2
 8005782:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800578c:	e052      	b.n	8005834 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	09db      	lsrs	r3, r3, #7
 8005798:	4413      	add	r3, r2
 800579a:	4619      	mov	r1, r3
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f7ff fd8a 	bl	80052b6 <move_window>
 80057a2:	4603      	mov	r3, r0
 80057a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80057a6:	7ffb      	ldrb	r3, [r7, #31]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d142      	bne.n	8005832 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4413      	add	r3, r2
 80057b8:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	3303      	adds	r3, #3
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	061a      	lsls	r2, r3, #24
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	3302      	adds	r3, #2
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	041b      	lsls	r3, r3, #16
 80057ca:	4313      	orrs	r3, r2
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	3201      	adds	r2, #1
 80057d0:	7812      	ldrb	r2, [r2, #0]
 80057d2:	0212      	lsls	r2, r2, #8
 80057d4:	4313      	orrs	r3, r2
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	7812      	ldrb	r2, [r2, #0]
 80057da:	4313      	orrs	r3, r2
 80057dc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	701a      	strb	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	0a1b      	lsrs	r3, r3, #8
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	3301      	adds	r3, #1
 80057fa:	b2d2      	uxtb	r2, r2
 80057fc:	701a      	strb	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	0c1a      	lsrs	r2, r3, #16
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	3302      	adds	r3, #2
 8005806:	b2d2      	uxtb	r2, r2
 8005808:	701a      	strb	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	0e1a      	lsrs	r2, r3, #24
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	3303      	adds	r3, #3
 8005812:	b2d2      	uxtb	r2, r2
 8005814:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800581e:	e009      	b.n	8005834 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8005820:	2302      	movs	r3, #2
 8005822:	77fb      	strb	r3, [r7, #31]
 8005824:	e006      	b.n	8005834 <put_fat+0x212>
			if (res != FR_OK) break;
 8005826:	bf00      	nop
 8005828:	e004      	b.n	8005834 <put_fat+0x212>
			if (res != FR_OK) break;
 800582a:	bf00      	nop
 800582c:	e002      	b.n	8005834 <put_fat+0x212>
			if (res != FR_OK) break;
 800582e:	bf00      	nop
 8005830:	e000      	b.n	8005834 <put_fat+0x212>
			if (res != FR_OK) break;
 8005832:	bf00      	nop
		}
	}

	return res;
 8005834:	7ffb      	ldrb	r3, [r7, #31]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3720      	adds	r7, #32
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b084      	sub	sp, #16
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d905      	bls.n	800585a <remove_chain+0x1c>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	429a      	cmp	r2, r3
 8005858:	d302      	bcc.n	8005860 <remove_chain+0x22>
		res = FR_INT_ERR;
 800585a:	2302      	movs	r3, #2
 800585c:	73fb      	strb	r3, [r7, #15]
 800585e:	e043      	b.n	80058e8 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005864:	e036      	b.n	80058d4 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005866:	6839      	ldr	r1, [r7, #0]
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7ff fe20 	bl	80054ae <get_fat>
 800586e:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d035      	beq.n	80058e2 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d102      	bne.n	8005882 <remove_chain+0x44>
 800587c:	2302      	movs	r3, #2
 800587e:	73fb      	strb	r3, [r7, #15]
 8005880:	e032      	b.n	80058e8 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005888:	d102      	bne.n	8005890 <remove_chain+0x52>
 800588a:	2301      	movs	r3, #1
 800588c:	73fb      	strb	r3, [r7, #15]
 800588e:	e02b      	b.n	80058e8 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005890:	2200      	movs	r2, #0
 8005892:	6839      	ldr	r1, [r7, #0]
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7ff fec4 	bl	8005622 <put_fat>
 800589a:	4603      	mov	r3, r0
 800589c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800589e:	7bfb      	ldrb	r3, [r7, #15]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d120      	bne.n	80058e6 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80058aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ae:	d00f      	beq.n	80058d0 <remove_chain+0x92>
				fs->free_clust++;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80058c4:	f043 0301 	orr.w	r3, r3, #1
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d3c2      	bcc.n	8005866 <remove_chain+0x28>
 80058e0:	e002      	b.n	80058e8 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 80058e2:	bf00      	nop
 80058e4:	e000      	b.n	80058e8 <remove_chain+0xaa>
			if (res != FR_OK) break;
 80058e6:	bf00      	nop
		}
	}

	return res;
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b086      	sub	sp, #24
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10f      	bne.n	8005922 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005908:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d005      	beq.n	800591c <create_chain+0x2a>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	429a      	cmp	r2, r3
 800591a:	d31c      	bcc.n	8005956 <create_chain+0x64>
 800591c:	2301      	movs	r3, #1
 800591e:	613b      	str	r3, [r7, #16]
 8005920:	e019      	b.n	8005956 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005922:	6839      	ldr	r1, [r7, #0]
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7ff fdc2 	bl	80054ae <get_fat>
 800592a:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d801      	bhi.n	8005936 <create_chain+0x44>
 8005932:	2301      	movs	r3, #1
 8005934:	e076      	b.n	8005a24 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593c:	d101      	bne.n	8005942 <create_chain+0x50>
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	e070      	b.n	8005a24 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	429a      	cmp	r2, r3
 800594c:	d201      	bcs.n	8005952 <create_chain+0x60>
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	e068      	b.n	8005a24 <create_chain+0x132>
		scl = clst;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	3301      	adds	r3, #1
 800595e:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	429a      	cmp	r2, r3
 800596a:	d307      	bcc.n	800597c <create_chain+0x8a>
			ncl = 2;
 800596c:	2302      	movs	r3, #2
 800596e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	429a      	cmp	r2, r3
 8005976:	d901      	bls.n	800597c <create_chain+0x8a>
 8005978:	2300      	movs	r3, #0
 800597a:	e053      	b.n	8005a24 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800597c:	6979      	ldr	r1, [r7, #20]
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7ff fd95 	bl	80054ae <get_fat>
 8005984:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00e      	beq.n	80059aa <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005992:	d002      	beq.n	800599a <create_chain+0xa8>
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d101      	bne.n	800599e <create_chain+0xac>
			return cs;
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	e042      	b.n	8005a24 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d1d9      	bne.n	800595a <create_chain+0x68>
 80059a6:	2300      	movs	r3, #0
 80059a8:	e03c      	b.n	8005a24 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 80059aa:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80059ac:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80059b0:	6979      	ldr	r1, [r7, #20]
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f7ff fe35 	bl	8005622 <put_fat>
 80059b8:	4603      	mov	r3, r0
 80059ba:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80059bc:	7bfb      	ldrb	r3, [r7, #15]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d109      	bne.n	80059d6 <create_chain+0xe4>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d006      	beq.n	80059d6 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	6839      	ldr	r1, [r7, #0]
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7ff fe28 	bl	8005622 <put_fat>
 80059d2:	4603      	mov	r3, r0
 80059d4:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80059d6:	7bfb      	ldrb	r3, [r7, #15]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d11a      	bne.n	8005a12 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80059ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ee:	d018      	beq.n	8005a22 <create_chain+0x130>
			fs->free_clust--;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80059f6:	1e5a      	subs	r2, r3, #1
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8005a04:	f043 0301 	orr.w	r3, r3, #1
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8005a10:	e007      	b.n	8005a22 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d102      	bne.n	8005a1e <create_chain+0x12c>
 8005a18:	f04f 33ff 	mov.w	r3, #4294967295
 8005a1c:	e000      	b.n	8005a20 <create_chain+0x12e>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8005a22:	697b      	ldr	r3, [r7, #20]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	0a5b      	lsrs	r3, r3, #9
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8005a4a:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005a4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a52:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	1d1a      	adds	r2, r3, #4
 8005a58:	613a      	str	r2, [r7, #16]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <clmt_clust+0x3c>
 8005a64:	2300      	movs	r3, #0
 8005a66:	e010      	b.n	8005a8a <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d307      	bcc.n	8005a80 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005a7e:	e7e9      	b.n	8005a54 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8005a80:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	4413      	add	r3, r2
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	371c      	adds	r7, #28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc80      	pop	{r7}
 8005a92:	4770      	bx	lr

08005a94 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005aae:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d007      	beq.n	8005ac6 <dir_sdi+0x32>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005abc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d301      	bcc.n	8005aca <dir_sdi+0x36>
		return FR_INT_ERR;
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	e074      	b.n	8005bb4 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10c      	bne.n	8005aea <dir_sdi+0x56>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ad6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d105      	bne.n	8005aea <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ae4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005ae8:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d111      	bne.n	8005b14 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005af6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005afa:	461a      	mov	r2, r3
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d301      	bcc.n	8005b06 <dir_sdi+0x72>
			return FR_INT_ERR;
 8005b02:	2302      	movs	r3, #2
 8005b04:	e056      	b.n	8005bb4 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b0c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005b10:	613b      	str	r3, [r7, #16]
 8005b12:	e032      	b.n	8005b7a <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b1a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005b1e:	011b      	lsls	r3, r3, #4
 8005b20:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8005b22:	e01e      	b.n	8005b62 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b2a:	6979      	ldr	r1, [r7, #20]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7ff fcbe 	bl	80054ae <get_fat>
 8005b32:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3a:	d101      	bne.n	8005b40 <dir_sdi+0xac>
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e039      	b.n	8005bb4 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d907      	bls.n	8005b56 <dir_sdi+0xc2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d301      	bcc.n	8005b5a <dir_sdi+0xc6>
				return FR_INT_ERR;
 8005b56:	2302      	movs	r3, #2
 8005b58:	e02c      	b.n	8005bb4 <dir_sdi+0x120>
			idx -= ic;
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d2dc      	bcs.n	8005b24 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b70:	6979      	ldr	r1, [r7, #20]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7ff fc7a 	bl	800546c <clust2sect>
 8005b78:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <dir_sdi+0xf8>
 8005b88:	2302      	movs	r3, #2
 8005b8a:	e013      	b.n	8005bb4 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	091a      	lsrs	r2, r3, #4
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	441a      	add	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	f003 030f 	and.w	r3, r3, #15
 8005ba8:	015b      	lsls	r3, r3, #5
 8005baa:	441a      	add	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3718      	adds	r7, #24
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005bbc:	b590      	push	{r4, r7, lr}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8005bcc:	3301      	adds	r3, #1
 8005bce:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d004      	beq.n	8005be2 <dir_next+0x26>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <dir_next+0x2a>
		return FR_NO_FILE;
 8005be2:	2304      	movs	r3, #4
 8005be4:	e0dd      	b.n	8005da2 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f003 030f 	and.w	r3, r3, #15
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f040 80c6 	bne.w	8005d7e <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005bf8:	1c5a      	adds	r2, r3, #1
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10b      	bne.n	8005c22 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c10:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005c14:	461a      	mov	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	f0c0 80b0 	bcc.w	8005d7e <dir_next+0x1c2>
				return FR_NO_FILE;
 8005c1e:	2304      	movs	r3, #4
 8005c20:	e0bf      	b.n	8005da2 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	091b      	lsrs	r3, r3, #4
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8005c2c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005c30:	3a01      	subs	r2, #1
 8005c32:	4013      	ands	r3, r2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f040 80a2 	bne.w	8005d7e <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005c46:	4619      	mov	r1, r3
 8005c48:	4610      	mov	r0, r2
 8005c4a:	f7ff fc30 	bl	80054ae <get_fat>
 8005c4e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d801      	bhi.n	8005c5a <dir_next+0x9e>
 8005c56:	2302      	movs	r3, #2
 8005c58:	e0a3      	b.n	8005da2 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c60:	d101      	bne.n	8005c66 <dir_next+0xaa>
 8005c62:	2301      	movs	r3, #1
 8005c64:	e09d      	b.n	8005da2 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d374      	bcc.n	8005d60 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <dir_next+0xc4>
 8005c7c:	2304      	movs	r3, #4
 8005c7e:	e090      	b.n	8005da2 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	4610      	mov	r0, r2
 8005c90:	f7ff fe2f 	bl	80058f2 <create_chain>
 8005c94:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <dir_next+0xe4>
 8005c9c:	2307      	movs	r3, #7
 8005c9e:	e080      	b.n	8005da2 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d101      	bne.n	8005caa <dir_next+0xee>
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	e07b      	b.n	8005da2 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb0:	d101      	bne.n	8005cb6 <dir_next+0xfa>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e075      	b.n	8005da2 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7ff fab1 	bl	8005224 <sync_window>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <dir_next+0x110>
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e06a      	b.n	8005da2 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7ff f895 	bl	8004e08 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8005cea:	6979      	ldr	r1, [r7, #20]
 8005cec:	4610      	mov	r0, r2
 8005cee:	f7ff fbbd 	bl	800546c <clust2sect>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	613b      	str	r3, [r7, #16]
 8005cfc:	e01b      	b.n	8005d36 <dir_next+0x17a>
						dp->fs->wflag = 1;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7ff fa87 	bl	8005224 <sync_window>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <dir_next+0x164>
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e040      	b.n	8005da2 <dir_next+0x1e6>
						dp->fs->winsect++;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d26:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005d2a:	3201      	adds	r2, #1
 8005d2c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	3301      	adds	r3, #1
 8005d34:	613b      	str	r3, [r7, #16]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d3c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005d40:	461a      	mov	r2, r3
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d3da      	bcc.n	8005cfe <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d4e:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	1a8a      	subs	r2, r1, r2
 8005d5c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d6e:	6979      	ldr	r1, [r7, #20]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7ff fb7b 	bl	800546c <clust2sect>
 8005d76:	4602      	mov	r2, r0
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d8e:	461a      	mov	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	015b      	lsls	r3, r3, #5
 8005d98:	441a      	add	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	371c      	adds	r7, #28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd90      	pop	{r4, r7, pc}

08005daa <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b084      	sub	sp, #16
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8005db4:	2100      	movs	r1, #0
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7ff fe6c 	bl	8005a94 <dir_sdi>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005dc0:	7bfb      	ldrb	r3, [r7, #15]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d131      	bne.n	8005e2a <dir_alloc+0x80>
		n = 0;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4610      	mov	r0, r2
 8005dda:	f7ff fa6c 	bl	80052b6 <move_window>
 8005dde:	4603      	mov	r3, r0
 8005de0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d11f      	bne.n	8005e28 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	2be5      	cmp	r3, #229	; 0xe5
 8005df2:	d005      	beq.n	8005e00 <dir_alloc+0x56>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d107      	bne.n	8005e10 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	3301      	adds	r3, #1
 8005e04:	60bb      	str	r3, [r7, #8]
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d102      	bne.n	8005e14 <dir_alloc+0x6a>
 8005e0e:	e00c      	b.n	8005e2a <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005e10:	2300      	movs	r3, #0
 8005e12:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8005e14:	2101      	movs	r1, #1
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7ff fed0 	bl	8005bbc <dir_next>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d0d1      	beq.n	8005dca <dir_alloc+0x20>
 8005e26:	e000      	b.n	8005e2a <dir_alloc+0x80>
			if (res != FR_OK) break;
 8005e28:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005e2a:	7bfb      	ldrb	r3, [r7, #15]
 8005e2c:	2b04      	cmp	r3, #4
 8005e2e:	d101      	bne.n	8005e34 <dir_alloc+0x8a>
 8005e30:	2307      	movs	r3, #7
 8005e32:	73fb      	strb	r3, [r7, #15]
	return res;
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b085      	sub	sp, #20
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	331b      	adds	r3, #27
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	021b      	lsls	r3, r3, #8
 8005e50:	b21a      	sxth	r2, r3
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	331a      	adds	r3, #26
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	b21b      	sxth	r3, r3
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	b21b      	sxth	r3, r3
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005e68:	2b03      	cmp	r3, #3
 8005e6a:	d10f      	bne.n	8005e8c <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	3315      	adds	r3, #21
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	021b      	lsls	r3, r3, #8
 8005e74:	b21a      	sxth	r2, r3
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	3314      	adds	r3, #20
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	b21b      	sxth	r3, r3
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	b21b      	sxth	r3, r3
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	041b      	lsls	r3, r3, #16
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]

	return cl;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr

08005e98 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	331a      	adds	r3, #26
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	b2d2      	uxtb	r2, r2
 8005eaa:	701a      	strb	r2, [r3, #0]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	0a1b      	lsrs	r3, r3, #8
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	331b      	adds	r3, #27
 8005eb8:	b2d2      	uxtb	r2, r2
 8005eba:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	0c1a      	lsrs	r2, r3, #16
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3314      	adds	r3, #20
 8005ec4:	b2d2      	uxtb	r2, r2
 8005ec6:	701a      	strb	r2, [r3, #0]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	0c1b      	lsrs	r3, r3, #16
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	0a1b      	lsrs	r3, r3, #8
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	3315      	adds	r3, #21
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	701a      	strb	r2, [r3, #0]
}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bc80      	pop	{r7}
 8005ee2:	4770      	bx	lr

08005ee4 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ef6:	1e5a      	subs	r2, r3, #1
 8005ef8:	4613      	mov	r3, r2
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	4413      	add	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8005f04:	2300      	movs	r3, #0
 8005f06:	613b      	str	r3, [r7, #16]
 8005f08:	2301      	movs	r3, #1
 8005f0a:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8005f0c:	4a2b      	ldr	r2, [pc, #172]	; (8005fbc <cmp_lfn+0xd8>)
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	4413      	add	r3, r2
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	3301      	adds	r3, #1
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	4413      	add	r3, r2
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	021b      	lsls	r3, r3, #8
 8005f1e:	b21a      	sxth	r2, r3
 8005f20:	4926      	ldr	r1, [pc, #152]	; (8005fbc <cmp_lfn+0xd8>)
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	440b      	add	r3, r1
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	4619      	mov	r1, r3
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	440b      	add	r3, r1
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	b21b      	sxth	r3, r3
 8005f32:	4313      	orrs	r3, r2
 8005f34:	b21b      	sxth	r3, r3
 8005f36:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8005f38:	89fb      	ldrh	r3, [r7, #14]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d019      	beq.n	8005f72 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8005f3e:	89bb      	ldrh	r3, [r7, #12]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f001 ff61 	bl	8007e08 <ff_wtoupper>
 8005f46:	4603      	mov	r3, r0
 8005f48:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	2bfe      	cmp	r3, #254	; 0xfe
 8005f4e:	d80e      	bhi.n	8005f6e <cmp_lfn+0x8a>
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	617a      	str	r2, [r7, #20]
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f001 ff52 	bl	8007e08 <ff_wtoupper>
 8005f64:	4603      	mov	r3, r0
 8005f66:	461a      	mov	r2, r3
 8005f68:	89fb      	ldrh	r3, [r7, #14]
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d008      	beq.n	8005f80 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8005f6e:	2300      	movs	r3, #0
 8005f70:	e01f      	b.n	8005fb2 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8005f72:	89bb      	ldrh	r3, [r7, #12]
 8005f74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d001      	beq.n	8005f80 <cmp_lfn+0x9c>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	e018      	b.n	8005fb2 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	3301      	adds	r3, #1
 8005f84:	613b      	str	r3, [r7, #16]
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	2b0c      	cmp	r3, #12
 8005f8a:	d9bf      	bls.n	8005f0c <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00b      	beq.n	8005fb0 <cmp_lfn+0xcc>
 8005f98:	89fb      	ldrh	r3, [r7, #14]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d008      	beq.n	8005fb0 <cmp_lfn+0xcc>
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <cmp_lfn+0xcc>
		return 0;
 8005fac:	2300      	movs	r3, #0
 8005fae:	e000      	b.n	8005fb2 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8005fb0:	2301      	movs	r3, #1
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3718      	adds	r7, #24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	0800ce78 	.word	0x0800ce78

08005fc0 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b089      	sub	sp, #36	; 0x24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	4611      	mov	r1, r2
 8005fcc:	461a      	mov	r2, r3
 8005fce:	460b      	mov	r3, r1
 8005fd0:	71fb      	strb	r3, [r7, #7]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	330d      	adds	r3, #13
 8005fda:	79ba      	ldrb	r2, [r7, #6]
 8005fdc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	330b      	adds	r3, #11
 8005fe2:	220f      	movs	r2, #15
 8005fe4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	330c      	adds	r3, #12
 8005fea:	2200      	movs	r2, #0
 8005fec:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	331a      	adds	r3, #26
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	701a      	strb	r2, [r3, #0]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	331b      	adds	r3, #27
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8005ffe:	79fb      	ldrb	r3, [r7, #7]
 8006000:	1e5a      	subs	r2, r3, #1
 8006002:	4613      	mov	r3, r2
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	4413      	add	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800600e:	2300      	movs	r3, #0
 8006010:	82fb      	strh	r3, [r7, #22]
 8006012:	2300      	movs	r3, #0
 8006014:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8006016:	8afb      	ldrh	r3, [r7, #22]
 8006018:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800601c:	4293      	cmp	r3, r2
 800601e:	d007      	beq.n	8006030 <fit_lfn+0x70>
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	61fa      	str	r2, [r7, #28]
 8006026:	005b      	lsls	r3, r3, #1
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	4413      	add	r3, r2
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8006030:	4a1c      	ldr	r2, [pc, #112]	; (80060a4 <fit_lfn+0xe4>)
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	4413      	add	r3, r2
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	461a      	mov	r2, r3
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	4413      	add	r3, r2
 800603e:	8afa      	ldrh	r2, [r7, #22]
 8006040:	b2d2      	uxtb	r2, r2
 8006042:	701a      	strb	r2, [r3, #0]
 8006044:	8afb      	ldrh	r3, [r7, #22]
 8006046:	0a1b      	lsrs	r3, r3, #8
 8006048:	b299      	uxth	r1, r3
 800604a:	4a16      	ldr	r2, [pc, #88]	; (80060a4 <fit_lfn+0xe4>)
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	4413      	add	r3, r2
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	3301      	adds	r3, #1
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	4413      	add	r3, r2
 8006058:	b2ca      	uxtb	r2, r1
 800605a:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800605c:	8afb      	ldrh	r3, [r7, #22]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d102      	bne.n	8006068 <fit_lfn+0xa8>
 8006062:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006066:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	3301      	adds	r3, #1
 800606c:	61bb      	str	r3, [r7, #24]
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	2b0c      	cmp	r3, #12
 8006072:	d9d0      	bls.n	8006016 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8006074:	8afb      	ldrh	r3, [r7, #22]
 8006076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800607a:	4293      	cmp	r3, r2
 800607c:	d006      	beq.n	800608c <fit_lfn+0xcc>
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	005b      	lsls	r3, r3, #1
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	4413      	add	r3, r2
 8006086:	881b      	ldrh	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d103      	bne.n	8006094 <fit_lfn+0xd4>
 800608c:	79fb      	ldrb	r3, [r7, #7]
 800608e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006092:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	79fa      	ldrb	r2, [r7, #7]
 8006098:	701a      	strb	r2, [r3, #0]
}
 800609a:	bf00      	nop
 800609c:	3724      	adds	r7, #36	; 0x24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bc80      	pop	{r7}
 80060a2:	4770      	bx	lr
 80060a4:	0800ce78 	.word	0x0800ce78

080060a8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b08c      	sub	sp, #48	; 0x30
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80060b6:	220b      	movs	r2, #11
 80060b8:	68b9      	ldr	r1, [r7, #8]
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f7fe fe86 	bl	8004dcc <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	2b05      	cmp	r3, #5
 80060c4:	d92b      	bls.n	800611e <gen_numname+0x76>
		sr = seq;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80060ca:	e022      	b.n	8006112 <gen_numname+0x6a>
			wc = *lfn++;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	1c9a      	adds	r2, r3, #2
 80060d0:	607a      	str	r2, [r7, #4]
 80060d2:	881b      	ldrh	r3, [r3, #0]
 80060d4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80060d6:	2300      	movs	r3, #0
 80060d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80060da:	e017      	b.n	800610c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	005a      	lsls	r2, r3, #1
 80060e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	4413      	add	r3, r2
 80060e8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80060ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80060ec:	085b      	lsrs	r3, r3, #1
 80060ee:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d005      	beq.n	8006106 <gen_numname+0x5e>
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006100:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006104:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006108:	3301      	adds	r3, #1
 800610a:	62bb      	str	r3, [r7, #40]	; 0x28
 800610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610e:	2b0f      	cmp	r3, #15
 8006110:	d9e4      	bls.n	80060dc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1d8      	bne.n	80060cc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800611e:	2307      	movs	r3, #7
 8006120:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	b2db      	uxtb	r3, r3
 8006126:	f003 030f 	and.w	r3, r3, #15
 800612a:	b2db      	uxtb	r3, r3
 800612c:	3330      	adds	r3, #48	; 0x30
 800612e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006132:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006136:	2b39      	cmp	r3, #57	; 0x39
 8006138:	d904      	bls.n	8006144 <gen_numname+0x9c>
 800613a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800613e:	3307      	adds	r3, #7
 8006140:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006146:	1e5a      	subs	r2, r3, #1
 8006148:	62ba      	str	r2, [r7, #40]	; 0x28
 800614a:	3330      	adds	r3, #48	; 0x30
 800614c:	443b      	add	r3, r7
 800614e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006152:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	091b      	lsrs	r3, r3, #4
 800615a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1df      	bne.n	8006122 <gen_numname+0x7a>
	ns[i] = '~';
 8006162:	f107 0214 	add.w	r2, r7, #20
 8006166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006168:	4413      	add	r3, r2
 800616a:	227e      	movs	r2, #126	; 0x7e
 800616c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800616e:	2300      	movs	r3, #0
 8006170:	627b      	str	r3, [r7, #36]	; 0x24
 8006172:	e002      	b.n	800617a <gen_numname+0xd2>
 8006174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006176:	3301      	adds	r3, #1
 8006178:	627b      	str	r3, [r7, #36]	; 0x24
 800617a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617e:	429a      	cmp	r2, r3
 8006180:	d205      	bcs.n	800618e <gen_numname+0xe6>
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	4413      	add	r3, r2
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	2b20      	cmp	r3, #32
 800618c:	d1f2      	bne.n	8006174 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800618e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006190:	2b07      	cmp	r3, #7
 8006192:	d807      	bhi.n	80061a4 <gen_numname+0xfc>
 8006194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	62ba      	str	r2, [r7, #40]	; 0x28
 800619a:	3330      	adds	r3, #48	; 0x30
 800619c:	443b      	add	r3, r7
 800619e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80061a2:	e000      	b.n	80061a6 <gen_numname+0xfe>
 80061a4:	2120      	movs	r1, #32
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	1c5a      	adds	r2, r3, #1
 80061aa:	627a      	str	r2, [r7, #36]	; 0x24
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	4413      	add	r3, r2
 80061b0:	460a      	mov	r2, r1
 80061b2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	2b07      	cmp	r3, #7
 80061b8:	d9e9      	bls.n	800618e <gen_numname+0xe6>
}
 80061ba:	bf00      	nop
 80061bc:	bf00      	nop
 80061be:	3730      	adds	r7, #48	; 0x30
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80061cc:	2300      	movs	r3, #0
 80061ce:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80061d0:	230b      	movs	r3, #11
 80061d2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	0852      	lsrs	r2, r2, #1
 80061da:	01db      	lsls	r3, r3, #7
 80061dc:	4313      	orrs	r3, r2
 80061de:	b2da      	uxtb	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	1c59      	adds	r1, r3, #1
 80061e4:	6079      	str	r1, [r7, #4]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	4413      	add	r3, r2
 80061ea:	73fb      	strb	r3, [r7, #15]
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	3b01      	subs	r3, #1
 80061f0:	60bb      	str	r3, [r7, #8]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1ed      	bne.n	80061d4 <sum_sfn+0x10>
	return sum;
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	bc80      	pop	{r7}
 8006202:	4770      	bx	lr

08006204 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800620c:	2100      	movs	r1, #0
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7ff fc40 	bl	8005a94 <dir_sdi>
 8006214:	4603      	mov	r3, r0
 8006216:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006218:	7dfb      	ldrb	r3, [r7, #23]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <dir_find+0x1e>
 800621e:	7dfb      	ldrb	r3, [r7, #23]
 8006220:	e0ac      	b.n	800637c <dir_find+0x178>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006222:	23ff      	movs	r3, #255	; 0xff
 8006224:	753b      	strb	r3, [r7, #20]
 8006226:	7d3b      	ldrb	r3, [r7, #20]
 8006228:	757b      	strb	r3, [r7, #21]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006230:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006240:	4619      	mov	r1, r3
 8006242:	4610      	mov	r0, r2
 8006244:	f7ff f837 	bl	80052b6 <move_window>
 8006248:	4603      	mov	r3, r0
 800624a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800624c:	7dfb      	ldrb	r3, [r7, #23]
 800624e:	2b00      	cmp	r3, #0
 8006250:	f040 808e 	bne.w	8006370 <dir_find+0x16c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800625a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006262:	7dbb      	ldrb	r3, [r7, #22]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d102      	bne.n	800626e <dir_find+0x6a>
 8006268:	2304      	movs	r3, #4
 800626a:	75fb      	strb	r3, [r7, #23]
 800626c:	e085      	b.n	800637a <dir_find+0x176>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	330b      	adds	r3, #11
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006278:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800627a:	7dbb      	ldrb	r3, [r7, #22]
 800627c:	2be5      	cmp	r3, #229	; 0xe5
 800627e:	d007      	beq.n	8006290 <dir_find+0x8c>
 8006280:	7bfb      	ldrb	r3, [r7, #15]
 8006282:	f003 0308 	and.w	r3, r3, #8
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00a      	beq.n	80062a0 <dir_find+0x9c>
 800628a:	7bfb      	ldrb	r3, [r7, #15]
 800628c:	2b0f      	cmp	r3, #15
 800628e:	d007      	beq.n	80062a0 <dir_find+0x9c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006290:	23ff      	movs	r3, #255	; 0xff
 8006292:	757b      	strb	r3, [r7, #21]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800629a:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
 800629e:	e05c      	b.n	800635a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
 80062a2:	2b0f      	cmp	r3, #15
 80062a4:	d133      	bne.n	800630e <dir_find+0x10a>
				if (dp->lfn) {
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d054      	beq.n	800635a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80062b0:	7dbb      	ldrb	r3, [r7, #22]
 80062b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00e      	beq.n	80062d8 <dir_find+0xd4>
						sum = dir[LDIR_Chksum];
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	7b5b      	ldrb	r3, [r3, #13]
 80062be:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80062c0:	7dbb      	ldrb	r3, [r7, #22]
 80062c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062c6:	75bb      	strb	r3, [r7, #22]
 80062c8:	7dbb      	ldrb	r3, [r7, #22]
 80062ca:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80062d8:	7dba      	ldrb	r2, [r7, #22]
 80062da:	7d7b      	ldrb	r3, [r7, #21]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d113      	bne.n	8006308 <dir_find+0x104>
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	330d      	adds	r3, #13
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	7d3a      	ldrb	r2, [r7, #20]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d10d      	bne.n	8006308 <dir_find+0x104>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80062f2:	6939      	ldr	r1, [r7, #16]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7ff fdf5 	bl	8005ee4 <cmp_lfn>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <dir_find+0x104>
 8006300:	7d7b      	ldrb	r3, [r7, #21]
 8006302:	3b01      	subs	r3, #1
 8006304:	b2db      	uxtb	r3, r3
 8006306:	e000      	b.n	800630a <dir_find+0x106>
 8006308:	23ff      	movs	r3, #255	; 0xff
 800630a:	757b      	strb	r3, [r7, #21]
 800630c:	e025      	b.n	800635a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800630e:	7d7b      	ldrb	r3, [r7, #21]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d107      	bne.n	8006324 <dir_find+0x120>
 8006314:	6938      	ldr	r0, [r7, #16]
 8006316:	f7ff ff55 	bl	80061c4 <sum_sfn>
 800631a:	4603      	mov	r3, r0
 800631c:	461a      	mov	r2, r3
 800631e:	7d3b      	ldrb	r3, [r7, #20]
 8006320:	4293      	cmp	r3, r2
 8006322:	d027      	beq.n	8006374 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800632a:	330b      	adds	r3, #11
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10a      	bne.n	800634c <dir_find+0x148>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800633c:	220b      	movs	r2, #11
 800633e:	4619      	mov	r1, r3
 8006340:	6938      	ldr	r0, [r7, #16]
 8006342:	f7fe fd7b 	bl	8004e3c <mem_cmp>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d015      	beq.n	8006378 <dir_find+0x174>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800634c:	23ff      	movs	r3, #255	; 0xff
 800634e:	757b      	strb	r3, [r7, #21]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006356:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800635a:	2100      	movs	r1, #0
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7ff fc2d 	bl	8005bbc <dir_next>
 8006362:	4603      	mov	r3, r0
 8006364:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006366:	7dfb      	ldrb	r3, [r7, #23]
 8006368:	2b00      	cmp	r3, #0
 800636a:	f43f af63 	beq.w	8006234 <dir_find+0x30>
 800636e:	e004      	b.n	800637a <dir_find+0x176>
		if (res != FR_OK) break;
 8006370:	bf00      	nop
 8006372:	e002      	b.n	800637a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8006374:	bf00      	nop
 8006376:	e000      	b.n	800637a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006378:	bf00      	nop

	return res;
 800637a:	7dfb      	ldrb	r3, [r7, #23]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3718      	adds	r7, #24
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b08c      	sub	sp, #48	; 0x30
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006392:	623b      	str	r3, [r7, #32]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800639a:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800639c:	f107 030c 	add.w	r3, r7, #12
 80063a0:	220c      	movs	r2, #12
 80063a2:	6a39      	ldr	r1, [r7, #32]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7fe fd11 	bl	8004dcc <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80063aa:	7dfb      	ldrb	r3, [r7, #23]
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d037      	beq.n	8006424 <dir_register+0xa0>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80063b4:	6a3b      	ldr	r3, [r7, #32]
 80063b6:	330b      	adds	r3, #11
 80063b8:	2200      	movs	r2, #0
 80063ba:	701a      	strb	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		for (n = 1; n < 100; n++) {
 80063c4:	2301      	movs	r3, #1
 80063c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80063c8:	e013      	b.n	80063f2 <dir_register+0x6e>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 80063ca:	f107 010c 	add.w	r1, r7, #12
 80063ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d0:	69fa      	ldr	r2, [r7, #28]
 80063d2:	6a38      	ldr	r0, [r7, #32]
 80063d4:	f7ff fe68 	bl	80060a8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f7ff ff13 	bl	8006204 <dir_find>
 80063de:	4603      	mov	r3, r0
 80063e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80063e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d106      	bne.n	80063fa <dir_register+0x76>
		for (n = 1; n < 100; n++) {
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ee:	3301      	adds	r3, #1
 80063f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80063f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f4:	2b63      	cmp	r3, #99	; 0x63
 80063f6:	d9e8      	bls.n	80063ca <dir_register+0x46>
 80063f8:	e000      	b.n	80063fc <dir_register+0x78>
			if (res != FR_OK) break;
 80063fa:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80063fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fe:	2b64      	cmp	r3, #100	; 0x64
 8006400:	d101      	bne.n	8006406 <dir_register+0x82>
 8006402:	2307      	movs	r3, #7
 8006404:	e0c5      	b.n	8006592 <dir_register+0x20e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006406:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800640a:	2b04      	cmp	r3, #4
 800640c:	d002      	beq.n	8006414 <dir_register+0x90>
 800640e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006412:	e0be      	b.n	8006592 <dir_register+0x20e>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	330b      	adds	r3, #11
 8006418:	7dfa      	ldrb	r2, [r7, #23]
 800641a:	701a      	strb	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8006424:	7dfb      	ldrb	r3, [r7, #23]
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d014      	beq.n	8006458 <dir_register+0xd4>
		for (n = 0; lfn[n]; n++) ;
 800642e:	2300      	movs	r3, #0
 8006430:	62bb      	str	r3, [r7, #40]	; 0x28
 8006432:	e002      	b.n	800643a <dir_register+0xb6>
 8006434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006436:	3301      	adds	r3, #1
 8006438:	62bb      	str	r3, [r7, #40]	; 0x28
 800643a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	69fa      	ldr	r2, [r7, #28]
 8006440:	4413      	add	r3, r2
 8006442:	881b      	ldrh	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1f5      	bne.n	8006434 <dir_register+0xb0>
		nent = (n + 25) / 13;
 8006448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644a:	3319      	adds	r3, #25
 800644c:	4a53      	ldr	r2, [pc, #332]	; (800659c <dir_register+0x218>)
 800644e:	fba2 2303 	umull	r2, r3, r2, r3
 8006452:	089b      	lsrs	r3, r3, #2
 8006454:	627b      	str	r3, [r7, #36]	; 0x24
 8006456:	e001      	b.n	800645c <dir_register+0xd8>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8006458:	2301      	movs	r3, #1
 800645a:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800645c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7ff fca3 	bl	8005daa <dir_alloc>
 8006464:	4603      	mov	r3, r0
 8006466:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800646a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800646e:	2b00      	cmp	r3, #0
 8006470:	d153      	bne.n	800651a <dir_register+0x196>
 8006472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006474:	3b01      	subs	r3, #1
 8006476:	627b      	str	r3, [r7, #36]	; 0x24
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	2b00      	cmp	r3, #0
 800647c:	d04d      	beq.n	800651a <dir_register+0x196>
		res = dir_sdi(dp, dp->index - nent);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8006484:	461a      	mov	r2, r3
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	4619      	mov	r1, r3
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7ff fb01 	bl	8005a94 <dir_sdi>
 8006492:	4603      	mov	r3, r0
 8006494:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006498:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800649c:	2b00      	cmp	r3, #0
 800649e:	d13c      	bne.n	800651a <dir_register+0x196>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7ff fe8c 	bl	80061c4 <sum_sfn>
 80064ac:	4603      	mov	r3, r0
 80064ae:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80064bc:	4619      	mov	r1, r3
 80064be:	4610      	mov	r0, r2
 80064c0:	f7fe fef9 	bl	80052b6 <move_window>
 80064c4:	4603      	mov	r3, r0
 80064c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80064ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d122      	bne.n	8006518 <dir_register+0x194>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	7efb      	ldrb	r3, [r7, #27]
 80064e4:	f7ff fd6c 	bl	8005fc0 <fit_lfn>
				dp->fs->wflag = 1;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = dir_next(dp, 0);	/* Next entry */
 80064f4:	2100      	movs	r1, #0
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7ff fb60 	bl	8005bbc <dir_next>
 80064fc:	4603      	mov	r3, r0
 80064fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006502:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006506:	2b00      	cmp	r3, #0
 8006508:	d107      	bne.n	800651a <dir_register+0x196>
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	3b01      	subs	r3, #1
 800650e:	627b      	str	r3, [r7, #36]	; 0x24
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1cc      	bne.n	80064b0 <dir_register+0x12c>
 8006516:	e000      	b.n	800651a <dir_register+0x196>
				if (res != FR_OK) break;
 8006518:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800651a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800651e:	2b00      	cmp	r3, #0
 8006520:	d135      	bne.n	800658e <dir_register+0x20a>
		res = move_window(dp->fs, dp->sect);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800652e:	4619      	mov	r1, r3
 8006530:	4610      	mov	r0, r2
 8006532:	f7fe fec0 	bl	80052b6 <move_window>
 8006536:	4603      	mov	r3, r0
 8006538:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800653c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006540:	2b00      	cmp	r3, #0
 8006542:	d124      	bne.n	800658e <dir_register+0x20a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800654a:	2220      	movs	r2, #32
 800654c:	2100      	movs	r1, #0
 800654e:	4618      	mov	r0, r3
 8006550:	f7fe fc5a 	bl	8004e08 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006560:	220b      	movs	r2, #11
 8006562:	4619      	mov	r1, r3
 8006564:	f7fe fc32 	bl	8004dcc <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800656e:	330b      	adds	r3, #11
 8006570:	781a      	ldrb	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006578:	330c      	adds	r3, #12
 800657a:	f002 0218 	and.w	r2, r2, #24
 800657e:	b2d2      	uxtb	r2, r2
 8006580:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 800658e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006592:	4618      	mov	r0, r3
 8006594:	3730      	adds	r7, #48	; 0x30
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	4ec4ec4f 	.word	0x4ec4ec4f

080065a0 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08a      	sub	sp, #40	; 0x28
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	613b      	str	r3, [r7, #16]
 80065b0:	e002      	b.n	80065b8 <create_name+0x18>
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	3301      	adds	r3, #1
 80065b6:	613b      	str	r3, [r7, #16]
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	2b2f      	cmp	r3, #47	; 0x2f
 80065be:	d0f8      	beq.n	80065b2 <create_name+0x12>
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	2b5c      	cmp	r3, #92	; 0x5c
 80065c6:	d0f4      	beq.n	80065b2 <create_name+0x12>
	lfn = dp->lfn;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80065ce:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 80065d0:	2300      	movs	r3, #0
 80065d2:	617b      	str	r3, [r7, #20]
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	1c5a      	adds	r2, r3, #1
 80065dc:	61ba      	str	r2, [r7, #24]
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	4413      	add	r3, r2
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80065e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065e8:	2b1f      	cmp	r3, #31
 80065ea:	d92f      	bls.n	800664c <create_name+0xac>
 80065ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065ee:	2b2f      	cmp	r3, #47	; 0x2f
 80065f0:	d02c      	beq.n	800664c <create_name+0xac>
 80065f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065f4:	2b5c      	cmp	r3, #92	; 0x5c
 80065f6:	d029      	beq.n	800664c <create_name+0xac>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	2bfe      	cmp	r3, #254	; 0xfe
 80065fc:	d901      	bls.n	8006602 <create_name+0x62>
			return FR_INVALID_NAME;
 80065fe:	2306      	movs	r3, #6
 8006600:	e182      	b.n	8006908 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006602:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006604:	b2db      	uxtb	r3, r3
 8006606:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006608:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800660a:	2101      	movs	r1, #1
 800660c:	4618      	mov	r0, r3
 800660e:	f001 fbc1 	bl	8007d94 <ff_convert>
 8006612:	4603      	mov	r3, r0
 8006614:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006616:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <create_name+0x80>
 800661c:	2306      	movs	r3, #6
 800661e:	e173      	b.n	8006908 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8006620:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006622:	2b7f      	cmp	r3, #127	; 0x7f
 8006624:	d809      	bhi.n	800663a <create_name+0x9a>
 8006626:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006628:	4619      	mov	r1, r3
 800662a:	488e      	ldr	r0, [pc, #568]	; (8006864 <create_name+0x2c4>)
 800662c:	f7fe fc2c 	bl	8004e88 <chk_chr>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <create_name+0x9a>
			return FR_INVALID_NAME;
 8006636:	2306      	movs	r3, #6
 8006638:	e166      	b.n	8006908 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	1c5a      	adds	r2, r3, #1
 800663e:	617a      	str	r2, [r7, #20]
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	4413      	add	r3, r2
 8006646:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006648:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800664a:	e7c5      	b.n	80065d8 <create_name+0x38>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	441a      	add	r2, r3
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006656:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006658:	2b1f      	cmp	r3, #31
 800665a:	d801      	bhi.n	8006660 <create_name+0xc0>
 800665c:	2304      	movs	r3, #4
 800665e:	e000      	b.n	8006662 <create_name+0xc2>
 8006660:	2300      	movs	r3, #0
 8006662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8006666:	e011      	b.n	800668c <create_name+0xec>
		w = lfn[di - 1];
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800666e:	3b01      	subs	r3, #1
 8006670:	005b      	lsls	r3, r3, #1
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	4413      	add	r3, r2
 8006676:	881b      	ldrh	r3, [r3, #0]
 8006678:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800667a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800667c:	2b20      	cmp	r3, #32
 800667e:	d002      	beq.n	8006686 <create_name+0xe6>
 8006680:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006682:	2b2e      	cmp	r3, #46	; 0x2e
 8006684:	d106      	bne.n	8006694 <create_name+0xf4>
		di--;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	3b01      	subs	r3, #1
 800668a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1ea      	bne.n	8006668 <create_name+0xc8>
 8006692:	e000      	b.n	8006696 <create_name+0xf6>
		if (w != ' ' && w != '.') break;
 8006694:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <create_name+0x100>
 800669c:	2306      	movs	r3, #6
 800669e:	e133      	b.n	8006908 <create_name+0x368>

	lfn[di] = 0;						/* LFN is created */
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	005b      	lsls	r3, r3, #1
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	4413      	add	r3, r2
 80066a8:	2200      	movs	r2, #0
 80066aa:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80066b2:	220b      	movs	r2, #11
 80066b4:	2120      	movs	r1, #32
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7fe fba6 	bl	8004e08 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80066bc:	2300      	movs	r3, #0
 80066be:	61bb      	str	r3, [r7, #24]
 80066c0:	e002      	b.n	80066c8 <create_name+0x128>
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	3301      	adds	r3, #1
 80066c6:	61bb      	str	r3, [r7, #24]
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	005b      	lsls	r3, r3, #1
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	4413      	add	r3, r2
 80066d0:	881b      	ldrh	r3, [r3, #0]
 80066d2:	2b20      	cmp	r3, #32
 80066d4:	d0f5      	beq.n	80066c2 <create_name+0x122>
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	005b      	lsls	r3, r3, #1
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	4413      	add	r3, r2
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	2b2e      	cmp	r3, #46	; 0x2e
 80066e2:	d0ee      	beq.n	80066c2 <create_name+0x122>
	if (si) cf |= NS_LOSS | NS_LFN;
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d009      	beq.n	80066fe <create_name+0x15e>
 80066ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066ee:	f043 0303 	orr.w	r3, r3, #3
 80066f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80066f6:	e002      	b.n	80066fe <create_name+0x15e>
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	617b      	str	r3, [r7, #20]
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d009      	beq.n	8006718 <create_name+0x178>
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800670a:	3b01      	subs	r3, #1
 800670c:	005b      	lsls	r3, r3, #1
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	4413      	add	r3, r2
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	2b2e      	cmp	r3, #46	; 0x2e
 8006716:	d1ef      	bne.n	80066f8 <create_name+0x158>

	b = i = 0; ni = 8;
 8006718:	2300      	movs	r3, #0
 800671a:	623b      	str	r3, [r7, #32]
 800671c:	2300      	movs	r3, #0
 800671e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006722:	2308      	movs	r3, #8
 8006724:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	1c5a      	adds	r2, r3, #1
 800672a:	61ba      	str	r2, [r7, #24]
 800672c:	005b      	lsls	r3, r3, #1
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	4413      	add	r3, r2
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006736:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 8090 	beq.w	800685e <create_name+0x2be>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800673e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006740:	2b20      	cmp	r3, #32
 8006742:	d006      	beq.n	8006752 <create_name+0x1b2>
 8006744:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006746:	2b2e      	cmp	r3, #46	; 0x2e
 8006748:	d10a      	bne.n	8006760 <create_name+0x1c0>
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	429a      	cmp	r2, r3
 8006750:	d006      	beq.n	8006760 <create_name+0x1c0>
			cf |= NS_LOSS | NS_LFN; continue;
 8006752:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006756:	f043 0303 	orr.w	r3, r3, #3
 800675a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800675e:	e07d      	b.n	800685c <create_name+0x2bc>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006760:	6a3a      	ldr	r2, [r7, #32]
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	429a      	cmp	r2, r3
 8006766:	d203      	bcs.n	8006770 <create_name+0x1d0>
 8006768:	69ba      	ldr	r2, [r7, #24]
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	429a      	cmp	r2, r3
 800676e:	d123      	bne.n	80067b8 <create_name+0x218>
			if (ni == 11) {				/* Long extension */
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	2b0b      	cmp	r3, #11
 8006774:	d106      	bne.n	8006784 <create_name+0x1e4>
				cf |= NS_LOSS | NS_LFN; break;
 8006776:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800677a:	f043 0303 	orr.w	r3, r3, #3
 800677e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006782:	e076      	b.n	8006872 <create_name+0x2d2>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	429a      	cmp	r2, r3
 800678a:	d005      	beq.n	8006798 <create_name+0x1f8>
 800678c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006790:	f043 0303 	orr.w	r3, r3, #3
 8006794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006798:	69ba      	ldr	r2, [r7, #24]
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	429a      	cmp	r2, r3
 800679e:	d867      	bhi.n	8006870 <create_name+0x2d0>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	61bb      	str	r3, [r7, #24]
 80067a4:	2308      	movs	r3, #8
 80067a6:	623b      	str	r3, [r7, #32]
 80067a8:	230b      	movs	r3, #11
 80067aa:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80067ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80067b6:	e051      	b.n	800685c <create_name+0x2bc>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80067b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067ba:	2b7f      	cmp	r3, #127	; 0x7f
 80067bc:	d914      	bls.n	80067e8 <create_name+0x248>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80067be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067c0:	2100      	movs	r1, #0
 80067c2:	4618      	mov	r0, r3
 80067c4:	f001 fae6 	bl	8007d94 <ff_convert>
 80067c8:	4603      	mov	r3, r0
 80067ca:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80067cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d004      	beq.n	80067dc <create_name+0x23c>
 80067d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067d4:	3b80      	subs	r3, #128	; 0x80
 80067d6:	4a24      	ldr	r2, [pc, #144]	; (8006868 <create_name+0x2c8>)
 80067d8:	5cd3      	ldrb	r3, [r2, r3]
 80067da:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80067dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067e0:	f043 0302 	orr.w	r3, r3, #2
 80067e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80067e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d007      	beq.n	80067fe <create_name+0x25e>
 80067ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067f0:	4619      	mov	r1, r3
 80067f2:	481e      	ldr	r0, [pc, #120]	; (800686c <create_name+0x2cc>)
 80067f4:	f7fe fb48 	bl	8004e88 <chk_chr>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d008      	beq.n	8006810 <create_name+0x270>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80067fe:	235f      	movs	r3, #95	; 0x5f
 8006800:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006806:	f043 0303 	orr.w	r3, r3, #3
 800680a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800680e:	e01b      	b.n	8006848 <create_name+0x2a8>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006810:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006812:	2b40      	cmp	r3, #64	; 0x40
 8006814:	d909      	bls.n	800682a <create_name+0x28a>
 8006816:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006818:	2b5a      	cmp	r3, #90	; 0x5a
 800681a:	d806      	bhi.n	800682a <create_name+0x28a>
					b |= 2;
 800681c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006820:	f043 0302 	orr.w	r3, r3, #2
 8006824:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006828:	e00e      	b.n	8006848 <create_name+0x2a8>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800682a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800682c:	2b60      	cmp	r3, #96	; 0x60
 800682e:	d90b      	bls.n	8006848 <create_name+0x2a8>
 8006830:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006832:	2b7a      	cmp	r3, #122	; 0x7a
 8006834:	d808      	bhi.n	8006848 <create_name+0x2a8>
						b |= 1; w -= 0x20;
 8006836:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800683a:	f043 0301 	orr.w	r3, r3, #1
 800683e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006842:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006844:	3b20      	subs	r3, #32
 8006846:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800684e:	6a3b      	ldr	r3, [r7, #32]
 8006850:	1c59      	adds	r1, r3, #1
 8006852:	6239      	str	r1, [r7, #32]
 8006854:	4413      	add	r3, r2
 8006856:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006858:	b2d2      	uxtb	r2, r2
 800685a:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800685c:	e763      	b.n	8006726 <create_name+0x186>
		if (!w) break;					/* Break on end of the LFN */
 800685e:	bf00      	nop
 8006860:	e007      	b.n	8006872 <create_name+0x2d2>
 8006862:	bf00      	nop
 8006864:	0800cd98 	.word	0x0800cd98
 8006868:	0800cdf8 	.word	0x0800cdf8
 800686c:	0800cda4 	.word	0x0800cda4
			if (si > di) break;			/* No extension */
 8006870:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	2be5      	cmp	r3, #229	; 0xe5
 800687c:	d104      	bne.n	8006888 <create_name+0x2e8>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006884:	2205      	movs	r2, #5
 8006886:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	2b08      	cmp	r3, #8
 800688c:	d104      	bne.n	8006898 <create_name+0x2f8>
 800688e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8006898:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800689c:	f003 030c 	and.w	r3, r3, #12
 80068a0:	2b0c      	cmp	r3, #12
 80068a2:	d005      	beq.n	80068b0 <create_name+0x310>
 80068a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80068a8:	f003 0303 	and.w	r3, r3, #3
 80068ac:	2b03      	cmp	r3, #3
 80068ae:	d105      	bne.n	80068bc <create_name+0x31c>
		cf |= NS_LFN;
 80068b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068b4:	f043 0302 	orr.w	r3, r3, #2
 80068b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80068bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d117      	bne.n	80068f8 <create_name+0x358>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80068c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80068cc:	f003 0303 	and.w	r3, r3, #3
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d105      	bne.n	80068e0 <create_name+0x340>
 80068d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068d8:	f043 0310 	orr.w	r3, r3, #16
 80068dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80068e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80068e4:	f003 030c 	and.w	r3, r3, #12
 80068e8:	2b04      	cmp	r3, #4
 80068ea:	d105      	bne.n	80068f8 <create_name+0x358>
 80068ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068f0:	f043 0308 	orr.w	r3, r3, #8
 80068f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80068fe:	330b      	adds	r3, #11
 8006900:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006904:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006906:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8006908:	4618      	mov	r0, r3
 800690a:	3728      	adds	r7, #40	; 0x28
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	2b2f      	cmp	r3, #47	; 0x2f
 8006920:	d003      	beq.n	800692a <follow_path+0x1a>
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	2b5c      	cmp	r3, #92	; 0x5c
 8006928:	d102      	bne.n	8006930 <follow_path+0x20>
		path++;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	3301      	adds	r3, #1
 800692e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	2b1f      	cmp	r3, #31
 800693e:	d80a      	bhi.n	8006956 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8006940:	2100      	movs	r1, #0
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7ff f8a6 	bl	8005a94 <dir_sdi>
 8006948:	4603      	mov	r3, r0
 800694a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006954:	e045      	b.n	80069e2 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006956:	463b      	mov	r3, r7
 8006958:	4619      	mov	r1, r3
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7ff fe20 	bl	80065a0 <create_name>
 8006960:	4603      	mov	r3, r0
 8006962:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006964:	7bfb      	ldrb	r3, [r7, #15]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d136      	bne.n	80069d8 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7ff fc4a 	bl	8006204 <dir_find>
 8006970:	4603      	mov	r3, r0
 8006972:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800697a:	7adb      	ldrb	r3, [r3, #11]
 800697c:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800697e:	7bfb      	ldrb	r3, [r7, #15]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00a      	beq.n	800699a <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006984:	7bfb      	ldrb	r3, [r7, #15]
 8006986:	2b04      	cmp	r3, #4
 8006988:	d128      	bne.n	80069dc <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800698a:	7bbb      	ldrb	r3, [r7, #14]
 800698c:	f003 0304 	and.w	r3, r3, #4
 8006990:	2b00      	cmp	r3, #0
 8006992:	d123      	bne.n	80069dc <follow_path+0xcc>
 8006994:	2305      	movs	r3, #5
 8006996:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8006998:	e020      	b.n	80069dc <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800699a:	7bbb      	ldrb	r3, [r7, #14]
 800699c:	f003 0304 	and.w	r3, r3, #4
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d11d      	bne.n	80069e0 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80069aa:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	330b      	adds	r3, #11
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	f003 0310 	and.w	r3, r3, #16
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d102      	bne.n	80069c0 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 80069ba:	2305      	movs	r3, #5
 80069bc:	73fb      	strb	r3, [r7, #15]
 80069be:	e010      	b.n	80069e2 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80069c6:	68b9      	ldr	r1, [r7, #8]
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7ff fa38 	bl	8005e3e <ld_clust>
 80069ce:	4602      	mov	r2, r0
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80069d6:	e7be      	b.n	8006956 <follow_path+0x46>
			if (res != FR_OK) break;
 80069d8:	bf00      	nop
 80069da:	e002      	b.n	80069e2 <follow_path+0xd2>
				break;
 80069dc:	bf00      	nop
 80069de:	e000      	b.n	80069e2 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80069e0:	bf00      	nop
		}
	}

	return res;
 80069e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b087      	sub	sp, #28
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80069f4:	f04f 33ff 	mov.w	r3, #4294967295
 80069f8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d031      	beq.n	8006a66 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	617b      	str	r3, [r7, #20]
 8006a08:	e002      	b.n	8006a10 <get_ldnumber+0x24>
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	617b      	str	r3, [r7, #20]
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	2b1f      	cmp	r3, #31
 8006a16:	d903      	bls.n	8006a20 <get_ldnumber+0x34>
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	2b3a      	cmp	r3, #58	; 0x3a
 8006a1e:	d1f4      	bne.n	8006a0a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	2b3a      	cmp	r3, #58	; 0x3a
 8006a26:	d11c      	bne.n	8006a62 <get_ldnumber+0x76>
			tp = *path;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	1c5a      	adds	r2, r3, #1
 8006a32:	60fa      	str	r2, [r7, #12]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	3b30      	subs	r3, #48	; 0x30
 8006a38:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	2b09      	cmp	r3, #9
 8006a3e:	d80e      	bhi.n	8006a5e <get_ldnumber+0x72>
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d10a      	bne.n	8006a5e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d107      	bne.n	8006a5e <get_ldnumber+0x72>
					vol = (int)i;
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	3301      	adds	r3, #1
 8006a56:	617b      	str	r3, [r7, #20]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	e002      	b.n	8006a68 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006a62:	2300      	movs	r3, #0
 8006a64:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006a66:	693b      	ldr	r3, [r7, #16]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	371c      	adds	r7, #28
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bc80      	pop	{r7}
 8006a70:	4770      	bx	lr
	...

08006a74 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f04f 32ff 	mov.w	r2, #4294967295
 8006a8c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7fe fc0f 	bl	80052b6 <move_window>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <check_fs+0x2e>
		return 3;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e04a      	b.n	8006b38 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	021b      	lsls	r3, r3, #8
 8006aae:	b21a      	sxth	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006ab6:	b21b      	sxth	r3, r3
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	b21b      	sxth	r3, r3
 8006abc:	4a20      	ldr	r2, [pc, #128]	; (8006b40 <check_fs+0xcc>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d001      	beq.n	8006ac6 <check_fs+0x52>
		return 2;
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	e038      	b.n	8006b38 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	3336      	adds	r3, #54	; 0x36
 8006aca:	3303      	adds	r3, #3
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	061a      	lsls	r2, r3, #24
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3336      	adds	r3, #54	; 0x36
 8006ad4:	3302      	adds	r3, #2
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	041b      	lsls	r3, r3, #16
 8006ada:	4313      	orrs	r3, r2
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	3236      	adds	r2, #54	; 0x36
 8006ae0:	3201      	adds	r2, #1
 8006ae2:	7812      	ldrb	r2, [r2, #0]
 8006ae4:	0212      	lsls	r2, r2, #8
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8006aee:	4313      	orrs	r3, r2
 8006af0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006af4:	4a13      	ldr	r2, [pc, #76]	; (8006b44 <check_fs+0xd0>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d101      	bne.n	8006afe <check_fs+0x8a>
		return 0;
 8006afa:	2300      	movs	r3, #0
 8006afc:	e01c      	b.n	8006b38 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	3352      	adds	r3, #82	; 0x52
 8006b02:	3303      	adds	r3, #3
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	061a      	lsls	r2, r3, #24
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	3352      	adds	r3, #82	; 0x52
 8006b0c:	3302      	adds	r3, #2
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	041b      	lsls	r3, r3, #16
 8006b12:	4313      	orrs	r3, r2
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	3252      	adds	r2, #82	; 0x52
 8006b18:	3201      	adds	r2, #1
 8006b1a:	7812      	ldrb	r2, [r2, #0]
 8006b1c:	0212      	lsls	r2, r2, #8
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8006b26:	4313      	orrs	r3, r2
 8006b28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006b2c:	4a05      	ldr	r2, [pc, #20]	; (8006b44 <check_fs+0xd0>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d101      	bne.n	8006b36 <check_fs+0xc2>
		return 0;
 8006b32:	2300      	movs	r3, #0
 8006b34:	e000      	b.n	8006b38 <check_fs+0xc4>

	return 1;
 8006b36:	2301      	movs	r3, #1
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3708      	adds	r7, #8
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	ffffaa55 	.word	0xffffaa55
 8006b44:	00544146 	.word	0x00544146

08006b48 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b096      	sub	sp, #88	; 0x58
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	4613      	mov	r3, r2
 8006b54:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006b5c:	68b8      	ldr	r0, [r7, #8]
 8006b5e:	f7ff ff45 	bl	80069ec <get_ldnumber>
 8006b62:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	da01      	bge.n	8006b6e <find_volume+0x26>
 8006b6a:	230b      	movs	r3, #11
 8006b6c:	e2a8      	b.n	80070c0 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006b6e:	4a9d      	ldr	r2, [pc, #628]	; (8006de4 <find_volume+0x29c>)
 8006b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b76:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <find_volume+0x3a>
 8006b7e:	230c      	movs	r3, #12
 8006b80:	e29e      	b.n	80070c0 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b86:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d01b      	beq.n	8006bca <find_volume+0x82>
		stat = disk_status(fs->drv);
 8006b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b94:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7fe f879 	bl	8004c90 <disk_status>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006ba4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ba8:	f003 0301 	and.w	r3, r3, #1
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d10c      	bne.n	8006bca <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006bb0:	79fb      	ldrb	r3, [r7, #7]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d007      	beq.n	8006bc6 <find_volume+0x7e>
 8006bb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006bba:	f003 0304 	and.w	r3, r3, #4
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d001      	beq.n	8006bc6 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8006bc2:	230a      	movs	r3, #10
 8006bc4:	e27c      	b.n	80070c0 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	e27a      	b.n	80070c0 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bde:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7fe f86e 	bl	8004cc4 <disk_initialize>
 8006be8:	4603      	mov	r3, r0
 8006bea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006bee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e260      	b.n	80070c0 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006bfe:	79fb      	ldrb	r3, [r7, #7]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d007      	beq.n	8006c14 <find_volume+0xcc>
 8006c04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c08:	f003 0304 	and.w	r3, r3, #4
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8006c10:	230a      	movs	r3, #10
 8006c12:	e255      	b.n	80070c0 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006c14:	2300      	movs	r3, #0
 8006c16:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006c18:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006c1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c1c:	f7ff ff2a 	bl	8006a74 <check_fs>
 8006c20:	4603      	mov	r3, r0
 8006c22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8006c26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d153      	bne.n	8006cd6 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006c2e:	2300      	movs	r3, #0
 8006c30:	643b      	str	r3, [r7, #64]	; 0x40
 8006c32:	e028      	b.n	8006c86 <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006c34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c38:	011b      	lsls	r3, r3, #4
 8006c3a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006c3e:	4413      	add	r3, r2
 8006c40:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c44:	3304      	adds	r3, #4
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d012      	beq.n	8006c72 <find_volume+0x12a>
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4e:	330b      	adds	r3, #11
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	061a      	lsls	r2, r3, #24
 8006c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c56:	330a      	adds	r3, #10
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	041b      	lsls	r3, r3, #16
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c60:	3209      	adds	r2, #9
 8006c62:	7812      	ldrb	r2, [r2, #0]
 8006c64:	0212      	lsls	r2, r2, #8
 8006c66:	4313      	orrs	r3, r2
 8006c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c6a:	3208      	adds	r2, #8
 8006c6c:	7812      	ldrb	r2, [r2, #0]
 8006c6e:	431a      	orrs	r2, r3
 8006c70:	e000      	b.n	8006c74 <find_volume+0x12c>
 8006c72:	2200      	movs	r2, #0
 8006c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	3358      	adds	r3, #88	; 0x58
 8006c7a:	443b      	add	r3, r7
 8006c7c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c82:	3301      	adds	r3, #1
 8006c84:	643b      	str	r3, [r7, #64]	; 0x40
 8006c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c88:	2b03      	cmp	r3, #3
 8006c8a:	d9d3      	bls.n	8006c34 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d002      	beq.n	8006c9c <find_volume+0x154>
 8006c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	3358      	adds	r3, #88	; 0x58
 8006ca2:	443b      	add	r3, r7
 8006ca4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006ca8:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d005      	beq.n	8006cbc <find_volume+0x174>
 8006cb0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006cb2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006cb4:	f7ff fede 	bl	8006a74 <check_fs>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	e000      	b.n	8006cbe <find_volume+0x176>
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006cc2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d005      	beq.n	8006cd6 <find_volume+0x18e>
 8006cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ccc:	3301      	adds	r3, #1
 8006cce:	643b      	str	r3, [r7, #64]	; 0x40
 8006cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cd2:	2b03      	cmp	r3, #3
 8006cd4:	d9e2      	bls.n	8006c9c <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006cd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006cda:	2b03      	cmp	r3, #3
 8006cdc:	d101      	bne.n	8006ce2 <find_volume+0x19a>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e1ee      	b.n	80070c0 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006ce2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <find_volume+0x1a6>
 8006cea:	230d      	movs	r3, #13
 8006cec:	e1e8      	b.n	80070c0 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf0:	7b1b      	ldrb	r3, [r3, #12]
 8006cf2:	021b      	lsls	r3, r3, #8
 8006cf4:	b21a      	sxth	r2, r3
 8006cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf8:	7adb      	ldrb	r3, [r3, #11]
 8006cfa:	b21b      	sxth	r3, r3
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	b21b      	sxth	r3, r3
 8006d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d04:	d001      	beq.n	8006d0a <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 8006d06:	230d      	movs	r3, #13
 8006d08:	e1da      	b.n	80070c0 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0c:	7ddb      	ldrb	r3, [r3, #23]
 8006d0e:	021b      	lsls	r3, r3, #8
 8006d10:	b21a      	sxth	r2, r3
 8006d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d14:	7d9b      	ldrb	r3, [r3, #22]
 8006d16:	b21b      	sxth	r3, r3
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	b21b      	sxth	r3, r3
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d112      	bne.n	8006d4c <find_volume+0x204>
 8006d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d28:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006d2c:	061a      	lsls	r2, r3, #24
 8006d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d30:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006d34:	041b      	lsls	r3, r3, #16
 8006d36:	4313      	orrs	r3, r2
 8006d38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d3a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8006d3e:	0212      	lsls	r2, r2, #8
 8006d40:	4313      	orrs	r3, r2
 8006d42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d44:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8006d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d50:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d56:	7c1a      	ldrb	r2, [r3, #16]
 8006d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5a:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d60:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d006      	beq.n	8006d76 <find_volume+0x22e>
 8006d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6a:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d001      	beq.n	8006d76 <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 8006d72:	230d      	movs	r3, #13
 8006d74:	e1a4      	b.n	80070c0 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8006d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d78:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d80:	fb02 f303 	mul.w	r3, r2, r3
 8006d84:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8006d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d88:	7b5a      	ldrb	r2, [r3, #13]
 8006d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8c:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8006d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d92:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00a      	beq.n	8006db0 <find_volume+0x268>
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006da0:	461a      	mov	r2, r3
 8006da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006da8:	3b01      	subs	r3, #1
 8006daa:	4013      	ands	r3, r2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 8006db0:	230d      	movs	r3, #13
 8006db2:	e185      	b.n	80070c0 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8006db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db6:	7c9b      	ldrb	r3, [r3, #18]
 8006db8:	021b      	lsls	r3, r3, #8
 8006dba:	b21a      	sxth	r2, r3
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbe:	7c5b      	ldrb	r3, [r3, #17]
 8006dc0:	b21b      	sxth	r3, r3
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	b21b      	sxth	r3, r3
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dca:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8006dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd0:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006dd4:	f003 030f 	and.w	r3, r3, #15
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d004      	beq.n	8006de8 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8006dde:	230d      	movs	r3, #13
 8006de0:	e16e      	b.n	80070c0 <find_volume+0x578>
 8006de2:	bf00      	nop
 8006de4:	20000b44 	.word	0x20000b44

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8006de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dea:	7d1b      	ldrb	r3, [r3, #20]
 8006dec:	021b      	lsls	r3, r3, #8
 8006dee:	b21a      	sxth	r2, r3
 8006df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df2:	7cdb      	ldrb	r3, [r3, #19]
 8006df4:	b21b      	sxth	r3, r3
 8006df6:	4313      	orrs	r3, r2
 8006df8:	b21b      	sxth	r3, r3
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8006dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d112      	bne.n	8006e2a <find_volume+0x2e2>
 8006e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e06:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006e0a:	061a      	lsls	r2, r3, #24
 8006e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006e12:	041b      	lsls	r3, r3, #16
 8006e14:	4313      	orrs	r3, r2
 8006e16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e18:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8006e1c:	0212      	lsls	r2, r2, #8
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e22:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2c:	7bdb      	ldrb	r3, [r3, #15]
 8006e2e:	021b      	lsls	r3, r3, #8
 8006e30:	b21a      	sxth	r2, r3
 8006e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e34:	7b9b      	ldrb	r3, [r3, #14]
 8006e36:	b21b      	sxth	r3, r3
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	b21b      	sxth	r3, r3
 8006e3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8006e3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <find_volume+0x300>
 8006e44:	230d      	movs	r3, #13
 8006e46:	e13b      	b.n	80070c0 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8006e48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e4c:	4413      	add	r3, r2
 8006e4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e50:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8006e54:	0912      	lsrs	r2, r2, #4
 8006e56:	b292      	uxth	r2, r2
 8006e58:	4413      	add	r3, r2
 8006e5a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006e5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d201      	bcs.n	8006e68 <find_volume+0x320>
 8006e64:	230d      	movs	r3, #13
 8006e66:	e12b      	b.n	80070c0 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006e68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e70:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006e74:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e78:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <find_volume+0x33c>
 8006e80:	230d      	movs	r3, #13
 8006e82:	e11d      	b.n	80070c0 <find_volume+0x578>
	fmt = FS_FAT12;
 8006e84:	2301      	movs	r3, #1
 8006e86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d902      	bls.n	8006e9a <find_volume+0x352>
 8006e94:	2302      	movs	r3, #2
 8006e96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d902      	bls.n	8006eaa <find_volume+0x362>
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eac:	1c9a      	adds	r2, r3, #2
 8006eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8006eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006eb8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006ebc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006ebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ec0:	441a      	add	r2, r3
 8006ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8006ec8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ecc:	441a      	add	r2, r3
 8006ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed0:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8006ed4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ed8:	2b03      	cmp	r3, #3
 8006eda:	d121      	bne.n	8006f20 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ede:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <find_volume+0x3a2>
 8006ee6:	230d      	movs	r3, #13
 8006ee8:	e0ea      	b.n	80070c0 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8006eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006ef0:	061a      	lsls	r2, r3, #24
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006ef8:	041b      	lsls	r3, r3, #16
 8006efa:	4313      	orrs	r3, r2
 8006efc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006efe:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8006f02:	0212      	lsls	r2, r2, #8
 8006f04:	4313      	orrs	r3, r2
 8006f06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f08:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f10:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8006f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	647b      	str	r3, [r7, #68]	; 0x44
 8006f1e:	e025      	b.n	8006f6c <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f22:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <find_volume+0x3e6>
 8006f2a:	230d      	movs	r3, #13
 8006f2c:	e0c8      	b.n	80070c0 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8006f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f30:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f36:	441a      	add	r2, r3
 8006f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006f3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d104      	bne.n	8006f50 <find_volume+0x408>
 8006f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f4c:	005b      	lsls	r3, r3, #1
 8006f4e:	e00c      	b.n	8006f6a <find_volume+0x422>
 8006f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f52:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006f56:	4613      	mov	r3, r2
 8006f58:	005b      	lsls	r3, r3, #1
 8006f5a:	4413      	add	r3, r2
 8006f5c:	085a      	lsrs	r2, r3, #1
 8006f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f60:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8006f6a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f74:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006f78:	0a5b      	lsrs	r3, r3, #9
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d201      	bcs.n	8006f82 <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 8006f7e:	230d      	movs	r3, #13
 8006f80:	e09e      	b.n	80070c0 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f84:	f04f 32ff 	mov.w	r2, #4294967295
 8006f88:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f94:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8006f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9a:	2280      	movs	r2, #128	; 0x80
 8006f9c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8006fa0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006fa4:	2b03      	cmp	r3, #3
 8006fa6:	d177      	bne.n	8007098 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8006fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006faa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006fae:	021b      	lsls	r3, r3, #8
 8006fb0:	b21a      	sxth	r2, r3
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006fb8:	b21b      	sxth	r3, r3
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	b21b      	sxth	r3, r3
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d16a      	bne.n	8007098 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 8006fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006fca:	f7fe f974 	bl	80052b6 <move_window>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d161      	bne.n	8007098 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 8006fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fde:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8006fe2:	021b      	lsls	r3, r3, #8
 8006fe4:	b21a      	sxth	r2, r3
 8006fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe8:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006fec:	b21b      	sxth	r3, r3
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	b21b      	sxth	r3, r3
 8006ff2:	4a35      	ldr	r2, [pc, #212]	; (80070c8 <find_volume+0x580>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d14f      	bne.n	8007098 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8006ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffa:	78db      	ldrb	r3, [r3, #3]
 8006ffc:	061a      	lsls	r2, r3, #24
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007000:	789b      	ldrb	r3, [r3, #2]
 8007002:	041b      	lsls	r3, r3, #16
 8007004:	4313      	orrs	r3, r2
 8007006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007008:	7852      	ldrb	r2, [r2, #1]
 800700a:	0212      	lsls	r2, r2, #8
 800700c:	4313      	orrs	r3, r2
 800700e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007010:	7812      	ldrb	r2, [r2, #0]
 8007012:	4313      	orrs	r3, r2
 8007014:	4a2d      	ldr	r2, [pc, #180]	; (80070cc <find_volume+0x584>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d13e      	bne.n	8007098 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800701a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701c:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8007020:	061a      	lsls	r2, r3, #24
 8007022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007024:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8007028:	041b      	lsls	r3, r3, #16
 800702a:	4313      	orrs	r3, r2
 800702c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800702e:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8007032:	0212      	lsls	r2, r2, #8
 8007034:	4313      	orrs	r3, r2
 8007036:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007038:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800703c:	4313      	orrs	r3, r2
 800703e:	4a24      	ldr	r2, [pc, #144]	; (80070d0 <find_volume+0x588>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d129      	bne.n	8007098 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007046:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800704a:	061a      	lsls	r2, r3, #24
 800704c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8007052:	041b      	lsls	r3, r3, #16
 8007054:	4313      	orrs	r3, r2
 8007056:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007058:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800705c:	0212      	lsls	r2, r2, #8
 800705e:	4313      	orrs	r3, r2
 8007060:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007062:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8007066:	431a      	orrs	r2, r3
 8007068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800706e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007070:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8007074:	061a      	lsls	r2, r3, #24
 8007076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007078:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800707c:	041b      	lsls	r3, r3, #16
 800707e:	4313      	orrs	r3, r2
 8007080:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007082:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8007086:	0212      	lsls	r2, r2, #8
 8007088:	4313      	orrs	r3, r2
 800708a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800708c:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8007090:	431a      	orrs	r2, r3
 8007092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007094:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8007098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800709e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80070a2:	4b0c      	ldr	r3, [pc, #48]	; (80070d4 <find_volume+0x58c>)
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	3301      	adds	r3, #1
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	4b0a      	ldr	r3, [pc, #40]	; (80070d4 <find_volume+0x58c>)
 80070ac:	801a      	strh	r2, [r3, #0]
 80070ae:	4b09      	ldr	r3, [pc, #36]	; (80070d4 <find_volume+0x58c>)
 80070b0:	881a      	ldrh	r2, [r3, #0]
 80070b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80070b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80070ba:	f7fe f889 	bl	80051d0 <clear_lock>
#endif

	return FR_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3758      	adds	r7, #88	; 0x58
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	ffffaa55 	.word	0xffffaa55
 80070cc:	41615252 	.word	0x41615252
 80070d0:	61417272 	.word	0x61417272
 80070d4:	20000b48 	.word	0x20000b48

080070d8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d022      	beq.n	8007130 <validate+0x58>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d01d      	beq.n	8007130 <validate+0x58>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80070fa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d016      	beq.n	8007130 <validate+0x58>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007108:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8007112:	429a      	cmp	r2, r3
 8007114:	d10c      	bne.n	8007130 <validate+0x58>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800711c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007120:	4618      	mov	r0, r3
 8007122:	f7fd fdb5 	bl	8004c90 <disk_status>
 8007126:	4603      	mov	r3, r0
 8007128:	f003 0301 	and.w	r3, r3, #1
 800712c:	2b00      	cmp	r3, #0
 800712e:	d001      	beq.n	8007134 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8007130:	2309      	movs	r3, #9
 8007132:	e000      	b.n	8007136 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
	...

08007140 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b088      	sub	sp, #32
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	4613      	mov	r3, r2
 800714c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8007152:	f107 0310 	add.w	r3, r7, #16
 8007156:	4618      	mov	r0, r3
 8007158:	f7ff fc48 	bl	80069ec <get_ldnumber>
 800715c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	2b00      	cmp	r3, #0
 8007162:	da01      	bge.n	8007168 <f_mount+0x28>
 8007164:	230b      	movs	r3, #11
 8007166:	e02d      	b.n	80071c4 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007168:	4a18      	ldr	r2, [pc, #96]	; (80071cc <f_mount+0x8c>)
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007170:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d006      	beq.n	8007186 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8007178:	69b8      	ldr	r0, [r7, #24]
 800717a:	f7fe f829 	bl	80051d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d003      	beq.n	8007194 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	490d      	ldr	r1, [pc, #52]	; (80071cc <f_mount+0x8c>)
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <f_mount+0x6a>
 80071a4:	79fb      	ldrb	r3, [r7, #7]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d001      	beq.n	80071ae <f_mount+0x6e>
 80071aa:	2300      	movs	r3, #0
 80071ac:	e00a      	b.n	80071c4 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80071ae:	f107 0108 	add.w	r1, r7, #8
 80071b2:	f107 030c 	add.w	r3, r7, #12
 80071b6:	2200      	movs	r2, #0
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7ff fcc5 	bl	8006b48 <find_volume>
 80071be:	4603      	mov	r3, r0
 80071c0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80071c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3720      	adds	r7, #32
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	20000b44 	.word	0x20000b44

080071d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80071dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071e0:	6018      	str	r0, [r3, #0]
 80071e2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80071e6:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80071ea:	6019      	str	r1, [r3, #0]
 80071ec:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80071f0:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 80071f4:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80071f6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80071fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <f_open+0x38>
 8007204:	2309      	movs	r3, #9
 8007206:	e260      	b.n	80076ca <f_open+0x4fa>
	fp->fs = 0;			/* Clear file object */
 8007208:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800720c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2200      	movs	r2, #0
 8007214:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007218:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800721c:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 8007220:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8007224:	f2a2 2251 	subw	r2, r2, #593	; 0x251
 8007228:	7812      	ldrb	r2, [r2, #0]
 800722a:	f002 021f 	and.w	r2, r2, #31
 800722e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8007230:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8007234:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	f023 0301 	bic.w	r3, r3, #1
 800723e:	b2da      	uxtb	r2, r3
 8007240:	f107 0108 	add.w	r1, r7, #8
 8007244:	f107 0320 	add.w	r3, r7, #32
 8007248:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800724c:	4618      	mov	r0, r3
 800724e:	f7ff fc7b 	bl	8006b48 <find_volume>
 8007252:	4603      	mov	r3, r0
 8007254:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007258:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800725c:	2b00      	cmp	r3, #0
 800725e:	f040 8232 	bne.w	80076c6 <f_open+0x4f6>
		INIT_BUF(dj);
 8007262:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8007266:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800726a:	f107 0214 	add.w	r2, r7, #20
 800726e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8007272:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8007276:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800727a:	4a9d      	ldr	r2, [pc, #628]	; (80074f0 <f_open+0x320>)
 800727c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		res = follow_path(&dj, path);	/* Follow the file path */
 8007280:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8007284:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	f107 0320 	add.w	r3, r7, #32
 800728e:	4611      	mov	r1, r2
 8007290:	4618      	mov	r0, r3
 8007292:	f7ff fb3d 	bl	8006910 <follow_path>
 8007296:	4603      	mov	r3, r0
 8007298:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
		dir = dj.dir;
 800729c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80072a0:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80072a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80072a8:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80072ac:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d11d      	bne.n	80072f0 <f_open+0x120>
			if (!dir)	/* Default directory itself */
 80072b4:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d103      	bne.n	80072c4 <f_open+0xf4>
				res = FR_INVALID_NAME;
 80072bc:	2306      	movs	r3, #6
 80072be:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 80072c2:	e015      	b.n	80072f0 <f_open+0x120>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80072c4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80072c8:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	f023 0301 	bic.w	r3, r3, #1
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	bf14      	ite	ne
 80072d6:	2301      	movne	r3, #1
 80072d8:	2300      	moveq	r3, #0
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	461a      	mov	r2, r3
 80072de:	f107 0320 	add.w	r3, r7, #32
 80072e2:	4611      	mov	r1, r2
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fd fde9 	bl	8004ebc <chk_lock>
 80072ea:	4603      	mov	r3, r0
 80072ec:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80072f0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80072f4:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	f003 031c 	and.w	r3, r3, #28
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f000 80e6 	beq.w	80074d0 <f_open+0x300>
			if (res != FR_OK) {					/* No file, create new */
 8007304:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8007308:	2b00      	cmp	r3, #0
 800730a:	d027      	beq.n	800735c <f_open+0x18c>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800730c:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8007310:	2b04      	cmp	r3, #4
 8007312:	d10e      	bne.n	8007332 <f_open+0x162>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007314:	f7fd fe3e 	bl	8004f94 <enq_lock>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d006      	beq.n	800732c <f_open+0x15c>
 800731e:	f107 0320 	add.w	r3, r7, #32
 8007322:	4618      	mov	r0, r3
 8007324:	f7ff f82e 	bl	8006384 <dir_register>
 8007328:	4603      	mov	r3, r0
 800732a:	e000      	b.n	800732e <f_open+0x15e>
 800732c:	2312      	movs	r3, #18
 800732e:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007332:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8007336:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 800733a:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800733e:	f2a2 2251 	subw	r2, r2, #593	; 0x251
 8007342:	7812      	ldrb	r2, [r2, #0]
 8007344:	f042 0208 	orr.w	r2, r2, #8
 8007348:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800734a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800734e:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8007352:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007356:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800735a:	e017      	b.n	800738c <f_open+0x1bc>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800735c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007360:	330b      	adds	r3, #11
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	f003 0311 	and.w	r3, r3, #17
 8007368:	2b00      	cmp	r3, #0
 800736a:	d003      	beq.n	8007374 <f_open+0x1a4>
					res = FR_DENIED;
 800736c:	2307      	movs	r3, #7
 800736e:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 8007372:	e00b      	b.n	800738c <f_open+0x1bc>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8007374:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8007378:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	f003 0304 	and.w	r3, r3, #4
 8007382:	2b00      	cmp	r3, #0
 8007384:	d002      	beq.n	800738c <f_open+0x1bc>
						res = FR_EXIST;
 8007386:	2308      	movs	r3, #8
 8007388:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800738c:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8007390:	2b00      	cmp	r3, #0
 8007392:	f040 80c3 	bne.w	800751c <f_open+0x34c>
 8007396:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800739a:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	f003 0308 	and.w	r3, r3, #8
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 80b9 	beq.w	800751c <f_open+0x34c>
				dw = GET_FATTIME();				/* Created time */
 80073aa:	f7fd fc0d 	bl	8004bc8 <get_fattime>
 80073ae:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
				ST_DWORD(dir + DIR_CrtTime, dw);
 80073b2:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80073b6:	330e      	adds	r3, #14
 80073b8:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80073bc:	b2d2      	uxtb	r2, r2
 80073be:	701a      	strb	r2, [r3, #0]
 80073c0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	0a1b      	lsrs	r3, r3, #8
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80073ce:	330f      	adds	r3, #15
 80073d0:	b2d2      	uxtb	r2, r2
 80073d2:	701a      	strb	r2, [r3, #0]
 80073d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80073d8:	0c1a      	lsrs	r2, r3, #16
 80073da:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80073de:	3310      	adds	r3, #16
 80073e0:	b2d2      	uxtb	r2, r2
 80073e2:	701a      	strb	r2, [r3, #0]
 80073e4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80073e8:	0e1a      	lsrs	r2, r3, #24
 80073ea:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80073ee:	3311      	adds	r3, #17
 80073f0:	b2d2      	uxtb	r2, r2
 80073f2:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80073f4:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80073f8:	330b      	adds	r3, #11
 80073fa:	2200      	movs	r2, #0
 80073fc:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80073fe:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007402:	331c      	adds	r3, #28
 8007404:	2200      	movs	r2, #0
 8007406:	701a      	strb	r2, [r3, #0]
 8007408:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800740c:	331d      	adds	r3, #29
 800740e:	2200      	movs	r2, #0
 8007410:	701a      	strb	r2, [r3, #0]
 8007412:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007416:	331e      	adds	r3, #30
 8007418:	2200      	movs	r2, #0
 800741a:	701a      	strb	r2, [r3, #0]
 800741c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007420:	331f      	adds	r3, #31
 8007422:	2200      	movs	r2, #0
 8007424:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007426:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800742a:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800742e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007432:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 8007436:	4618      	mov	r0, r3
 8007438:	f7fe fd01 	bl	8005e3e <ld_clust>
 800743c:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
				st_clust(dir, 0);				/* cluster = 0 */
 8007440:	2100      	movs	r1, #0
 8007442:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 8007446:	f7fe fd27 	bl	8005e98 <st_clust>
				dj.fs->wflag = 1;
 800744a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800744e:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8007452:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800745c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007460:	2b00      	cmp	r3, #0
 8007462:	d05b      	beq.n	800751c <f_open+0x34c>
					dw = dj.fs->winsect;
 8007464:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8007468:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800746c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007470:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8007474:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					res = remove_chain(dj.fs, cl);
 8007478:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800747c:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8007480:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007484:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8007488:	4618      	mov	r0, r3
 800748a:	f7fe f9d8 	bl	800583e <remove_chain>
 800748e:	4603      	mov	r3, r0
 8007490:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
					if (res == FR_OK) {
 8007494:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8007498:	2b00      	cmp	r3, #0
 800749a:	d13f      	bne.n	800751c <f_open+0x34c>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800749c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80074a0:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80074a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80074a8:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80074ac:	3a01      	subs	r2, #1
 80074ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 80074b2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80074b6:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80074ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80074be:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7fd fef7 	bl	80052b6 <move_window>
 80074c8:	4603      	mov	r3, r0
 80074ca:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 80074ce:	e025      	b.n	800751c <f_open+0x34c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80074d0:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d121      	bne.n	800751c <f_open+0x34c>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80074d8:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80074dc:	330b      	adds	r3, #11
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	f003 0310 	and.w	r3, r3, #16
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d005      	beq.n	80074f4 <f_open+0x324>
					res = FR_NO_FILE;
 80074e8:	2304      	movs	r3, #4
 80074ea:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 80074ee:	e015      	b.n	800751c <f_open+0x34c>
 80074f0:	20000b64 	.word	0x20000b64
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80074f4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80074f8:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00a      	beq.n	800751c <f_open+0x34c>
 8007506:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800750a:	330b      	adds	r3, #11
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	2b00      	cmp	r3, #0
 8007514:	d002      	beq.n	800751c <f_open+0x34c>
						res = FR_DENIED;
 8007516:	2307      	movs	r3, #7
 8007518:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				}
			}
		}
		if (res == FR_OK) {
 800751c:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8007520:	2b00      	cmp	r3, #0
 8007522:	d153      	bne.n	80075cc <f_open+0x3fc>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007524:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8007528:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	f003 0308 	and.w	r3, r3, #8
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00b      	beq.n	800754e <f_open+0x37e>
				mode |= FA__WRITTEN;
 8007536:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800753a:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 800753e:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8007542:	f2a2 2251 	subw	r2, r2, #593	; 0x251
 8007546:	7812      	ldrb	r2, [r2, #0]
 8007548:	f042 0220 	orr.w	r2, r2, #32
 800754c:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800754e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8007552:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8007556:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800755a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800755e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8007562:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 800756c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8007570:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 800757a:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800757e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8007582:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	f023 0301 	bic.w	r3, r3, #1
 800758c:	2b00      	cmp	r3, #0
 800758e:	bf14      	ite	ne
 8007590:	2301      	movne	r3, #1
 8007592:	2300      	moveq	r3, #0
 8007594:	b2db      	uxtb	r3, r3
 8007596:	461a      	mov	r2, r3
 8007598:	f107 0320 	add.w	r3, r7, #32
 800759c:	4611      	mov	r1, r2
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fd fd1c 	bl	8004fdc <inc_lock>
 80075a4:	4602      	mov	r2, r0
 80075a6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80075aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 80075b4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80075b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d102      	bne.n	80075cc <f_open+0x3fc>
 80075c6:	2302      	movs	r3, #2
 80075c8:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80075cc:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d178      	bne.n	80076c6 <f_open+0x4f6>
			fp->flag = mode;					/* File access mode */
 80075d4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80075d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80075e2:	f2a2 2251 	subw	r2, r2, #593	; 0x251
 80075e6:	7812      	ldrb	r2, [r2, #0]
 80075e8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 80075ec:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80075f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80075fc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8007600:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8007604:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007608:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 800760c:	4618      	mov	r0, r3
 800760e:	f7fe fc16 	bl	8005e3e <ld_clust>
 8007612:	4602      	mov	r2, r0
 8007614:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8007618:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8007622:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007626:	331f      	adds	r3, #31
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	061a      	lsls	r2, r3, #24
 800762c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007630:	331e      	adds	r3, #30
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	041b      	lsls	r3, r3, #16
 8007636:	4313      	orrs	r3, r2
 8007638:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 800763c:	321d      	adds	r2, #29
 800763e:	7812      	ldrb	r2, [r2, #0]
 8007640:	0212      	lsls	r2, r2, #8
 8007642:	4313      	orrs	r3, r2
 8007644:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8007648:	321c      	adds	r2, #28
 800764a:	7812      	ldrb	r2, [r2, #0]
 800764c:	431a      	orrs	r2, r3
 800764e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8007652:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 800765c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8007660:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2200      	movs	r2, #0
 8007668:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 800766c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8007670:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2200      	movs	r2, #0
 8007678:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800767c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8007680:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2200      	movs	r2, #0
 8007688:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800768c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8007690:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8007694:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007698:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800769c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 80076a6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80076aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80076b4:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80076b8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80076bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 80076c6:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	f507 7716 	add.w	r7, r7, #600	; 0x258
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b08a      	sub	sp, #40	; 0x28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
 80076e0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2200      	movs	r2, #0
 80076ea:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f7ff fcf3 	bl	80070d8 <validate>
 80076f2:	4603      	mov	r3, r0
 80076f4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80076f6:	7dfb      	ldrb	r3, [r7, #23]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <f_write+0x2c>
 80076fc:	7dfb      	ldrb	r3, [r7, #23]
 80076fe:	e192      	b.n	8007a26 <f_write+0x352>
	if (fp->err)							/* Check error */
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007706:	2b00      	cmp	r3, #0
 8007708:	d003      	beq.n	8007712 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007710:	e189      	b.n	8007a26 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007718:	f003 0302 	and.w	r3, r3, #2
 800771c:	2b00      	cmp	r3, #0
 800771e:	d101      	bne.n	8007724 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007720:	2307      	movs	r3, #7
 8007722:	e180      	b.n	8007a26 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	441a      	add	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007734:	429a      	cmp	r2, r3
 8007736:	f080 8158 	bcs.w	80079ea <f_write+0x316>
 800773a:	2300      	movs	r3, #0
 800773c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800773e:	e154      	b.n	80079ea <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800774a:	2b00      	cmp	r3, #0
 800774c:	f040 8114 	bne.w	8007978 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007756:	0a5b      	lsrs	r3, r3, #9
 8007758:	b2da      	uxtb	r2, r3
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007760:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007764:	3b01      	subs	r3, #1
 8007766:	b2db      	uxtb	r3, r3
 8007768:	4013      	ands	r3, r2
 800776a:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800776c:	7dbb      	ldrb	r3, [r7, #22]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d151      	bne.n	8007816 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10f      	bne.n	800779c <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007782:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007786:	2b00      	cmp	r3, #0
 8007788:	d121      	bne.n	80077ce <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007790:	2100      	movs	r1, #0
 8007792:	4618      	mov	r0, r3
 8007794:	f7fe f8ad 	bl	80058f2 <create_chain>
 8007798:	6278      	str	r0, [r7, #36]	; 0x24
 800779a:	e018      	b.n	80077ce <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d008      	beq.n	80077b8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80077ac:	4619      	mov	r1, r3
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f7fe f93c 	bl	8005a2c <clmt_clust>
 80077b4:	6278      	str	r0, [r7, #36]	; 0x24
 80077b6:	e00a      	b.n	80077ce <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80077c4:	4619      	mov	r1, r3
 80077c6:	4610      	mov	r0, r2
 80077c8:	f7fe f893 	bl	80058f2 <create_chain>
 80077cc:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80077ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 810f 	beq.w	80079f4 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80077d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d105      	bne.n	80077e8 <f_write+0x114>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2202      	movs	r2, #2
 80077e0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80077e4:	2302      	movs	r3, #2
 80077e6:	e11e      	b.n	8007a26 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ee:	d105      	bne.n	80077fc <f_write+0x128>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80077f8:	2301      	movs	r3, #1
 80077fa:	e114      	b.n	8007a26 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007800:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800780a:	2b00      	cmp	r3, #0
 800780c:	d103      	bne.n	8007816 <f_write+0x142>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007812:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800781c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007820:	2b00      	cmp	r3, #0
 8007822:	d01d      	beq.n	8007860 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800782a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800782e:	68f9      	ldr	r1, [r7, #12]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007836:	2301      	movs	r3, #1
 8007838:	f7fd fa8a 	bl	8004d50 <disk_write>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d005      	beq.n	800784e <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800784a:	2301      	movs	r3, #1
 800784c:	e0eb      	b.n	8007a26 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007858:	b2da      	uxtb	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800786c:	4619      	mov	r1, r3
 800786e:	4610      	mov	r0, r2
 8007870:	f7fd fdfc 	bl	800546c <clust2sect>
 8007874:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d105      	bne.n	8007888 <f_write+0x1b4>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2202      	movs	r2, #2
 8007880:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007884:	2302      	movs	r3, #2
 8007886:	e0ce      	b.n	8007a26 <f_write+0x352>
			sect += csect;
 8007888:	7dbb      	ldrb	r3, [r7, #22]
 800788a:	693a      	ldr	r2, [r7, #16]
 800788c:	4413      	add	r3, r2
 800788e:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	0a5b      	lsrs	r3, r3, #9
 8007894:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d048      	beq.n	800792e <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800789c:	7dba      	ldrb	r2, [r7, #22]
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	4413      	add	r3, r2
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80078a8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d908      	bls.n	80078c2 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80078b6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80078ba:	461a      	mov	r2, r3
 80078bc:	7dbb      	ldrb	r3, [r7, #22]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80078c8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	693a      	ldr	r2, [r7, #16]
 80078d0:	69b9      	ldr	r1, [r7, #24]
 80078d2:	f7fd fa3d 	bl	8004d50 <disk_write>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d005      	beq.n	80078e8 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80078e4:	2301      	movs	r3, #1
 80078e6:	e09e      	b.n	8007a26 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	69fa      	ldr	r2, [r7, #28]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d916      	bls.n	8007926 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	025b      	lsls	r3, r3, #9
 8007906:	69ba      	ldr	r2, [r7, #24]
 8007908:	4413      	add	r3, r2
 800790a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800790e:	4619      	mov	r1, r3
 8007910:	f7fd fa5c 	bl	8004dcc <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800791a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800791e:	b2da      	uxtb	r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	025b      	lsls	r3, r3, #9
 800792a:	623b      	str	r3, [r7, #32]
				continue;
 800792c:	e047      	b.n	80079be <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	429a      	cmp	r2, r3
 8007938:	d01a      	beq.n	8007970 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007946:	429a      	cmp	r2, r3
 8007948:	d212      	bcs.n	8007970 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007950:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007954:	68f9      	ldr	r1, [r7, #12]
 8007956:	2301      	movs	r3, #1
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	f7fd f9d9 	bl	8004d10 <disk_read>
 800795e:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8007960:	2b00      	cmp	r3, #0
 8007962:	d005      	beq.n	8007970 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800796c:	2301      	movs	r3, #1
 800796e:	e05a      	b.n	8007a26 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	693a      	ldr	r2, [r7, #16]
 8007974:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800797e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007982:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007986:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8007988:	6a3a      	ldr	r2, [r7, #32]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	429a      	cmp	r2, r3
 800798e:	d901      	bls.n	8007994 <f_write+0x2c0>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800799a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	4413      	add	r3, r2
 80079a2:	6a3a      	ldr	r2, [r7, #32]
 80079a4:	69b9      	ldr	r1, [r7, #24]
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fd fa10 	bl	8004dcc <mem_cpy>
		fp->flag |= FA__DIRTY;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80079b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079b6:	b2da      	uxtb	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80079be:	69ba      	ldr	r2, [r7, #24]
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	4413      	add	r3, r2
 80079c4:	61bb      	str	r3, [r7, #24]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	441a      	add	r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	6a3b      	ldr	r3, [r7, #32]
 80079dc:	441a      	add	r2, r3
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	601a      	str	r2, [r3, #0]
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	6a3b      	ldr	r3, [r7, #32]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f47f aea7 	bne.w	8007740 <f_write+0x6c>
 80079f2:	e000      	b.n	80079f6 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80079f4:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d905      	bls.n	8007a12 <f_write+0x33e>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007a18:	f043 0320 	orr.w	r3, r3, #32
 8007a1c:	b2da      	uxtb	r2, r3
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3728      	adds	r7, #40	; 0x28
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b086      	sub	sp, #24
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7ff fb4e 	bl	80070d8 <validate>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007a40:	7dfb      	ldrb	r3, [r7, #23]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f040 80a8 	bne.w	8007b98 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007a4e:	f003 0320 	and.w	r3, r3, #32
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 80a0 	beq.w	8007b98 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d019      	beq.n	8007a9a <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a6c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007a70:	6879      	ldr	r1, [r7, #4]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007a78:	2301      	movs	r3, #1
 8007a7a:	f7fd f969 	bl	8004d50 <disk_write>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d001      	beq.n	8007a88 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007a84:	2301      	movs	r3, #1
 8007a86:	e088      	b.n	8007b9a <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007a8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a92:	b2da      	uxtb	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	f7fd fc04 	bl	80052b6 <move_window>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8007ab2:	7dfb      	ldrb	r3, [r7, #23]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d16f      	bne.n	8007b98 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007abe:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	330b      	adds	r3, #11
 8007ac4:	781a      	ldrb	r2, [r3, #0]
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	330b      	adds	r3, #11
 8007aca:	f042 0220 	orr.w	r2, r2, #32
 8007ace:	b2d2      	uxtb	r2, r2
 8007ad0:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	331c      	adds	r3, #28
 8007adc:	b2d2      	uxtb	r2, r2
 8007ade:	701a      	strb	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	0a1b      	lsrs	r3, r3, #8
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	331d      	adds	r3, #29
 8007af0:	b2d2      	uxtb	r2, r2
 8007af2:	701a      	strb	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007afa:	0c1a      	lsrs	r2, r3, #16
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	331e      	adds	r3, #30
 8007b00:	b2d2      	uxtb	r2, r2
 8007b02:	701a      	strb	r2, [r3, #0]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007b0a:	0e1a      	lsrs	r2, r3, #24
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	331f      	adds	r3, #31
 8007b10:	b2d2      	uxtb	r2, r2
 8007b12:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	6938      	ldr	r0, [r7, #16]
 8007b1e:	f7fe f9bb 	bl	8005e98 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8007b22:	f7fd f851 	bl	8004bc8 <get_fattime>
 8007b26:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	3316      	adds	r3, #22
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	b2d2      	uxtb	r2, r2
 8007b30:	701a      	strb	r2, [r3, #0]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	0a1b      	lsrs	r3, r3, #8
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	3317      	adds	r3, #23
 8007b3e:	b2d2      	uxtb	r2, r2
 8007b40:	701a      	strb	r2, [r3, #0]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	0c1a      	lsrs	r2, r3, #16
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	3318      	adds	r3, #24
 8007b4a:	b2d2      	uxtb	r2, r2
 8007b4c:	701a      	strb	r2, [r3, #0]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	0e1a      	lsrs	r2, r3, #24
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	3319      	adds	r3, #25
 8007b56:	b2d2      	uxtb	r2, r2
 8007b58:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	3312      	adds	r3, #18
 8007b5e:	2200      	movs	r2, #0
 8007b60:	701a      	strb	r2, [r3, #0]
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	3313      	adds	r3, #19
 8007b66:	2200      	movs	r2, #0
 8007b68:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007b70:	f023 0320 	bic.w	r3, r3, #32
 8007b74:	b2da      	uxtb	r2, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fd fbbf 	bl	8005312 <sync_fs>
 8007b94:	4603      	mov	r3, r0
 8007b96:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3718      	adds	r7, #24
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b084      	sub	sp, #16
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f7ff ff3f 	bl	8007a2e <f_sync>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d116      	bne.n	8007be8 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f7ff fa8c 	bl	80070d8 <validate>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10e      	bne.n	8007be8 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7fd fab9 	bl	8005148 <dec_lock>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007bda:	7bfb      	ldrb	r3, [r7, #15]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d103      	bne.n	8007be8 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b084      	sub	sp, #16
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8007bfe:	78fb      	ldrb	r3, [r7, #3]
 8007c00:	2b0a      	cmp	r3, #10
 8007c02:	d103      	bne.n	8007c0c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007c04:	210d      	movs	r1, #13
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7ff fff3 	bl	8007bf2 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	db25      	blt.n	8007c64 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	1c5a      	adds	r2, r3, #1
 8007c1c:	60fa      	str	r2, [r7, #12]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	4413      	add	r3, r2
 8007c22:	78fa      	ldrb	r2, [r7, #3]
 8007c24:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2b3c      	cmp	r3, #60	; 0x3c
 8007c2a:	dd12      	ble.n	8007c52 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6818      	ldr	r0, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f103 010c 	add.w	r1, r3, #12
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	f107 0308 	add.w	r3, r7, #8
 8007c3c:	f7ff fd4a 	bl	80076d4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007c40:	68ba      	ldr	r2, [r7, #8]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d101      	bne.n	8007c4c <putc_bfd+0x5a>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	e001      	b.n	8007c50 <putc_bfd+0x5e>
 8007c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c50:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	1c5a      	adds	r2, r3, #1
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	609a      	str	r2, [r3, #8]
 8007c62:	e000      	b.n	8007c66 <putc_bfd+0x74>
	if (i < 0) return;
 8007c64:	bf00      	nop
}
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007c6c:	b590      	push	{r4, r7, lr}
 8007c6e:	b097      	sub	sp, #92	; 0x5c
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	613b      	str	r3, [r7, #16]
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8007c82:	e009      	b.n	8007c98 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	1c5a      	adds	r2, r3, #1
 8007c88:	607a      	str	r2, [r7, #4]
 8007c8a:	781a      	ldrb	r2, [r3, #0]
 8007c8c:	f107 030c 	add.w	r3, r7, #12
 8007c90:	4611      	mov	r1, r2
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7ff ffad 	bl	8007bf2 <putc_bfd>
	while (*str)			/* Put the string */
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1f1      	bne.n	8007c84 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	db15      	blt.n	8007cd2 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	461c      	mov	r4, r3
 8007cac:	f107 0208 	add.w	r2, r7, #8
 8007cb0:	f107 030c 	add.w	r3, r7, #12
 8007cb4:	f103 010c 	add.w	r1, r3, #12
 8007cb8:	4613      	mov	r3, r2
 8007cba:	4622      	mov	r2, r4
 8007cbc:	f7ff fd0a 	bl	80076d4 <f_write>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d105      	bne.n	8007cd2 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d101      	bne.n	8007cd2 <f_puts+0x66>
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	e001      	b.n	8007cd6 <f_puts+0x6a>
	return EOF;
 8007cd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	375c      	adds	r7, #92	; 0x5c
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd90      	pop	{r4, r7, pc}
	...

08007ce0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b087      	sub	sp, #28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	4613      	mov	r3, r2
 8007cec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8007cf6:	4b1e      	ldr	r3, [pc, #120]	; (8007d70 <FATFS_LinkDriverEx+0x90>)
 8007cf8:	7a5b      	ldrb	r3, [r3, #9]
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d831      	bhi.n	8007d64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007d00:	4b1b      	ldr	r3, [pc, #108]	; (8007d70 <FATFS_LinkDriverEx+0x90>)
 8007d02:	7a5b      	ldrb	r3, [r3, #9]
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	461a      	mov	r2, r3
 8007d08:	4b19      	ldr	r3, [pc, #100]	; (8007d70 <FATFS_LinkDriverEx+0x90>)
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8007d0e:	4b18      	ldr	r3, [pc, #96]	; (8007d70 <FATFS_LinkDriverEx+0x90>)
 8007d10:	7a5b      	ldrb	r3, [r3, #9]
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	4a16      	ldr	r2, [pc, #88]	; (8007d70 <FATFS_LinkDriverEx+0x90>)
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8007d1e:	4b14      	ldr	r3, [pc, #80]	; (8007d70 <FATFS_LinkDriverEx+0x90>)
 8007d20:	7a5b      	ldrb	r3, [r3, #9]
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	461a      	mov	r2, r3
 8007d26:	4b12      	ldr	r3, [pc, #72]	; (8007d70 <FATFS_LinkDriverEx+0x90>)
 8007d28:	4413      	add	r3, r2
 8007d2a:	79fa      	ldrb	r2, [r7, #7]
 8007d2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007d2e:	4b10      	ldr	r3, [pc, #64]	; (8007d70 <FATFS_LinkDriverEx+0x90>)
 8007d30:	7a5b      	ldrb	r3, [r3, #9]
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	1c5a      	adds	r2, r3, #1
 8007d36:	b2d1      	uxtb	r1, r2
 8007d38:	4a0d      	ldr	r2, [pc, #52]	; (8007d70 <FATFS_LinkDriverEx+0x90>)
 8007d3a:	7251      	strb	r1, [r2, #9]
 8007d3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007d3e:	7dbb      	ldrb	r3, [r7, #22]
 8007d40:	3330      	adds	r3, #48	; 0x30
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	223a      	movs	r2, #58	; 0x3a
 8007d4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	3302      	adds	r3, #2
 8007d54:	222f      	movs	r2, #47	; 0x2f
 8007d56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	3303      	adds	r3, #3
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007d60:	2300      	movs	r3, #0
 8007d62:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8007d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	371c      	adds	r7, #28
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bc80      	pop	{r7}
 8007d6e:	4770      	bx	lr
 8007d70:	20000d64 	.word	0x20000d64

08007d74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007d7e:	2200      	movs	r2, #0
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f7ff ffac 	bl	8007ce0 <FATFS_LinkDriverEx>
 8007d88:	4603      	mov	r3, r0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3708      	adds	r7, #8
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
	...

08007d94 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	6039      	str	r1, [r7, #0]
 8007d9e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007da0:	88fb      	ldrh	r3, [r7, #6]
 8007da2:	2b7f      	cmp	r3, #127	; 0x7f
 8007da4:	d802      	bhi.n	8007dac <ff_convert+0x18>
		c = chr;
 8007da6:	88fb      	ldrh	r3, [r7, #6]
 8007da8:	81fb      	strh	r3, [r7, #14]
 8007daa:	e025      	b.n	8007df8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00b      	beq.n	8007dca <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007db2:	88fb      	ldrh	r3, [r7, #6]
 8007db4:	2bff      	cmp	r3, #255	; 0xff
 8007db6:	d805      	bhi.n	8007dc4 <ff_convert+0x30>
 8007db8:	88fb      	ldrh	r3, [r7, #6]
 8007dba:	3b80      	subs	r3, #128	; 0x80
 8007dbc:	4a11      	ldr	r2, [pc, #68]	; (8007e04 <ff_convert+0x70>)
 8007dbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dc2:	e000      	b.n	8007dc6 <ff_convert+0x32>
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	81fb      	strh	r3, [r7, #14]
 8007dc8:	e016      	b.n	8007df8 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8007dca:	2300      	movs	r3, #0
 8007dcc:	81fb      	strh	r3, [r7, #14]
 8007dce:	e009      	b.n	8007de4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007dd0:	89fb      	ldrh	r3, [r7, #14]
 8007dd2:	4a0c      	ldr	r2, [pc, #48]	; (8007e04 <ff_convert+0x70>)
 8007dd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dd8:	88fa      	ldrh	r2, [r7, #6]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d006      	beq.n	8007dec <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007dde:	89fb      	ldrh	r3, [r7, #14]
 8007de0:	3301      	adds	r3, #1
 8007de2:	81fb      	strh	r3, [r7, #14]
 8007de4:	89fb      	ldrh	r3, [r7, #14]
 8007de6:	2b7f      	cmp	r3, #127	; 0x7f
 8007de8:	d9f2      	bls.n	8007dd0 <ff_convert+0x3c>
 8007dea:	e000      	b.n	8007dee <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007dec:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007dee:	89fb      	ldrh	r3, [r7, #14]
 8007df0:	3380      	adds	r3, #128	; 0x80
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007df8:	89fb      	ldrh	r3, [r7, #14]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bc80      	pop	{r7}
 8007e02:	4770      	bx	lr
 8007e04:	0800ce88 	.word	0x0800ce88

08007e08 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	4603      	mov	r3, r0
 8007e10:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8007e12:	2300      	movs	r3, #0
 8007e14:	60fb      	str	r3, [r7, #12]
 8007e16:	e002      	b.n	8007e1e <ff_wtoupper+0x16>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	60fb      	str	r3, [r7, #12]
 8007e1e:	4a0f      	ldr	r2, [pc, #60]	; (8007e5c <ff_wtoupper+0x54>)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d006      	beq.n	8007e38 <ff_wtoupper+0x30>
 8007e2a:	4a0c      	ldr	r2, [pc, #48]	; (8007e5c <ff_wtoupper+0x54>)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e32:	88fa      	ldrh	r2, [r7, #6]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d1ef      	bne.n	8007e18 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8007e38:	4a08      	ldr	r2, [pc, #32]	; (8007e5c <ff_wtoupper+0x54>)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d004      	beq.n	8007e4e <ff_wtoupper+0x46>
 8007e44:	4a06      	ldr	r2, [pc, #24]	; (8007e60 <ff_wtoupper+0x58>)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e4c:	e000      	b.n	8007e50 <ff_wtoupper+0x48>
 8007e4e:	88fb      	ldrh	r3, [r7, #6]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3714      	adds	r7, #20
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bc80      	pop	{r7}
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	0800cf88 	.word	0x0800cf88
 8007e60:	0800d168 	.word	0x0800d168

08007e64 <__errno>:
 8007e64:	4b01      	ldr	r3, [pc, #4]	; (8007e6c <__errno+0x8>)
 8007e66:	6818      	ldr	r0, [r3, #0]
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	2000002c 	.word	0x2000002c

08007e70 <__libc_init_array>:
 8007e70:	b570      	push	{r4, r5, r6, lr}
 8007e72:	2600      	movs	r6, #0
 8007e74:	4d0c      	ldr	r5, [pc, #48]	; (8007ea8 <__libc_init_array+0x38>)
 8007e76:	4c0d      	ldr	r4, [pc, #52]	; (8007eac <__libc_init_array+0x3c>)
 8007e78:	1b64      	subs	r4, r4, r5
 8007e7a:	10a4      	asrs	r4, r4, #2
 8007e7c:	42a6      	cmp	r6, r4
 8007e7e:	d109      	bne.n	8007e94 <__libc_init_array+0x24>
 8007e80:	f004 fcde 	bl	800c840 <_init>
 8007e84:	2600      	movs	r6, #0
 8007e86:	4d0a      	ldr	r5, [pc, #40]	; (8007eb0 <__libc_init_array+0x40>)
 8007e88:	4c0a      	ldr	r4, [pc, #40]	; (8007eb4 <__libc_init_array+0x44>)
 8007e8a:	1b64      	subs	r4, r4, r5
 8007e8c:	10a4      	asrs	r4, r4, #2
 8007e8e:	42a6      	cmp	r6, r4
 8007e90:	d105      	bne.n	8007e9e <__libc_init_array+0x2e>
 8007e92:	bd70      	pop	{r4, r5, r6, pc}
 8007e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e98:	4798      	blx	r3
 8007e9a:	3601      	adds	r6, #1
 8007e9c:	e7ee      	b.n	8007e7c <__libc_init_array+0xc>
 8007e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ea2:	4798      	blx	r3
 8007ea4:	3601      	adds	r6, #1
 8007ea6:	e7f2      	b.n	8007e8e <__libc_init_array+0x1e>
 8007ea8:	0800d7f4 	.word	0x0800d7f4
 8007eac:	0800d7f4 	.word	0x0800d7f4
 8007eb0:	0800d7f4 	.word	0x0800d7f4
 8007eb4:	0800d7f8 	.word	0x0800d7f8

08007eb8 <memcpy>:
 8007eb8:	440a      	add	r2, r1
 8007eba:	4291      	cmp	r1, r2
 8007ebc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ec0:	d100      	bne.n	8007ec4 <memcpy+0xc>
 8007ec2:	4770      	bx	lr
 8007ec4:	b510      	push	{r4, lr}
 8007ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007eca:	4291      	cmp	r1, r2
 8007ecc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ed0:	d1f9      	bne.n	8007ec6 <memcpy+0xe>
 8007ed2:	bd10      	pop	{r4, pc}

08007ed4 <memset>:
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	4402      	add	r2, r0
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d100      	bne.n	8007ede <memset+0xa>
 8007edc:	4770      	bx	lr
 8007ede:	f803 1b01 	strb.w	r1, [r3], #1
 8007ee2:	e7f9      	b.n	8007ed8 <memset+0x4>

08007ee4 <__cvt>:
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eea:	461f      	mov	r7, r3
 8007eec:	bfbb      	ittet	lt
 8007eee:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007ef2:	461f      	movlt	r7, r3
 8007ef4:	2300      	movge	r3, #0
 8007ef6:	232d      	movlt	r3, #45	; 0x2d
 8007ef8:	b088      	sub	sp, #32
 8007efa:	4614      	mov	r4, r2
 8007efc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007efe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007f00:	7013      	strb	r3, [r2, #0]
 8007f02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f04:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007f08:	f023 0820 	bic.w	r8, r3, #32
 8007f0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f10:	d005      	beq.n	8007f1e <__cvt+0x3a>
 8007f12:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007f16:	d100      	bne.n	8007f1a <__cvt+0x36>
 8007f18:	3501      	adds	r5, #1
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	e000      	b.n	8007f20 <__cvt+0x3c>
 8007f1e:	2303      	movs	r3, #3
 8007f20:	aa07      	add	r2, sp, #28
 8007f22:	9204      	str	r2, [sp, #16]
 8007f24:	aa06      	add	r2, sp, #24
 8007f26:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007f2a:	e9cd 3500 	strd	r3, r5, [sp]
 8007f2e:	4622      	mov	r2, r4
 8007f30:	463b      	mov	r3, r7
 8007f32:	f001 fed1 	bl	8009cd8 <_dtoa_r>
 8007f36:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007f3a:	4606      	mov	r6, r0
 8007f3c:	d102      	bne.n	8007f44 <__cvt+0x60>
 8007f3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f40:	07db      	lsls	r3, r3, #31
 8007f42:	d522      	bpl.n	8007f8a <__cvt+0xa6>
 8007f44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f48:	eb06 0905 	add.w	r9, r6, r5
 8007f4c:	d110      	bne.n	8007f70 <__cvt+0x8c>
 8007f4e:	7833      	ldrb	r3, [r6, #0]
 8007f50:	2b30      	cmp	r3, #48	; 0x30
 8007f52:	d10a      	bne.n	8007f6a <__cvt+0x86>
 8007f54:	2200      	movs	r2, #0
 8007f56:	2300      	movs	r3, #0
 8007f58:	4620      	mov	r0, r4
 8007f5a:	4639      	mov	r1, r7
 8007f5c:	f7f8 fd24 	bl	80009a8 <__aeabi_dcmpeq>
 8007f60:	b918      	cbnz	r0, 8007f6a <__cvt+0x86>
 8007f62:	f1c5 0501 	rsb	r5, r5, #1
 8007f66:	f8ca 5000 	str.w	r5, [sl]
 8007f6a:	f8da 3000 	ldr.w	r3, [sl]
 8007f6e:	4499      	add	r9, r3
 8007f70:	2200      	movs	r2, #0
 8007f72:	2300      	movs	r3, #0
 8007f74:	4620      	mov	r0, r4
 8007f76:	4639      	mov	r1, r7
 8007f78:	f7f8 fd16 	bl	80009a8 <__aeabi_dcmpeq>
 8007f7c:	b108      	cbz	r0, 8007f82 <__cvt+0x9e>
 8007f7e:	f8cd 901c 	str.w	r9, [sp, #28]
 8007f82:	2230      	movs	r2, #48	; 0x30
 8007f84:	9b07      	ldr	r3, [sp, #28]
 8007f86:	454b      	cmp	r3, r9
 8007f88:	d307      	bcc.n	8007f9a <__cvt+0xb6>
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	9b07      	ldr	r3, [sp, #28]
 8007f8e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007f90:	1b9b      	subs	r3, r3, r6
 8007f92:	6013      	str	r3, [r2, #0]
 8007f94:	b008      	add	sp, #32
 8007f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f9a:	1c59      	adds	r1, r3, #1
 8007f9c:	9107      	str	r1, [sp, #28]
 8007f9e:	701a      	strb	r2, [r3, #0]
 8007fa0:	e7f0      	b.n	8007f84 <__cvt+0xa0>

08007fa2 <__exponent>:
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fa6:	2900      	cmp	r1, #0
 8007fa8:	f803 2b02 	strb.w	r2, [r3], #2
 8007fac:	bfb6      	itet	lt
 8007fae:	222d      	movlt	r2, #45	; 0x2d
 8007fb0:	222b      	movge	r2, #43	; 0x2b
 8007fb2:	4249      	neglt	r1, r1
 8007fb4:	2909      	cmp	r1, #9
 8007fb6:	7042      	strb	r2, [r0, #1]
 8007fb8:	dd2b      	ble.n	8008012 <__exponent+0x70>
 8007fba:	f10d 0407 	add.w	r4, sp, #7
 8007fbe:	46a4      	mov	ip, r4
 8007fc0:	270a      	movs	r7, #10
 8007fc2:	fb91 f6f7 	sdiv	r6, r1, r7
 8007fc6:	460a      	mov	r2, r1
 8007fc8:	46a6      	mov	lr, r4
 8007fca:	fb07 1516 	mls	r5, r7, r6, r1
 8007fce:	2a63      	cmp	r2, #99	; 0x63
 8007fd0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007fd4:	4631      	mov	r1, r6
 8007fd6:	f104 34ff 	add.w	r4, r4, #4294967295
 8007fda:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007fde:	dcf0      	bgt.n	8007fc2 <__exponent+0x20>
 8007fe0:	3130      	adds	r1, #48	; 0x30
 8007fe2:	f1ae 0502 	sub.w	r5, lr, #2
 8007fe6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007fea:	4629      	mov	r1, r5
 8007fec:	1c44      	adds	r4, r0, #1
 8007fee:	4561      	cmp	r1, ip
 8007ff0:	d30a      	bcc.n	8008008 <__exponent+0x66>
 8007ff2:	f10d 0209 	add.w	r2, sp, #9
 8007ff6:	eba2 020e 	sub.w	r2, r2, lr
 8007ffa:	4565      	cmp	r5, ip
 8007ffc:	bf88      	it	hi
 8007ffe:	2200      	movhi	r2, #0
 8008000:	4413      	add	r3, r2
 8008002:	1a18      	subs	r0, r3, r0
 8008004:	b003      	add	sp, #12
 8008006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008008:	f811 2b01 	ldrb.w	r2, [r1], #1
 800800c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008010:	e7ed      	b.n	8007fee <__exponent+0x4c>
 8008012:	2330      	movs	r3, #48	; 0x30
 8008014:	3130      	adds	r1, #48	; 0x30
 8008016:	7083      	strb	r3, [r0, #2]
 8008018:	70c1      	strb	r1, [r0, #3]
 800801a:	1d03      	adds	r3, r0, #4
 800801c:	e7f1      	b.n	8008002 <__exponent+0x60>
	...

08008020 <_printf_float>:
 8008020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008024:	b091      	sub	sp, #68	; 0x44
 8008026:	460c      	mov	r4, r1
 8008028:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800802c:	4616      	mov	r6, r2
 800802e:	461f      	mov	r7, r3
 8008030:	4605      	mov	r5, r0
 8008032:	f003 f959 	bl	800b2e8 <_localeconv_r>
 8008036:	6803      	ldr	r3, [r0, #0]
 8008038:	4618      	mov	r0, r3
 800803a:	9309      	str	r3, [sp, #36]	; 0x24
 800803c:	f7f8 f888 	bl	8000150 <strlen>
 8008040:	2300      	movs	r3, #0
 8008042:	930e      	str	r3, [sp, #56]	; 0x38
 8008044:	f8d8 3000 	ldr.w	r3, [r8]
 8008048:	900a      	str	r0, [sp, #40]	; 0x28
 800804a:	3307      	adds	r3, #7
 800804c:	f023 0307 	bic.w	r3, r3, #7
 8008050:	f103 0208 	add.w	r2, r3, #8
 8008054:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008058:	f8d4 b000 	ldr.w	fp, [r4]
 800805c:	f8c8 2000 	str.w	r2, [r8]
 8008060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008064:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008068:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800806c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008070:	930b      	str	r3, [sp, #44]	; 0x2c
 8008072:	f04f 32ff 	mov.w	r2, #4294967295
 8008076:	4640      	mov	r0, r8
 8008078:	4b9c      	ldr	r3, [pc, #624]	; (80082ec <_printf_float+0x2cc>)
 800807a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800807c:	f7f8 fcc6 	bl	8000a0c <__aeabi_dcmpun>
 8008080:	bb70      	cbnz	r0, 80080e0 <_printf_float+0xc0>
 8008082:	f04f 32ff 	mov.w	r2, #4294967295
 8008086:	4640      	mov	r0, r8
 8008088:	4b98      	ldr	r3, [pc, #608]	; (80082ec <_printf_float+0x2cc>)
 800808a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800808c:	f7f8 fca0 	bl	80009d0 <__aeabi_dcmple>
 8008090:	bb30      	cbnz	r0, 80080e0 <_printf_float+0xc0>
 8008092:	2200      	movs	r2, #0
 8008094:	2300      	movs	r3, #0
 8008096:	4640      	mov	r0, r8
 8008098:	4651      	mov	r1, sl
 800809a:	f7f8 fc8f 	bl	80009bc <__aeabi_dcmplt>
 800809e:	b110      	cbz	r0, 80080a6 <_printf_float+0x86>
 80080a0:	232d      	movs	r3, #45	; 0x2d
 80080a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080a6:	4b92      	ldr	r3, [pc, #584]	; (80082f0 <_printf_float+0x2d0>)
 80080a8:	4892      	ldr	r0, [pc, #584]	; (80082f4 <_printf_float+0x2d4>)
 80080aa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80080ae:	bf94      	ite	ls
 80080b0:	4698      	movls	r8, r3
 80080b2:	4680      	movhi	r8, r0
 80080b4:	2303      	movs	r3, #3
 80080b6:	f04f 0a00 	mov.w	sl, #0
 80080ba:	6123      	str	r3, [r4, #16]
 80080bc:	f02b 0304 	bic.w	r3, fp, #4
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	4633      	mov	r3, r6
 80080c4:	4621      	mov	r1, r4
 80080c6:	4628      	mov	r0, r5
 80080c8:	9700      	str	r7, [sp, #0]
 80080ca:	aa0f      	add	r2, sp, #60	; 0x3c
 80080cc:	f000 f9d4 	bl	8008478 <_printf_common>
 80080d0:	3001      	adds	r0, #1
 80080d2:	f040 8090 	bne.w	80081f6 <_printf_float+0x1d6>
 80080d6:	f04f 30ff 	mov.w	r0, #4294967295
 80080da:	b011      	add	sp, #68	; 0x44
 80080dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080e0:	4642      	mov	r2, r8
 80080e2:	4653      	mov	r3, sl
 80080e4:	4640      	mov	r0, r8
 80080e6:	4651      	mov	r1, sl
 80080e8:	f7f8 fc90 	bl	8000a0c <__aeabi_dcmpun>
 80080ec:	b148      	cbz	r0, 8008102 <_printf_float+0xe2>
 80080ee:	f1ba 0f00 	cmp.w	sl, #0
 80080f2:	bfb8      	it	lt
 80080f4:	232d      	movlt	r3, #45	; 0x2d
 80080f6:	4880      	ldr	r0, [pc, #512]	; (80082f8 <_printf_float+0x2d8>)
 80080f8:	bfb8      	it	lt
 80080fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80080fe:	4b7f      	ldr	r3, [pc, #508]	; (80082fc <_printf_float+0x2dc>)
 8008100:	e7d3      	b.n	80080aa <_printf_float+0x8a>
 8008102:	6863      	ldr	r3, [r4, #4]
 8008104:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008108:	1c5a      	adds	r2, r3, #1
 800810a:	d142      	bne.n	8008192 <_printf_float+0x172>
 800810c:	2306      	movs	r3, #6
 800810e:	6063      	str	r3, [r4, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	9206      	str	r2, [sp, #24]
 8008114:	aa0e      	add	r2, sp, #56	; 0x38
 8008116:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800811a:	aa0d      	add	r2, sp, #52	; 0x34
 800811c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008120:	9203      	str	r2, [sp, #12]
 8008122:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008126:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800812a:	6023      	str	r3, [r4, #0]
 800812c:	6863      	ldr	r3, [r4, #4]
 800812e:	4642      	mov	r2, r8
 8008130:	9300      	str	r3, [sp, #0]
 8008132:	4628      	mov	r0, r5
 8008134:	4653      	mov	r3, sl
 8008136:	910b      	str	r1, [sp, #44]	; 0x2c
 8008138:	f7ff fed4 	bl	8007ee4 <__cvt>
 800813c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800813e:	4680      	mov	r8, r0
 8008140:	2947      	cmp	r1, #71	; 0x47
 8008142:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008144:	d108      	bne.n	8008158 <_printf_float+0x138>
 8008146:	1cc8      	adds	r0, r1, #3
 8008148:	db02      	blt.n	8008150 <_printf_float+0x130>
 800814a:	6863      	ldr	r3, [r4, #4]
 800814c:	4299      	cmp	r1, r3
 800814e:	dd40      	ble.n	80081d2 <_printf_float+0x1b2>
 8008150:	f1a9 0902 	sub.w	r9, r9, #2
 8008154:	fa5f f989 	uxtb.w	r9, r9
 8008158:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800815c:	d81f      	bhi.n	800819e <_printf_float+0x17e>
 800815e:	464a      	mov	r2, r9
 8008160:	3901      	subs	r1, #1
 8008162:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008166:	910d      	str	r1, [sp, #52]	; 0x34
 8008168:	f7ff ff1b 	bl	8007fa2 <__exponent>
 800816c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800816e:	4682      	mov	sl, r0
 8008170:	1813      	adds	r3, r2, r0
 8008172:	2a01      	cmp	r2, #1
 8008174:	6123      	str	r3, [r4, #16]
 8008176:	dc02      	bgt.n	800817e <_printf_float+0x15e>
 8008178:	6822      	ldr	r2, [r4, #0]
 800817a:	07d2      	lsls	r2, r2, #31
 800817c:	d501      	bpl.n	8008182 <_printf_float+0x162>
 800817e:	3301      	adds	r3, #1
 8008180:	6123      	str	r3, [r4, #16]
 8008182:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008186:	2b00      	cmp	r3, #0
 8008188:	d09b      	beq.n	80080c2 <_printf_float+0xa2>
 800818a:	232d      	movs	r3, #45	; 0x2d
 800818c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008190:	e797      	b.n	80080c2 <_printf_float+0xa2>
 8008192:	2947      	cmp	r1, #71	; 0x47
 8008194:	d1bc      	bne.n	8008110 <_printf_float+0xf0>
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1ba      	bne.n	8008110 <_printf_float+0xf0>
 800819a:	2301      	movs	r3, #1
 800819c:	e7b7      	b.n	800810e <_printf_float+0xee>
 800819e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80081a2:	d118      	bne.n	80081d6 <_printf_float+0x1b6>
 80081a4:	2900      	cmp	r1, #0
 80081a6:	6863      	ldr	r3, [r4, #4]
 80081a8:	dd0b      	ble.n	80081c2 <_printf_float+0x1a2>
 80081aa:	6121      	str	r1, [r4, #16]
 80081ac:	b913      	cbnz	r3, 80081b4 <_printf_float+0x194>
 80081ae:	6822      	ldr	r2, [r4, #0]
 80081b0:	07d0      	lsls	r0, r2, #31
 80081b2:	d502      	bpl.n	80081ba <_printf_float+0x19a>
 80081b4:	3301      	adds	r3, #1
 80081b6:	440b      	add	r3, r1
 80081b8:	6123      	str	r3, [r4, #16]
 80081ba:	f04f 0a00 	mov.w	sl, #0
 80081be:	65a1      	str	r1, [r4, #88]	; 0x58
 80081c0:	e7df      	b.n	8008182 <_printf_float+0x162>
 80081c2:	b913      	cbnz	r3, 80081ca <_printf_float+0x1aa>
 80081c4:	6822      	ldr	r2, [r4, #0]
 80081c6:	07d2      	lsls	r2, r2, #31
 80081c8:	d501      	bpl.n	80081ce <_printf_float+0x1ae>
 80081ca:	3302      	adds	r3, #2
 80081cc:	e7f4      	b.n	80081b8 <_printf_float+0x198>
 80081ce:	2301      	movs	r3, #1
 80081d0:	e7f2      	b.n	80081b8 <_printf_float+0x198>
 80081d2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80081d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081d8:	4299      	cmp	r1, r3
 80081da:	db05      	blt.n	80081e8 <_printf_float+0x1c8>
 80081dc:	6823      	ldr	r3, [r4, #0]
 80081de:	6121      	str	r1, [r4, #16]
 80081e0:	07d8      	lsls	r0, r3, #31
 80081e2:	d5ea      	bpl.n	80081ba <_printf_float+0x19a>
 80081e4:	1c4b      	adds	r3, r1, #1
 80081e6:	e7e7      	b.n	80081b8 <_printf_float+0x198>
 80081e8:	2900      	cmp	r1, #0
 80081ea:	bfcc      	ite	gt
 80081ec:	2201      	movgt	r2, #1
 80081ee:	f1c1 0202 	rsble	r2, r1, #2
 80081f2:	4413      	add	r3, r2
 80081f4:	e7e0      	b.n	80081b8 <_printf_float+0x198>
 80081f6:	6823      	ldr	r3, [r4, #0]
 80081f8:	055a      	lsls	r2, r3, #21
 80081fa:	d407      	bmi.n	800820c <_printf_float+0x1ec>
 80081fc:	6923      	ldr	r3, [r4, #16]
 80081fe:	4642      	mov	r2, r8
 8008200:	4631      	mov	r1, r6
 8008202:	4628      	mov	r0, r5
 8008204:	47b8      	blx	r7
 8008206:	3001      	adds	r0, #1
 8008208:	d12b      	bne.n	8008262 <_printf_float+0x242>
 800820a:	e764      	b.n	80080d6 <_printf_float+0xb6>
 800820c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008210:	f240 80dd 	bls.w	80083ce <_printf_float+0x3ae>
 8008214:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008218:	2200      	movs	r2, #0
 800821a:	2300      	movs	r3, #0
 800821c:	f7f8 fbc4 	bl	80009a8 <__aeabi_dcmpeq>
 8008220:	2800      	cmp	r0, #0
 8008222:	d033      	beq.n	800828c <_printf_float+0x26c>
 8008224:	2301      	movs	r3, #1
 8008226:	4631      	mov	r1, r6
 8008228:	4628      	mov	r0, r5
 800822a:	4a35      	ldr	r2, [pc, #212]	; (8008300 <_printf_float+0x2e0>)
 800822c:	47b8      	blx	r7
 800822e:	3001      	adds	r0, #1
 8008230:	f43f af51 	beq.w	80080d6 <_printf_float+0xb6>
 8008234:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008238:	429a      	cmp	r2, r3
 800823a:	db02      	blt.n	8008242 <_printf_float+0x222>
 800823c:	6823      	ldr	r3, [r4, #0]
 800823e:	07d8      	lsls	r0, r3, #31
 8008240:	d50f      	bpl.n	8008262 <_printf_float+0x242>
 8008242:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008246:	4631      	mov	r1, r6
 8008248:	4628      	mov	r0, r5
 800824a:	47b8      	blx	r7
 800824c:	3001      	adds	r0, #1
 800824e:	f43f af42 	beq.w	80080d6 <_printf_float+0xb6>
 8008252:	f04f 0800 	mov.w	r8, #0
 8008256:	f104 091a 	add.w	r9, r4, #26
 800825a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800825c:	3b01      	subs	r3, #1
 800825e:	4543      	cmp	r3, r8
 8008260:	dc09      	bgt.n	8008276 <_printf_float+0x256>
 8008262:	6823      	ldr	r3, [r4, #0]
 8008264:	079b      	lsls	r3, r3, #30
 8008266:	f100 8102 	bmi.w	800846e <_printf_float+0x44e>
 800826a:	68e0      	ldr	r0, [r4, #12]
 800826c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800826e:	4298      	cmp	r0, r3
 8008270:	bfb8      	it	lt
 8008272:	4618      	movlt	r0, r3
 8008274:	e731      	b.n	80080da <_printf_float+0xba>
 8008276:	2301      	movs	r3, #1
 8008278:	464a      	mov	r2, r9
 800827a:	4631      	mov	r1, r6
 800827c:	4628      	mov	r0, r5
 800827e:	47b8      	blx	r7
 8008280:	3001      	adds	r0, #1
 8008282:	f43f af28 	beq.w	80080d6 <_printf_float+0xb6>
 8008286:	f108 0801 	add.w	r8, r8, #1
 800828a:	e7e6      	b.n	800825a <_printf_float+0x23a>
 800828c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800828e:	2b00      	cmp	r3, #0
 8008290:	dc38      	bgt.n	8008304 <_printf_float+0x2e4>
 8008292:	2301      	movs	r3, #1
 8008294:	4631      	mov	r1, r6
 8008296:	4628      	mov	r0, r5
 8008298:	4a19      	ldr	r2, [pc, #100]	; (8008300 <_printf_float+0x2e0>)
 800829a:	47b8      	blx	r7
 800829c:	3001      	adds	r0, #1
 800829e:	f43f af1a 	beq.w	80080d6 <_printf_float+0xb6>
 80082a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80082a6:	4313      	orrs	r3, r2
 80082a8:	d102      	bne.n	80082b0 <_printf_float+0x290>
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	07d9      	lsls	r1, r3, #31
 80082ae:	d5d8      	bpl.n	8008262 <_printf_float+0x242>
 80082b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082b4:	4631      	mov	r1, r6
 80082b6:	4628      	mov	r0, r5
 80082b8:	47b8      	blx	r7
 80082ba:	3001      	adds	r0, #1
 80082bc:	f43f af0b 	beq.w	80080d6 <_printf_float+0xb6>
 80082c0:	f04f 0900 	mov.w	r9, #0
 80082c4:	f104 0a1a 	add.w	sl, r4, #26
 80082c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082ca:	425b      	negs	r3, r3
 80082cc:	454b      	cmp	r3, r9
 80082ce:	dc01      	bgt.n	80082d4 <_printf_float+0x2b4>
 80082d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082d2:	e794      	b.n	80081fe <_printf_float+0x1de>
 80082d4:	2301      	movs	r3, #1
 80082d6:	4652      	mov	r2, sl
 80082d8:	4631      	mov	r1, r6
 80082da:	4628      	mov	r0, r5
 80082dc:	47b8      	blx	r7
 80082de:	3001      	adds	r0, #1
 80082e0:	f43f aef9 	beq.w	80080d6 <_printf_float+0xb6>
 80082e4:	f109 0901 	add.w	r9, r9, #1
 80082e8:	e7ee      	b.n	80082c8 <_printf_float+0x2a8>
 80082ea:	bf00      	nop
 80082ec:	7fefffff 	.word	0x7fefffff
 80082f0:	0800d34c 	.word	0x0800d34c
 80082f4:	0800d350 	.word	0x0800d350
 80082f8:	0800d358 	.word	0x0800d358
 80082fc:	0800d354 	.word	0x0800d354
 8008300:	0800d35c 	.word	0x0800d35c
 8008304:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008306:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008308:	429a      	cmp	r2, r3
 800830a:	bfa8      	it	ge
 800830c:	461a      	movge	r2, r3
 800830e:	2a00      	cmp	r2, #0
 8008310:	4691      	mov	r9, r2
 8008312:	dc37      	bgt.n	8008384 <_printf_float+0x364>
 8008314:	f04f 0b00 	mov.w	fp, #0
 8008318:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800831c:	f104 021a 	add.w	r2, r4, #26
 8008320:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008324:	ebaa 0309 	sub.w	r3, sl, r9
 8008328:	455b      	cmp	r3, fp
 800832a:	dc33      	bgt.n	8008394 <_printf_float+0x374>
 800832c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008330:	429a      	cmp	r2, r3
 8008332:	db3b      	blt.n	80083ac <_printf_float+0x38c>
 8008334:	6823      	ldr	r3, [r4, #0]
 8008336:	07da      	lsls	r2, r3, #31
 8008338:	d438      	bmi.n	80083ac <_printf_float+0x38c>
 800833a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800833c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800833e:	eba3 020a 	sub.w	r2, r3, sl
 8008342:	eba3 0901 	sub.w	r9, r3, r1
 8008346:	4591      	cmp	r9, r2
 8008348:	bfa8      	it	ge
 800834a:	4691      	movge	r9, r2
 800834c:	f1b9 0f00 	cmp.w	r9, #0
 8008350:	dc34      	bgt.n	80083bc <_printf_float+0x39c>
 8008352:	f04f 0800 	mov.w	r8, #0
 8008356:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800835a:	f104 0a1a 	add.w	sl, r4, #26
 800835e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008362:	1a9b      	subs	r3, r3, r2
 8008364:	eba3 0309 	sub.w	r3, r3, r9
 8008368:	4543      	cmp	r3, r8
 800836a:	f77f af7a 	ble.w	8008262 <_printf_float+0x242>
 800836e:	2301      	movs	r3, #1
 8008370:	4652      	mov	r2, sl
 8008372:	4631      	mov	r1, r6
 8008374:	4628      	mov	r0, r5
 8008376:	47b8      	blx	r7
 8008378:	3001      	adds	r0, #1
 800837a:	f43f aeac 	beq.w	80080d6 <_printf_float+0xb6>
 800837e:	f108 0801 	add.w	r8, r8, #1
 8008382:	e7ec      	b.n	800835e <_printf_float+0x33e>
 8008384:	4613      	mov	r3, r2
 8008386:	4631      	mov	r1, r6
 8008388:	4642      	mov	r2, r8
 800838a:	4628      	mov	r0, r5
 800838c:	47b8      	blx	r7
 800838e:	3001      	adds	r0, #1
 8008390:	d1c0      	bne.n	8008314 <_printf_float+0x2f4>
 8008392:	e6a0      	b.n	80080d6 <_printf_float+0xb6>
 8008394:	2301      	movs	r3, #1
 8008396:	4631      	mov	r1, r6
 8008398:	4628      	mov	r0, r5
 800839a:	920b      	str	r2, [sp, #44]	; 0x2c
 800839c:	47b8      	blx	r7
 800839e:	3001      	adds	r0, #1
 80083a0:	f43f ae99 	beq.w	80080d6 <_printf_float+0xb6>
 80083a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083a6:	f10b 0b01 	add.w	fp, fp, #1
 80083aa:	e7b9      	b.n	8008320 <_printf_float+0x300>
 80083ac:	4631      	mov	r1, r6
 80083ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083b2:	4628      	mov	r0, r5
 80083b4:	47b8      	blx	r7
 80083b6:	3001      	adds	r0, #1
 80083b8:	d1bf      	bne.n	800833a <_printf_float+0x31a>
 80083ba:	e68c      	b.n	80080d6 <_printf_float+0xb6>
 80083bc:	464b      	mov	r3, r9
 80083be:	4631      	mov	r1, r6
 80083c0:	4628      	mov	r0, r5
 80083c2:	eb08 020a 	add.w	r2, r8, sl
 80083c6:	47b8      	blx	r7
 80083c8:	3001      	adds	r0, #1
 80083ca:	d1c2      	bne.n	8008352 <_printf_float+0x332>
 80083cc:	e683      	b.n	80080d6 <_printf_float+0xb6>
 80083ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083d0:	2a01      	cmp	r2, #1
 80083d2:	dc01      	bgt.n	80083d8 <_printf_float+0x3b8>
 80083d4:	07db      	lsls	r3, r3, #31
 80083d6:	d537      	bpl.n	8008448 <_printf_float+0x428>
 80083d8:	2301      	movs	r3, #1
 80083da:	4642      	mov	r2, r8
 80083dc:	4631      	mov	r1, r6
 80083de:	4628      	mov	r0, r5
 80083e0:	47b8      	blx	r7
 80083e2:	3001      	adds	r0, #1
 80083e4:	f43f ae77 	beq.w	80080d6 <_printf_float+0xb6>
 80083e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083ec:	4631      	mov	r1, r6
 80083ee:	4628      	mov	r0, r5
 80083f0:	47b8      	blx	r7
 80083f2:	3001      	adds	r0, #1
 80083f4:	f43f ae6f 	beq.w	80080d6 <_printf_float+0xb6>
 80083f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083fc:	2200      	movs	r2, #0
 80083fe:	2300      	movs	r3, #0
 8008400:	f7f8 fad2 	bl	80009a8 <__aeabi_dcmpeq>
 8008404:	b9d8      	cbnz	r0, 800843e <_printf_float+0x41e>
 8008406:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008408:	f108 0201 	add.w	r2, r8, #1
 800840c:	3b01      	subs	r3, #1
 800840e:	4631      	mov	r1, r6
 8008410:	4628      	mov	r0, r5
 8008412:	47b8      	blx	r7
 8008414:	3001      	adds	r0, #1
 8008416:	d10e      	bne.n	8008436 <_printf_float+0x416>
 8008418:	e65d      	b.n	80080d6 <_printf_float+0xb6>
 800841a:	2301      	movs	r3, #1
 800841c:	464a      	mov	r2, r9
 800841e:	4631      	mov	r1, r6
 8008420:	4628      	mov	r0, r5
 8008422:	47b8      	blx	r7
 8008424:	3001      	adds	r0, #1
 8008426:	f43f ae56 	beq.w	80080d6 <_printf_float+0xb6>
 800842a:	f108 0801 	add.w	r8, r8, #1
 800842e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008430:	3b01      	subs	r3, #1
 8008432:	4543      	cmp	r3, r8
 8008434:	dcf1      	bgt.n	800841a <_printf_float+0x3fa>
 8008436:	4653      	mov	r3, sl
 8008438:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800843c:	e6e0      	b.n	8008200 <_printf_float+0x1e0>
 800843e:	f04f 0800 	mov.w	r8, #0
 8008442:	f104 091a 	add.w	r9, r4, #26
 8008446:	e7f2      	b.n	800842e <_printf_float+0x40e>
 8008448:	2301      	movs	r3, #1
 800844a:	4642      	mov	r2, r8
 800844c:	e7df      	b.n	800840e <_printf_float+0x3ee>
 800844e:	2301      	movs	r3, #1
 8008450:	464a      	mov	r2, r9
 8008452:	4631      	mov	r1, r6
 8008454:	4628      	mov	r0, r5
 8008456:	47b8      	blx	r7
 8008458:	3001      	adds	r0, #1
 800845a:	f43f ae3c 	beq.w	80080d6 <_printf_float+0xb6>
 800845e:	f108 0801 	add.w	r8, r8, #1
 8008462:	68e3      	ldr	r3, [r4, #12]
 8008464:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008466:	1a5b      	subs	r3, r3, r1
 8008468:	4543      	cmp	r3, r8
 800846a:	dcf0      	bgt.n	800844e <_printf_float+0x42e>
 800846c:	e6fd      	b.n	800826a <_printf_float+0x24a>
 800846e:	f04f 0800 	mov.w	r8, #0
 8008472:	f104 0919 	add.w	r9, r4, #25
 8008476:	e7f4      	b.n	8008462 <_printf_float+0x442>

08008478 <_printf_common>:
 8008478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800847c:	4616      	mov	r6, r2
 800847e:	4699      	mov	r9, r3
 8008480:	688a      	ldr	r2, [r1, #8]
 8008482:	690b      	ldr	r3, [r1, #16]
 8008484:	4607      	mov	r7, r0
 8008486:	4293      	cmp	r3, r2
 8008488:	bfb8      	it	lt
 800848a:	4613      	movlt	r3, r2
 800848c:	6033      	str	r3, [r6, #0]
 800848e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008492:	460c      	mov	r4, r1
 8008494:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008498:	b10a      	cbz	r2, 800849e <_printf_common+0x26>
 800849a:	3301      	adds	r3, #1
 800849c:	6033      	str	r3, [r6, #0]
 800849e:	6823      	ldr	r3, [r4, #0]
 80084a0:	0699      	lsls	r1, r3, #26
 80084a2:	bf42      	ittt	mi
 80084a4:	6833      	ldrmi	r3, [r6, #0]
 80084a6:	3302      	addmi	r3, #2
 80084a8:	6033      	strmi	r3, [r6, #0]
 80084aa:	6825      	ldr	r5, [r4, #0]
 80084ac:	f015 0506 	ands.w	r5, r5, #6
 80084b0:	d106      	bne.n	80084c0 <_printf_common+0x48>
 80084b2:	f104 0a19 	add.w	sl, r4, #25
 80084b6:	68e3      	ldr	r3, [r4, #12]
 80084b8:	6832      	ldr	r2, [r6, #0]
 80084ba:	1a9b      	subs	r3, r3, r2
 80084bc:	42ab      	cmp	r3, r5
 80084be:	dc28      	bgt.n	8008512 <_printf_common+0x9a>
 80084c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084c4:	1e13      	subs	r3, r2, #0
 80084c6:	6822      	ldr	r2, [r4, #0]
 80084c8:	bf18      	it	ne
 80084ca:	2301      	movne	r3, #1
 80084cc:	0692      	lsls	r2, r2, #26
 80084ce:	d42d      	bmi.n	800852c <_printf_common+0xb4>
 80084d0:	4649      	mov	r1, r9
 80084d2:	4638      	mov	r0, r7
 80084d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084d8:	47c0      	blx	r8
 80084da:	3001      	adds	r0, #1
 80084dc:	d020      	beq.n	8008520 <_printf_common+0xa8>
 80084de:	6823      	ldr	r3, [r4, #0]
 80084e0:	68e5      	ldr	r5, [r4, #12]
 80084e2:	f003 0306 	and.w	r3, r3, #6
 80084e6:	2b04      	cmp	r3, #4
 80084e8:	bf18      	it	ne
 80084ea:	2500      	movne	r5, #0
 80084ec:	6832      	ldr	r2, [r6, #0]
 80084ee:	f04f 0600 	mov.w	r6, #0
 80084f2:	68a3      	ldr	r3, [r4, #8]
 80084f4:	bf08      	it	eq
 80084f6:	1aad      	subeq	r5, r5, r2
 80084f8:	6922      	ldr	r2, [r4, #16]
 80084fa:	bf08      	it	eq
 80084fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008500:	4293      	cmp	r3, r2
 8008502:	bfc4      	itt	gt
 8008504:	1a9b      	subgt	r3, r3, r2
 8008506:	18ed      	addgt	r5, r5, r3
 8008508:	341a      	adds	r4, #26
 800850a:	42b5      	cmp	r5, r6
 800850c:	d11a      	bne.n	8008544 <_printf_common+0xcc>
 800850e:	2000      	movs	r0, #0
 8008510:	e008      	b.n	8008524 <_printf_common+0xac>
 8008512:	2301      	movs	r3, #1
 8008514:	4652      	mov	r2, sl
 8008516:	4649      	mov	r1, r9
 8008518:	4638      	mov	r0, r7
 800851a:	47c0      	blx	r8
 800851c:	3001      	adds	r0, #1
 800851e:	d103      	bne.n	8008528 <_printf_common+0xb0>
 8008520:	f04f 30ff 	mov.w	r0, #4294967295
 8008524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008528:	3501      	adds	r5, #1
 800852a:	e7c4      	b.n	80084b6 <_printf_common+0x3e>
 800852c:	2030      	movs	r0, #48	; 0x30
 800852e:	18e1      	adds	r1, r4, r3
 8008530:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008534:	1c5a      	adds	r2, r3, #1
 8008536:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800853a:	4422      	add	r2, r4
 800853c:	3302      	adds	r3, #2
 800853e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008542:	e7c5      	b.n	80084d0 <_printf_common+0x58>
 8008544:	2301      	movs	r3, #1
 8008546:	4622      	mov	r2, r4
 8008548:	4649      	mov	r1, r9
 800854a:	4638      	mov	r0, r7
 800854c:	47c0      	blx	r8
 800854e:	3001      	adds	r0, #1
 8008550:	d0e6      	beq.n	8008520 <_printf_common+0xa8>
 8008552:	3601      	adds	r6, #1
 8008554:	e7d9      	b.n	800850a <_printf_common+0x92>
	...

08008558 <_printf_i>:
 8008558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800855c:	7e0f      	ldrb	r7, [r1, #24]
 800855e:	4691      	mov	r9, r2
 8008560:	2f78      	cmp	r7, #120	; 0x78
 8008562:	4680      	mov	r8, r0
 8008564:	460c      	mov	r4, r1
 8008566:	469a      	mov	sl, r3
 8008568:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800856a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800856e:	d807      	bhi.n	8008580 <_printf_i+0x28>
 8008570:	2f62      	cmp	r7, #98	; 0x62
 8008572:	d80a      	bhi.n	800858a <_printf_i+0x32>
 8008574:	2f00      	cmp	r7, #0
 8008576:	f000 80d9 	beq.w	800872c <_printf_i+0x1d4>
 800857a:	2f58      	cmp	r7, #88	; 0x58
 800857c:	f000 80a4 	beq.w	80086c8 <_printf_i+0x170>
 8008580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008584:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008588:	e03a      	b.n	8008600 <_printf_i+0xa8>
 800858a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800858e:	2b15      	cmp	r3, #21
 8008590:	d8f6      	bhi.n	8008580 <_printf_i+0x28>
 8008592:	a101      	add	r1, pc, #4	; (adr r1, 8008598 <_printf_i+0x40>)
 8008594:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008598:	080085f1 	.word	0x080085f1
 800859c:	08008605 	.word	0x08008605
 80085a0:	08008581 	.word	0x08008581
 80085a4:	08008581 	.word	0x08008581
 80085a8:	08008581 	.word	0x08008581
 80085ac:	08008581 	.word	0x08008581
 80085b0:	08008605 	.word	0x08008605
 80085b4:	08008581 	.word	0x08008581
 80085b8:	08008581 	.word	0x08008581
 80085bc:	08008581 	.word	0x08008581
 80085c0:	08008581 	.word	0x08008581
 80085c4:	08008713 	.word	0x08008713
 80085c8:	08008635 	.word	0x08008635
 80085cc:	080086f5 	.word	0x080086f5
 80085d0:	08008581 	.word	0x08008581
 80085d4:	08008581 	.word	0x08008581
 80085d8:	08008735 	.word	0x08008735
 80085dc:	08008581 	.word	0x08008581
 80085e0:	08008635 	.word	0x08008635
 80085e4:	08008581 	.word	0x08008581
 80085e8:	08008581 	.word	0x08008581
 80085ec:	080086fd 	.word	0x080086fd
 80085f0:	682b      	ldr	r3, [r5, #0]
 80085f2:	1d1a      	adds	r2, r3, #4
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	602a      	str	r2, [r5, #0]
 80085f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008600:	2301      	movs	r3, #1
 8008602:	e0a4      	b.n	800874e <_printf_i+0x1f6>
 8008604:	6820      	ldr	r0, [r4, #0]
 8008606:	6829      	ldr	r1, [r5, #0]
 8008608:	0606      	lsls	r6, r0, #24
 800860a:	f101 0304 	add.w	r3, r1, #4
 800860e:	d50a      	bpl.n	8008626 <_printf_i+0xce>
 8008610:	680e      	ldr	r6, [r1, #0]
 8008612:	602b      	str	r3, [r5, #0]
 8008614:	2e00      	cmp	r6, #0
 8008616:	da03      	bge.n	8008620 <_printf_i+0xc8>
 8008618:	232d      	movs	r3, #45	; 0x2d
 800861a:	4276      	negs	r6, r6
 800861c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008620:	230a      	movs	r3, #10
 8008622:	485e      	ldr	r0, [pc, #376]	; (800879c <_printf_i+0x244>)
 8008624:	e019      	b.n	800865a <_printf_i+0x102>
 8008626:	680e      	ldr	r6, [r1, #0]
 8008628:	f010 0f40 	tst.w	r0, #64	; 0x40
 800862c:	602b      	str	r3, [r5, #0]
 800862e:	bf18      	it	ne
 8008630:	b236      	sxthne	r6, r6
 8008632:	e7ef      	b.n	8008614 <_printf_i+0xbc>
 8008634:	682b      	ldr	r3, [r5, #0]
 8008636:	6820      	ldr	r0, [r4, #0]
 8008638:	1d19      	adds	r1, r3, #4
 800863a:	6029      	str	r1, [r5, #0]
 800863c:	0601      	lsls	r1, r0, #24
 800863e:	d501      	bpl.n	8008644 <_printf_i+0xec>
 8008640:	681e      	ldr	r6, [r3, #0]
 8008642:	e002      	b.n	800864a <_printf_i+0xf2>
 8008644:	0646      	lsls	r6, r0, #25
 8008646:	d5fb      	bpl.n	8008640 <_printf_i+0xe8>
 8008648:	881e      	ldrh	r6, [r3, #0]
 800864a:	2f6f      	cmp	r7, #111	; 0x6f
 800864c:	bf0c      	ite	eq
 800864e:	2308      	moveq	r3, #8
 8008650:	230a      	movne	r3, #10
 8008652:	4852      	ldr	r0, [pc, #328]	; (800879c <_printf_i+0x244>)
 8008654:	2100      	movs	r1, #0
 8008656:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800865a:	6865      	ldr	r5, [r4, #4]
 800865c:	2d00      	cmp	r5, #0
 800865e:	bfa8      	it	ge
 8008660:	6821      	ldrge	r1, [r4, #0]
 8008662:	60a5      	str	r5, [r4, #8]
 8008664:	bfa4      	itt	ge
 8008666:	f021 0104 	bicge.w	r1, r1, #4
 800866a:	6021      	strge	r1, [r4, #0]
 800866c:	b90e      	cbnz	r6, 8008672 <_printf_i+0x11a>
 800866e:	2d00      	cmp	r5, #0
 8008670:	d04d      	beq.n	800870e <_printf_i+0x1b6>
 8008672:	4615      	mov	r5, r2
 8008674:	fbb6 f1f3 	udiv	r1, r6, r3
 8008678:	fb03 6711 	mls	r7, r3, r1, r6
 800867c:	5dc7      	ldrb	r7, [r0, r7]
 800867e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008682:	4637      	mov	r7, r6
 8008684:	42bb      	cmp	r3, r7
 8008686:	460e      	mov	r6, r1
 8008688:	d9f4      	bls.n	8008674 <_printf_i+0x11c>
 800868a:	2b08      	cmp	r3, #8
 800868c:	d10b      	bne.n	80086a6 <_printf_i+0x14e>
 800868e:	6823      	ldr	r3, [r4, #0]
 8008690:	07de      	lsls	r6, r3, #31
 8008692:	d508      	bpl.n	80086a6 <_printf_i+0x14e>
 8008694:	6923      	ldr	r3, [r4, #16]
 8008696:	6861      	ldr	r1, [r4, #4]
 8008698:	4299      	cmp	r1, r3
 800869a:	bfde      	ittt	le
 800869c:	2330      	movle	r3, #48	; 0x30
 800869e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80086a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80086a6:	1b52      	subs	r2, r2, r5
 80086a8:	6122      	str	r2, [r4, #16]
 80086aa:	464b      	mov	r3, r9
 80086ac:	4621      	mov	r1, r4
 80086ae:	4640      	mov	r0, r8
 80086b0:	f8cd a000 	str.w	sl, [sp]
 80086b4:	aa03      	add	r2, sp, #12
 80086b6:	f7ff fedf 	bl	8008478 <_printf_common>
 80086ba:	3001      	adds	r0, #1
 80086bc:	d14c      	bne.n	8008758 <_printf_i+0x200>
 80086be:	f04f 30ff 	mov.w	r0, #4294967295
 80086c2:	b004      	add	sp, #16
 80086c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086c8:	4834      	ldr	r0, [pc, #208]	; (800879c <_printf_i+0x244>)
 80086ca:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80086ce:	6829      	ldr	r1, [r5, #0]
 80086d0:	6823      	ldr	r3, [r4, #0]
 80086d2:	f851 6b04 	ldr.w	r6, [r1], #4
 80086d6:	6029      	str	r1, [r5, #0]
 80086d8:	061d      	lsls	r5, r3, #24
 80086da:	d514      	bpl.n	8008706 <_printf_i+0x1ae>
 80086dc:	07df      	lsls	r7, r3, #31
 80086de:	bf44      	itt	mi
 80086e0:	f043 0320 	orrmi.w	r3, r3, #32
 80086e4:	6023      	strmi	r3, [r4, #0]
 80086e6:	b91e      	cbnz	r6, 80086f0 <_printf_i+0x198>
 80086e8:	6823      	ldr	r3, [r4, #0]
 80086ea:	f023 0320 	bic.w	r3, r3, #32
 80086ee:	6023      	str	r3, [r4, #0]
 80086f0:	2310      	movs	r3, #16
 80086f2:	e7af      	b.n	8008654 <_printf_i+0xfc>
 80086f4:	6823      	ldr	r3, [r4, #0]
 80086f6:	f043 0320 	orr.w	r3, r3, #32
 80086fa:	6023      	str	r3, [r4, #0]
 80086fc:	2378      	movs	r3, #120	; 0x78
 80086fe:	4828      	ldr	r0, [pc, #160]	; (80087a0 <_printf_i+0x248>)
 8008700:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008704:	e7e3      	b.n	80086ce <_printf_i+0x176>
 8008706:	0659      	lsls	r1, r3, #25
 8008708:	bf48      	it	mi
 800870a:	b2b6      	uxthmi	r6, r6
 800870c:	e7e6      	b.n	80086dc <_printf_i+0x184>
 800870e:	4615      	mov	r5, r2
 8008710:	e7bb      	b.n	800868a <_printf_i+0x132>
 8008712:	682b      	ldr	r3, [r5, #0]
 8008714:	6826      	ldr	r6, [r4, #0]
 8008716:	1d18      	adds	r0, r3, #4
 8008718:	6961      	ldr	r1, [r4, #20]
 800871a:	6028      	str	r0, [r5, #0]
 800871c:	0635      	lsls	r5, r6, #24
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	d501      	bpl.n	8008726 <_printf_i+0x1ce>
 8008722:	6019      	str	r1, [r3, #0]
 8008724:	e002      	b.n	800872c <_printf_i+0x1d4>
 8008726:	0670      	lsls	r0, r6, #25
 8008728:	d5fb      	bpl.n	8008722 <_printf_i+0x1ca>
 800872a:	8019      	strh	r1, [r3, #0]
 800872c:	2300      	movs	r3, #0
 800872e:	4615      	mov	r5, r2
 8008730:	6123      	str	r3, [r4, #16]
 8008732:	e7ba      	b.n	80086aa <_printf_i+0x152>
 8008734:	682b      	ldr	r3, [r5, #0]
 8008736:	2100      	movs	r1, #0
 8008738:	1d1a      	adds	r2, r3, #4
 800873a:	602a      	str	r2, [r5, #0]
 800873c:	681d      	ldr	r5, [r3, #0]
 800873e:	6862      	ldr	r2, [r4, #4]
 8008740:	4628      	mov	r0, r5
 8008742:	f002 fe57 	bl	800b3f4 <memchr>
 8008746:	b108      	cbz	r0, 800874c <_printf_i+0x1f4>
 8008748:	1b40      	subs	r0, r0, r5
 800874a:	6060      	str	r0, [r4, #4]
 800874c:	6863      	ldr	r3, [r4, #4]
 800874e:	6123      	str	r3, [r4, #16]
 8008750:	2300      	movs	r3, #0
 8008752:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008756:	e7a8      	b.n	80086aa <_printf_i+0x152>
 8008758:	462a      	mov	r2, r5
 800875a:	4649      	mov	r1, r9
 800875c:	4640      	mov	r0, r8
 800875e:	6923      	ldr	r3, [r4, #16]
 8008760:	47d0      	blx	sl
 8008762:	3001      	adds	r0, #1
 8008764:	d0ab      	beq.n	80086be <_printf_i+0x166>
 8008766:	6823      	ldr	r3, [r4, #0]
 8008768:	079b      	lsls	r3, r3, #30
 800876a:	d413      	bmi.n	8008794 <_printf_i+0x23c>
 800876c:	68e0      	ldr	r0, [r4, #12]
 800876e:	9b03      	ldr	r3, [sp, #12]
 8008770:	4298      	cmp	r0, r3
 8008772:	bfb8      	it	lt
 8008774:	4618      	movlt	r0, r3
 8008776:	e7a4      	b.n	80086c2 <_printf_i+0x16a>
 8008778:	2301      	movs	r3, #1
 800877a:	4632      	mov	r2, r6
 800877c:	4649      	mov	r1, r9
 800877e:	4640      	mov	r0, r8
 8008780:	47d0      	blx	sl
 8008782:	3001      	adds	r0, #1
 8008784:	d09b      	beq.n	80086be <_printf_i+0x166>
 8008786:	3501      	adds	r5, #1
 8008788:	68e3      	ldr	r3, [r4, #12]
 800878a:	9903      	ldr	r1, [sp, #12]
 800878c:	1a5b      	subs	r3, r3, r1
 800878e:	42ab      	cmp	r3, r5
 8008790:	dcf2      	bgt.n	8008778 <_printf_i+0x220>
 8008792:	e7eb      	b.n	800876c <_printf_i+0x214>
 8008794:	2500      	movs	r5, #0
 8008796:	f104 0619 	add.w	r6, r4, #25
 800879a:	e7f5      	b.n	8008788 <_printf_i+0x230>
 800879c:	0800d35e 	.word	0x0800d35e
 80087a0:	0800d36f 	.word	0x0800d36f

080087a4 <_scanf_float>:
 80087a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a8:	b087      	sub	sp, #28
 80087aa:	9303      	str	r3, [sp, #12]
 80087ac:	688b      	ldr	r3, [r1, #8]
 80087ae:	4617      	mov	r7, r2
 80087b0:	1e5a      	subs	r2, r3, #1
 80087b2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80087b6:	bf85      	ittet	hi
 80087b8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80087bc:	195b      	addhi	r3, r3, r5
 80087be:	2300      	movls	r3, #0
 80087c0:	9302      	strhi	r3, [sp, #8]
 80087c2:	bf88      	it	hi
 80087c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80087c8:	468b      	mov	fp, r1
 80087ca:	f04f 0500 	mov.w	r5, #0
 80087ce:	bf8c      	ite	hi
 80087d0:	608b      	strhi	r3, [r1, #8]
 80087d2:	9302      	strls	r3, [sp, #8]
 80087d4:	680b      	ldr	r3, [r1, #0]
 80087d6:	4680      	mov	r8, r0
 80087d8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80087dc:	f84b 3b1c 	str.w	r3, [fp], #28
 80087e0:	460c      	mov	r4, r1
 80087e2:	465e      	mov	r6, fp
 80087e4:	46aa      	mov	sl, r5
 80087e6:	46a9      	mov	r9, r5
 80087e8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80087ec:	9501      	str	r5, [sp, #4]
 80087ee:	68a2      	ldr	r2, [r4, #8]
 80087f0:	b152      	cbz	r2, 8008808 <_scanf_float+0x64>
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	2b4e      	cmp	r3, #78	; 0x4e
 80087f8:	d864      	bhi.n	80088c4 <_scanf_float+0x120>
 80087fa:	2b40      	cmp	r3, #64	; 0x40
 80087fc:	d83c      	bhi.n	8008878 <_scanf_float+0xd4>
 80087fe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008802:	b2c8      	uxtb	r0, r1
 8008804:	280e      	cmp	r0, #14
 8008806:	d93a      	bls.n	800887e <_scanf_float+0xda>
 8008808:	f1b9 0f00 	cmp.w	r9, #0
 800880c:	d003      	beq.n	8008816 <_scanf_float+0x72>
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	f10a 3aff 	add.w	sl, sl, #4294967295
 800881a:	f1ba 0f01 	cmp.w	sl, #1
 800881e:	f200 8113 	bhi.w	8008a48 <_scanf_float+0x2a4>
 8008822:	455e      	cmp	r6, fp
 8008824:	f200 8105 	bhi.w	8008a32 <_scanf_float+0x28e>
 8008828:	2501      	movs	r5, #1
 800882a:	4628      	mov	r0, r5
 800882c:	b007      	add	sp, #28
 800882e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008832:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008836:	2a0d      	cmp	r2, #13
 8008838:	d8e6      	bhi.n	8008808 <_scanf_float+0x64>
 800883a:	a101      	add	r1, pc, #4	; (adr r1, 8008840 <_scanf_float+0x9c>)
 800883c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008840:	0800897f 	.word	0x0800897f
 8008844:	08008809 	.word	0x08008809
 8008848:	08008809 	.word	0x08008809
 800884c:	08008809 	.word	0x08008809
 8008850:	080089df 	.word	0x080089df
 8008854:	080089b7 	.word	0x080089b7
 8008858:	08008809 	.word	0x08008809
 800885c:	08008809 	.word	0x08008809
 8008860:	0800898d 	.word	0x0800898d
 8008864:	08008809 	.word	0x08008809
 8008868:	08008809 	.word	0x08008809
 800886c:	08008809 	.word	0x08008809
 8008870:	08008809 	.word	0x08008809
 8008874:	08008945 	.word	0x08008945
 8008878:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800887c:	e7db      	b.n	8008836 <_scanf_float+0x92>
 800887e:	290e      	cmp	r1, #14
 8008880:	d8c2      	bhi.n	8008808 <_scanf_float+0x64>
 8008882:	a001      	add	r0, pc, #4	; (adr r0, 8008888 <_scanf_float+0xe4>)
 8008884:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008888:	08008937 	.word	0x08008937
 800888c:	08008809 	.word	0x08008809
 8008890:	08008937 	.word	0x08008937
 8008894:	080089cb 	.word	0x080089cb
 8008898:	08008809 	.word	0x08008809
 800889c:	080088e5 	.word	0x080088e5
 80088a0:	08008921 	.word	0x08008921
 80088a4:	08008921 	.word	0x08008921
 80088a8:	08008921 	.word	0x08008921
 80088ac:	08008921 	.word	0x08008921
 80088b0:	08008921 	.word	0x08008921
 80088b4:	08008921 	.word	0x08008921
 80088b8:	08008921 	.word	0x08008921
 80088bc:	08008921 	.word	0x08008921
 80088c0:	08008921 	.word	0x08008921
 80088c4:	2b6e      	cmp	r3, #110	; 0x6e
 80088c6:	d809      	bhi.n	80088dc <_scanf_float+0x138>
 80088c8:	2b60      	cmp	r3, #96	; 0x60
 80088ca:	d8b2      	bhi.n	8008832 <_scanf_float+0x8e>
 80088cc:	2b54      	cmp	r3, #84	; 0x54
 80088ce:	d077      	beq.n	80089c0 <_scanf_float+0x21c>
 80088d0:	2b59      	cmp	r3, #89	; 0x59
 80088d2:	d199      	bne.n	8008808 <_scanf_float+0x64>
 80088d4:	2d07      	cmp	r5, #7
 80088d6:	d197      	bne.n	8008808 <_scanf_float+0x64>
 80088d8:	2508      	movs	r5, #8
 80088da:	e029      	b.n	8008930 <_scanf_float+0x18c>
 80088dc:	2b74      	cmp	r3, #116	; 0x74
 80088de:	d06f      	beq.n	80089c0 <_scanf_float+0x21c>
 80088e0:	2b79      	cmp	r3, #121	; 0x79
 80088e2:	e7f6      	b.n	80088d2 <_scanf_float+0x12e>
 80088e4:	6821      	ldr	r1, [r4, #0]
 80088e6:	05c8      	lsls	r0, r1, #23
 80088e8:	d51a      	bpl.n	8008920 <_scanf_float+0x17c>
 80088ea:	9b02      	ldr	r3, [sp, #8]
 80088ec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80088f0:	6021      	str	r1, [r4, #0]
 80088f2:	f109 0901 	add.w	r9, r9, #1
 80088f6:	b11b      	cbz	r3, 8008900 <_scanf_float+0x15c>
 80088f8:	3b01      	subs	r3, #1
 80088fa:	3201      	adds	r2, #1
 80088fc:	9302      	str	r3, [sp, #8]
 80088fe:	60a2      	str	r2, [r4, #8]
 8008900:	68a3      	ldr	r3, [r4, #8]
 8008902:	3b01      	subs	r3, #1
 8008904:	60a3      	str	r3, [r4, #8]
 8008906:	6923      	ldr	r3, [r4, #16]
 8008908:	3301      	adds	r3, #1
 800890a:	6123      	str	r3, [r4, #16]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	3b01      	subs	r3, #1
 8008910:	2b00      	cmp	r3, #0
 8008912:	607b      	str	r3, [r7, #4]
 8008914:	f340 8084 	ble.w	8008a20 <_scanf_float+0x27c>
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	3301      	adds	r3, #1
 800891c:	603b      	str	r3, [r7, #0]
 800891e:	e766      	b.n	80087ee <_scanf_float+0x4a>
 8008920:	eb1a 0f05 	cmn.w	sl, r5
 8008924:	f47f af70 	bne.w	8008808 <_scanf_float+0x64>
 8008928:	6822      	ldr	r2, [r4, #0]
 800892a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800892e:	6022      	str	r2, [r4, #0]
 8008930:	f806 3b01 	strb.w	r3, [r6], #1
 8008934:	e7e4      	b.n	8008900 <_scanf_float+0x15c>
 8008936:	6822      	ldr	r2, [r4, #0]
 8008938:	0610      	lsls	r0, r2, #24
 800893a:	f57f af65 	bpl.w	8008808 <_scanf_float+0x64>
 800893e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008942:	e7f4      	b.n	800892e <_scanf_float+0x18a>
 8008944:	f1ba 0f00 	cmp.w	sl, #0
 8008948:	d10e      	bne.n	8008968 <_scanf_float+0x1c4>
 800894a:	f1b9 0f00 	cmp.w	r9, #0
 800894e:	d10e      	bne.n	800896e <_scanf_float+0x1ca>
 8008950:	6822      	ldr	r2, [r4, #0]
 8008952:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008956:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800895a:	d108      	bne.n	800896e <_scanf_float+0x1ca>
 800895c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008960:	f04f 0a01 	mov.w	sl, #1
 8008964:	6022      	str	r2, [r4, #0]
 8008966:	e7e3      	b.n	8008930 <_scanf_float+0x18c>
 8008968:	f1ba 0f02 	cmp.w	sl, #2
 800896c:	d055      	beq.n	8008a1a <_scanf_float+0x276>
 800896e:	2d01      	cmp	r5, #1
 8008970:	d002      	beq.n	8008978 <_scanf_float+0x1d4>
 8008972:	2d04      	cmp	r5, #4
 8008974:	f47f af48 	bne.w	8008808 <_scanf_float+0x64>
 8008978:	3501      	adds	r5, #1
 800897a:	b2ed      	uxtb	r5, r5
 800897c:	e7d8      	b.n	8008930 <_scanf_float+0x18c>
 800897e:	f1ba 0f01 	cmp.w	sl, #1
 8008982:	f47f af41 	bne.w	8008808 <_scanf_float+0x64>
 8008986:	f04f 0a02 	mov.w	sl, #2
 800898a:	e7d1      	b.n	8008930 <_scanf_float+0x18c>
 800898c:	b97d      	cbnz	r5, 80089ae <_scanf_float+0x20a>
 800898e:	f1b9 0f00 	cmp.w	r9, #0
 8008992:	f47f af3c 	bne.w	800880e <_scanf_float+0x6a>
 8008996:	6822      	ldr	r2, [r4, #0]
 8008998:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800899c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80089a0:	f47f af39 	bne.w	8008816 <_scanf_float+0x72>
 80089a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80089a8:	2501      	movs	r5, #1
 80089aa:	6022      	str	r2, [r4, #0]
 80089ac:	e7c0      	b.n	8008930 <_scanf_float+0x18c>
 80089ae:	2d03      	cmp	r5, #3
 80089b0:	d0e2      	beq.n	8008978 <_scanf_float+0x1d4>
 80089b2:	2d05      	cmp	r5, #5
 80089b4:	e7de      	b.n	8008974 <_scanf_float+0x1d0>
 80089b6:	2d02      	cmp	r5, #2
 80089b8:	f47f af26 	bne.w	8008808 <_scanf_float+0x64>
 80089bc:	2503      	movs	r5, #3
 80089be:	e7b7      	b.n	8008930 <_scanf_float+0x18c>
 80089c0:	2d06      	cmp	r5, #6
 80089c2:	f47f af21 	bne.w	8008808 <_scanf_float+0x64>
 80089c6:	2507      	movs	r5, #7
 80089c8:	e7b2      	b.n	8008930 <_scanf_float+0x18c>
 80089ca:	6822      	ldr	r2, [r4, #0]
 80089cc:	0591      	lsls	r1, r2, #22
 80089ce:	f57f af1b 	bpl.w	8008808 <_scanf_float+0x64>
 80089d2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80089d6:	6022      	str	r2, [r4, #0]
 80089d8:	f8cd 9004 	str.w	r9, [sp, #4]
 80089dc:	e7a8      	b.n	8008930 <_scanf_float+0x18c>
 80089de:	6822      	ldr	r2, [r4, #0]
 80089e0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80089e4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80089e8:	d006      	beq.n	80089f8 <_scanf_float+0x254>
 80089ea:	0550      	lsls	r0, r2, #21
 80089ec:	f57f af0c 	bpl.w	8008808 <_scanf_float+0x64>
 80089f0:	f1b9 0f00 	cmp.w	r9, #0
 80089f4:	f43f af0f 	beq.w	8008816 <_scanf_float+0x72>
 80089f8:	0591      	lsls	r1, r2, #22
 80089fa:	bf58      	it	pl
 80089fc:	9901      	ldrpl	r1, [sp, #4]
 80089fe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a02:	bf58      	it	pl
 8008a04:	eba9 0101 	subpl.w	r1, r9, r1
 8008a08:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008a0c:	f04f 0900 	mov.w	r9, #0
 8008a10:	bf58      	it	pl
 8008a12:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008a16:	6022      	str	r2, [r4, #0]
 8008a18:	e78a      	b.n	8008930 <_scanf_float+0x18c>
 8008a1a:	f04f 0a03 	mov.w	sl, #3
 8008a1e:	e787      	b.n	8008930 <_scanf_float+0x18c>
 8008a20:	4639      	mov	r1, r7
 8008a22:	4640      	mov	r0, r8
 8008a24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008a28:	4798      	blx	r3
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	f43f aedf 	beq.w	80087ee <_scanf_float+0x4a>
 8008a30:	e6ea      	b.n	8008808 <_scanf_float+0x64>
 8008a32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a36:	463a      	mov	r2, r7
 8008a38:	4640      	mov	r0, r8
 8008a3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a3e:	4798      	blx	r3
 8008a40:	6923      	ldr	r3, [r4, #16]
 8008a42:	3b01      	subs	r3, #1
 8008a44:	6123      	str	r3, [r4, #16]
 8008a46:	e6ec      	b.n	8008822 <_scanf_float+0x7e>
 8008a48:	1e6b      	subs	r3, r5, #1
 8008a4a:	2b06      	cmp	r3, #6
 8008a4c:	d825      	bhi.n	8008a9a <_scanf_float+0x2f6>
 8008a4e:	2d02      	cmp	r5, #2
 8008a50:	d836      	bhi.n	8008ac0 <_scanf_float+0x31c>
 8008a52:	455e      	cmp	r6, fp
 8008a54:	f67f aee8 	bls.w	8008828 <_scanf_float+0x84>
 8008a58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a5c:	463a      	mov	r2, r7
 8008a5e:	4640      	mov	r0, r8
 8008a60:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a64:	4798      	blx	r3
 8008a66:	6923      	ldr	r3, [r4, #16]
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	6123      	str	r3, [r4, #16]
 8008a6c:	e7f1      	b.n	8008a52 <_scanf_float+0x2ae>
 8008a6e:	9802      	ldr	r0, [sp, #8]
 8008a70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a74:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008a78:	463a      	mov	r2, r7
 8008a7a:	9002      	str	r0, [sp, #8]
 8008a7c:	4640      	mov	r0, r8
 8008a7e:	4798      	blx	r3
 8008a80:	6923      	ldr	r3, [r4, #16]
 8008a82:	3b01      	subs	r3, #1
 8008a84:	6123      	str	r3, [r4, #16]
 8008a86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a8a:	fa5f fa8a 	uxtb.w	sl, sl
 8008a8e:	f1ba 0f02 	cmp.w	sl, #2
 8008a92:	d1ec      	bne.n	8008a6e <_scanf_float+0x2ca>
 8008a94:	3d03      	subs	r5, #3
 8008a96:	b2ed      	uxtb	r5, r5
 8008a98:	1b76      	subs	r6, r6, r5
 8008a9a:	6823      	ldr	r3, [r4, #0]
 8008a9c:	05da      	lsls	r2, r3, #23
 8008a9e:	d52f      	bpl.n	8008b00 <_scanf_float+0x35c>
 8008aa0:	055b      	lsls	r3, r3, #21
 8008aa2:	d510      	bpl.n	8008ac6 <_scanf_float+0x322>
 8008aa4:	455e      	cmp	r6, fp
 8008aa6:	f67f aebf 	bls.w	8008828 <_scanf_float+0x84>
 8008aaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008aae:	463a      	mov	r2, r7
 8008ab0:	4640      	mov	r0, r8
 8008ab2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ab6:	4798      	blx	r3
 8008ab8:	6923      	ldr	r3, [r4, #16]
 8008aba:	3b01      	subs	r3, #1
 8008abc:	6123      	str	r3, [r4, #16]
 8008abe:	e7f1      	b.n	8008aa4 <_scanf_float+0x300>
 8008ac0:	46aa      	mov	sl, r5
 8008ac2:	9602      	str	r6, [sp, #8]
 8008ac4:	e7df      	b.n	8008a86 <_scanf_float+0x2e2>
 8008ac6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008aca:	6923      	ldr	r3, [r4, #16]
 8008acc:	2965      	cmp	r1, #101	; 0x65
 8008ace:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ad2:	f106 35ff 	add.w	r5, r6, #4294967295
 8008ad6:	6123      	str	r3, [r4, #16]
 8008ad8:	d00c      	beq.n	8008af4 <_scanf_float+0x350>
 8008ada:	2945      	cmp	r1, #69	; 0x45
 8008adc:	d00a      	beq.n	8008af4 <_scanf_float+0x350>
 8008ade:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ae2:	463a      	mov	r2, r7
 8008ae4:	4640      	mov	r0, r8
 8008ae6:	4798      	blx	r3
 8008ae8:	6923      	ldr	r3, [r4, #16]
 8008aea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008aee:	3b01      	subs	r3, #1
 8008af0:	1eb5      	subs	r5, r6, #2
 8008af2:	6123      	str	r3, [r4, #16]
 8008af4:	463a      	mov	r2, r7
 8008af6:	4640      	mov	r0, r8
 8008af8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008afc:	4798      	blx	r3
 8008afe:	462e      	mov	r6, r5
 8008b00:	6825      	ldr	r5, [r4, #0]
 8008b02:	f015 0510 	ands.w	r5, r5, #16
 8008b06:	d155      	bne.n	8008bb4 <_scanf_float+0x410>
 8008b08:	7035      	strb	r5, [r6, #0]
 8008b0a:	6823      	ldr	r3, [r4, #0]
 8008b0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b14:	d11b      	bne.n	8008b4e <_scanf_float+0x3aa>
 8008b16:	9b01      	ldr	r3, [sp, #4]
 8008b18:	454b      	cmp	r3, r9
 8008b1a:	eba3 0209 	sub.w	r2, r3, r9
 8008b1e:	d123      	bne.n	8008b68 <_scanf_float+0x3c4>
 8008b20:	2200      	movs	r2, #0
 8008b22:	4659      	mov	r1, fp
 8008b24:	4640      	mov	r0, r8
 8008b26:	f000 ff07 	bl	8009938 <_strtod_r>
 8008b2a:	6822      	ldr	r2, [r4, #0]
 8008b2c:	9b03      	ldr	r3, [sp, #12]
 8008b2e:	f012 0f02 	tst.w	r2, #2
 8008b32:	4606      	mov	r6, r0
 8008b34:	460f      	mov	r7, r1
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	d021      	beq.n	8008b7e <_scanf_float+0x3da>
 8008b3a:	1d1a      	adds	r2, r3, #4
 8008b3c:	9903      	ldr	r1, [sp, #12]
 8008b3e:	600a      	str	r2, [r1, #0]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	e9c3 6700 	strd	r6, r7, [r3]
 8008b46:	68e3      	ldr	r3, [r4, #12]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	60e3      	str	r3, [r4, #12]
 8008b4c:	e66d      	b.n	800882a <_scanf_float+0x86>
 8008b4e:	9b04      	ldr	r3, [sp, #16]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d0e5      	beq.n	8008b20 <_scanf_float+0x37c>
 8008b54:	9905      	ldr	r1, [sp, #20]
 8008b56:	230a      	movs	r3, #10
 8008b58:	462a      	mov	r2, r5
 8008b5a:	4640      	mov	r0, r8
 8008b5c:	3101      	adds	r1, #1
 8008b5e:	f000 ff6d 	bl	8009a3c <_strtol_r>
 8008b62:	9b04      	ldr	r3, [sp, #16]
 8008b64:	9e05      	ldr	r6, [sp, #20]
 8008b66:	1ac2      	subs	r2, r0, r3
 8008b68:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008b6c:	429e      	cmp	r6, r3
 8008b6e:	bf28      	it	cs
 8008b70:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008b74:	4630      	mov	r0, r6
 8008b76:	4910      	ldr	r1, [pc, #64]	; (8008bb8 <_scanf_float+0x414>)
 8008b78:	f000 f8b4 	bl	8008ce4 <siprintf>
 8008b7c:	e7d0      	b.n	8008b20 <_scanf_float+0x37c>
 8008b7e:	f012 0f04 	tst.w	r2, #4
 8008b82:	f103 0204 	add.w	r2, r3, #4
 8008b86:	d1d9      	bne.n	8008b3c <_scanf_float+0x398>
 8008b88:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008b8c:	f8cc 2000 	str.w	r2, [ip]
 8008b90:	f8d3 8000 	ldr.w	r8, [r3]
 8008b94:	4602      	mov	r2, r0
 8008b96:	460b      	mov	r3, r1
 8008b98:	f7f7 ff38 	bl	8000a0c <__aeabi_dcmpun>
 8008b9c:	b128      	cbz	r0, 8008baa <_scanf_float+0x406>
 8008b9e:	4807      	ldr	r0, [pc, #28]	; (8008bbc <_scanf_float+0x418>)
 8008ba0:	f000 f89c 	bl	8008cdc <nanf>
 8008ba4:	f8c8 0000 	str.w	r0, [r8]
 8008ba8:	e7cd      	b.n	8008b46 <_scanf_float+0x3a2>
 8008baa:	4630      	mov	r0, r6
 8008bac:	4639      	mov	r1, r7
 8008bae:	f7f7 ff8b 	bl	8000ac8 <__aeabi_d2f>
 8008bb2:	e7f7      	b.n	8008ba4 <_scanf_float+0x400>
 8008bb4:	2500      	movs	r5, #0
 8008bb6:	e638      	b.n	800882a <_scanf_float+0x86>
 8008bb8:	0800d380 	.word	0x0800d380
 8008bbc:	0800d7f0 	.word	0x0800d7f0

08008bc0 <iprintf>:
 8008bc0:	b40f      	push	{r0, r1, r2, r3}
 8008bc2:	4b0a      	ldr	r3, [pc, #40]	; (8008bec <iprintf+0x2c>)
 8008bc4:	b513      	push	{r0, r1, r4, lr}
 8008bc6:	681c      	ldr	r4, [r3, #0]
 8008bc8:	b124      	cbz	r4, 8008bd4 <iprintf+0x14>
 8008bca:	69a3      	ldr	r3, [r4, #24]
 8008bcc:	b913      	cbnz	r3, 8008bd4 <iprintf+0x14>
 8008bce:	4620      	mov	r0, r4
 8008bd0:	f001 ff86 	bl	800aae0 <__sinit>
 8008bd4:	ab05      	add	r3, sp, #20
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	9a04      	ldr	r2, [sp, #16]
 8008bda:	68a1      	ldr	r1, [r4, #8]
 8008bdc:	9301      	str	r3, [sp, #4]
 8008bde:	f003 fb43 	bl	800c268 <_vfiprintf_r>
 8008be2:	b002      	add	sp, #8
 8008be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008be8:	b004      	add	sp, #16
 8008bea:	4770      	bx	lr
 8008bec:	2000002c 	.word	0x2000002c

08008bf0 <_puts_r>:
 8008bf0:	b570      	push	{r4, r5, r6, lr}
 8008bf2:	460e      	mov	r6, r1
 8008bf4:	4605      	mov	r5, r0
 8008bf6:	b118      	cbz	r0, 8008c00 <_puts_r+0x10>
 8008bf8:	6983      	ldr	r3, [r0, #24]
 8008bfa:	b90b      	cbnz	r3, 8008c00 <_puts_r+0x10>
 8008bfc:	f001 ff70 	bl	800aae0 <__sinit>
 8008c00:	69ab      	ldr	r3, [r5, #24]
 8008c02:	68ac      	ldr	r4, [r5, #8]
 8008c04:	b913      	cbnz	r3, 8008c0c <_puts_r+0x1c>
 8008c06:	4628      	mov	r0, r5
 8008c08:	f001 ff6a 	bl	800aae0 <__sinit>
 8008c0c:	4b2c      	ldr	r3, [pc, #176]	; (8008cc0 <_puts_r+0xd0>)
 8008c0e:	429c      	cmp	r4, r3
 8008c10:	d120      	bne.n	8008c54 <_puts_r+0x64>
 8008c12:	686c      	ldr	r4, [r5, #4]
 8008c14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c16:	07db      	lsls	r3, r3, #31
 8008c18:	d405      	bmi.n	8008c26 <_puts_r+0x36>
 8008c1a:	89a3      	ldrh	r3, [r4, #12]
 8008c1c:	0598      	lsls	r0, r3, #22
 8008c1e:	d402      	bmi.n	8008c26 <_puts_r+0x36>
 8008c20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c22:	f002 fb66 	bl	800b2f2 <__retarget_lock_acquire_recursive>
 8008c26:	89a3      	ldrh	r3, [r4, #12]
 8008c28:	0719      	lsls	r1, r3, #28
 8008c2a:	d51d      	bpl.n	8008c68 <_puts_r+0x78>
 8008c2c:	6923      	ldr	r3, [r4, #16]
 8008c2e:	b1db      	cbz	r3, 8008c68 <_puts_r+0x78>
 8008c30:	3e01      	subs	r6, #1
 8008c32:	68a3      	ldr	r3, [r4, #8]
 8008c34:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	60a3      	str	r3, [r4, #8]
 8008c3c:	bb39      	cbnz	r1, 8008c8e <_puts_r+0x9e>
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	da38      	bge.n	8008cb4 <_puts_r+0xc4>
 8008c42:	4622      	mov	r2, r4
 8008c44:	210a      	movs	r1, #10
 8008c46:	4628      	mov	r0, r5
 8008c48:	f000 fefa 	bl	8009a40 <__swbuf_r>
 8008c4c:	3001      	adds	r0, #1
 8008c4e:	d011      	beq.n	8008c74 <_puts_r+0x84>
 8008c50:	250a      	movs	r5, #10
 8008c52:	e011      	b.n	8008c78 <_puts_r+0x88>
 8008c54:	4b1b      	ldr	r3, [pc, #108]	; (8008cc4 <_puts_r+0xd4>)
 8008c56:	429c      	cmp	r4, r3
 8008c58:	d101      	bne.n	8008c5e <_puts_r+0x6e>
 8008c5a:	68ac      	ldr	r4, [r5, #8]
 8008c5c:	e7da      	b.n	8008c14 <_puts_r+0x24>
 8008c5e:	4b1a      	ldr	r3, [pc, #104]	; (8008cc8 <_puts_r+0xd8>)
 8008c60:	429c      	cmp	r4, r3
 8008c62:	bf08      	it	eq
 8008c64:	68ec      	ldreq	r4, [r5, #12]
 8008c66:	e7d5      	b.n	8008c14 <_puts_r+0x24>
 8008c68:	4621      	mov	r1, r4
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	f000 ff3a 	bl	8009ae4 <__swsetup_r>
 8008c70:	2800      	cmp	r0, #0
 8008c72:	d0dd      	beq.n	8008c30 <_puts_r+0x40>
 8008c74:	f04f 35ff 	mov.w	r5, #4294967295
 8008c78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c7a:	07da      	lsls	r2, r3, #31
 8008c7c:	d405      	bmi.n	8008c8a <_puts_r+0x9a>
 8008c7e:	89a3      	ldrh	r3, [r4, #12]
 8008c80:	059b      	lsls	r3, r3, #22
 8008c82:	d402      	bmi.n	8008c8a <_puts_r+0x9a>
 8008c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c86:	f002 fb35 	bl	800b2f4 <__retarget_lock_release_recursive>
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	bd70      	pop	{r4, r5, r6, pc}
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	da04      	bge.n	8008c9c <_puts_r+0xac>
 8008c92:	69a2      	ldr	r2, [r4, #24]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	dc06      	bgt.n	8008ca6 <_puts_r+0xb6>
 8008c98:	290a      	cmp	r1, #10
 8008c9a:	d004      	beq.n	8008ca6 <_puts_r+0xb6>
 8008c9c:	6823      	ldr	r3, [r4, #0]
 8008c9e:	1c5a      	adds	r2, r3, #1
 8008ca0:	6022      	str	r2, [r4, #0]
 8008ca2:	7019      	strb	r1, [r3, #0]
 8008ca4:	e7c5      	b.n	8008c32 <_puts_r+0x42>
 8008ca6:	4622      	mov	r2, r4
 8008ca8:	4628      	mov	r0, r5
 8008caa:	f000 fec9 	bl	8009a40 <__swbuf_r>
 8008cae:	3001      	adds	r0, #1
 8008cb0:	d1bf      	bne.n	8008c32 <_puts_r+0x42>
 8008cb2:	e7df      	b.n	8008c74 <_puts_r+0x84>
 8008cb4:	250a      	movs	r5, #10
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	1c5a      	adds	r2, r3, #1
 8008cba:	6022      	str	r2, [r4, #0]
 8008cbc:	701d      	strb	r5, [r3, #0]
 8008cbe:	e7db      	b.n	8008c78 <_puts_r+0x88>
 8008cc0:	0800d58c 	.word	0x0800d58c
 8008cc4:	0800d5ac 	.word	0x0800d5ac
 8008cc8:	0800d56c 	.word	0x0800d56c

08008ccc <puts>:
 8008ccc:	4b02      	ldr	r3, [pc, #8]	; (8008cd8 <puts+0xc>)
 8008cce:	4601      	mov	r1, r0
 8008cd0:	6818      	ldr	r0, [r3, #0]
 8008cd2:	f7ff bf8d 	b.w	8008bf0 <_puts_r>
 8008cd6:	bf00      	nop
 8008cd8:	2000002c 	.word	0x2000002c

08008cdc <nanf>:
 8008cdc:	4800      	ldr	r0, [pc, #0]	; (8008ce0 <nanf+0x4>)
 8008cde:	4770      	bx	lr
 8008ce0:	7fc00000 	.word	0x7fc00000

08008ce4 <siprintf>:
 8008ce4:	b40e      	push	{r1, r2, r3}
 8008ce6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008cea:	b500      	push	{lr}
 8008cec:	b09c      	sub	sp, #112	; 0x70
 8008cee:	ab1d      	add	r3, sp, #116	; 0x74
 8008cf0:	9002      	str	r0, [sp, #8]
 8008cf2:	9006      	str	r0, [sp, #24]
 8008cf4:	9107      	str	r1, [sp, #28]
 8008cf6:	9104      	str	r1, [sp, #16]
 8008cf8:	4808      	ldr	r0, [pc, #32]	; (8008d1c <siprintf+0x38>)
 8008cfa:	4909      	ldr	r1, [pc, #36]	; (8008d20 <siprintf+0x3c>)
 8008cfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d00:	9105      	str	r1, [sp, #20]
 8008d02:	6800      	ldr	r0, [r0, #0]
 8008d04:	a902      	add	r1, sp, #8
 8008d06:	9301      	str	r3, [sp, #4]
 8008d08:	f003 f986 	bl	800c018 <_svfiprintf_r>
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	9b02      	ldr	r3, [sp, #8]
 8008d10:	701a      	strb	r2, [r3, #0]
 8008d12:	b01c      	add	sp, #112	; 0x70
 8008d14:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d18:	b003      	add	sp, #12
 8008d1a:	4770      	bx	lr
 8008d1c:	2000002c 	.word	0x2000002c
 8008d20:	ffff0208 	.word	0xffff0208

08008d24 <sulp>:
 8008d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d28:	460f      	mov	r7, r1
 8008d2a:	4690      	mov	r8, r2
 8008d2c:	f002 fee0 	bl	800baf0 <__ulp>
 8008d30:	4604      	mov	r4, r0
 8008d32:	460d      	mov	r5, r1
 8008d34:	f1b8 0f00 	cmp.w	r8, #0
 8008d38:	d011      	beq.n	8008d5e <sulp+0x3a>
 8008d3a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008d3e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	dd0b      	ble.n	8008d5e <sulp+0x3a>
 8008d46:	2400      	movs	r4, #0
 8008d48:	051b      	lsls	r3, r3, #20
 8008d4a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008d4e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008d52:	4622      	mov	r2, r4
 8008d54:	462b      	mov	r3, r5
 8008d56:	f7f7 fbbf 	bl	80004d8 <__aeabi_dmul>
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	460d      	mov	r5, r1
 8008d5e:	4620      	mov	r0, r4
 8008d60:	4629      	mov	r1, r5
 8008d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008d68 <_strtod_l>:
 8008d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6c:	469b      	mov	fp, r3
 8008d6e:	2300      	movs	r3, #0
 8008d70:	b09f      	sub	sp, #124	; 0x7c
 8008d72:	931a      	str	r3, [sp, #104]	; 0x68
 8008d74:	4b9e      	ldr	r3, [pc, #632]	; (8008ff0 <_strtod_l+0x288>)
 8008d76:	4682      	mov	sl, r0
 8008d78:	681f      	ldr	r7, [r3, #0]
 8008d7a:	460e      	mov	r6, r1
 8008d7c:	4638      	mov	r0, r7
 8008d7e:	9215      	str	r2, [sp, #84]	; 0x54
 8008d80:	f7f7 f9e6 	bl	8000150 <strlen>
 8008d84:	f04f 0800 	mov.w	r8, #0
 8008d88:	4604      	mov	r4, r0
 8008d8a:	f04f 0900 	mov.w	r9, #0
 8008d8e:	9619      	str	r6, [sp, #100]	; 0x64
 8008d90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d92:	781a      	ldrb	r2, [r3, #0]
 8008d94:	2a2b      	cmp	r2, #43	; 0x2b
 8008d96:	d04c      	beq.n	8008e32 <_strtod_l+0xca>
 8008d98:	d83a      	bhi.n	8008e10 <_strtod_l+0xa8>
 8008d9a:	2a0d      	cmp	r2, #13
 8008d9c:	d833      	bhi.n	8008e06 <_strtod_l+0x9e>
 8008d9e:	2a08      	cmp	r2, #8
 8008da0:	d833      	bhi.n	8008e0a <_strtod_l+0xa2>
 8008da2:	2a00      	cmp	r2, #0
 8008da4:	d03d      	beq.n	8008e22 <_strtod_l+0xba>
 8008da6:	2300      	movs	r3, #0
 8008da8:	930a      	str	r3, [sp, #40]	; 0x28
 8008daa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008dac:	782b      	ldrb	r3, [r5, #0]
 8008dae:	2b30      	cmp	r3, #48	; 0x30
 8008db0:	f040 80aa 	bne.w	8008f08 <_strtod_l+0x1a0>
 8008db4:	786b      	ldrb	r3, [r5, #1]
 8008db6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008dba:	2b58      	cmp	r3, #88	; 0x58
 8008dbc:	d166      	bne.n	8008e8c <_strtod_l+0x124>
 8008dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dc0:	4650      	mov	r0, sl
 8008dc2:	9301      	str	r3, [sp, #4]
 8008dc4:	ab1a      	add	r3, sp, #104	; 0x68
 8008dc6:	9300      	str	r3, [sp, #0]
 8008dc8:	4a8a      	ldr	r2, [pc, #552]	; (8008ff4 <_strtod_l+0x28c>)
 8008dca:	f8cd b008 	str.w	fp, [sp, #8]
 8008dce:	ab1b      	add	r3, sp, #108	; 0x6c
 8008dd0:	a919      	add	r1, sp, #100	; 0x64
 8008dd2:	f001 ff8b 	bl	800acec <__gethex>
 8008dd6:	f010 0607 	ands.w	r6, r0, #7
 8008dda:	4604      	mov	r4, r0
 8008ddc:	d005      	beq.n	8008dea <_strtod_l+0x82>
 8008dde:	2e06      	cmp	r6, #6
 8008de0:	d129      	bne.n	8008e36 <_strtod_l+0xce>
 8008de2:	2300      	movs	r3, #0
 8008de4:	3501      	adds	r5, #1
 8008de6:	9519      	str	r5, [sp, #100]	; 0x64
 8008de8:	930a      	str	r3, [sp, #40]	; 0x28
 8008dea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f040 858a 	bne.w	8009906 <_strtod_l+0xb9e>
 8008df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008df4:	b1d3      	cbz	r3, 8008e2c <_strtod_l+0xc4>
 8008df6:	4642      	mov	r2, r8
 8008df8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008dfc:	4610      	mov	r0, r2
 8008dfe:	4619      	mov	r1, r3
 8008e00:	b01f      	add	sp, #124	; 0x7c
 8008e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e06:	2a20      	cmp	r2, #32
 8008e08:	d1cd      	bne.n	8008da6 <_strtod_l+0x3e>
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	9319      	str	r3, [sp, #100]	; 0x64
 8008e0e:	e7bf      	b.n	8008d90 <_strtod_l+0x28>
 8008e10:	2a2d      	cmp	r2, #45	; 0x2d
 8008e12:	d1c8      	bne.n	8008da6 <_strtod_l+0x3e>
 8008e14:	2201      	movs	r2, #1
 8008e16:	920a      	str	r2, [sp, #40]	; 0x28
 8008e18:	1c5a      	adds	r2, r3, #1
 8008e1a:	9219      	str	r2, [sp, #100]	; 0x64
 8008e1c:	785b      	ldrb	r3, [r3, #1]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d1c3      	bne.n	8008daa <_strtod_l+0x42>
 8008e22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e24:	9619      	str	r6, [sp, #100]	; 0x64
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f040 856b 	bne.w	8009902 <_strtod_l+0xb9a>
 8008e2c:	4642      	mov	r2, r8
 8008e2e:	464b      	mov	r3, r9
 8008e30:	e7e4      	b.n	8008dfc <_strtod_l+0x94>
 8008e32:	2200      	movs	r2, #0
 8008e34:	e7ef      	b.n	8008e16 <_strtod_l+0xae>
 8008e36:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008e38:	b13a      	cbz	r2, 8008e4a <_strtod_l+0xe2>
 8008e3a:	2135      	movs	r1, #53	; 0x35
 8008e3c:	a81c      	add	r0, sp, #112	; 0x70
 8008e3e:	f002 ff5b 	bl	800bcf8 <__copybits>
 8008e42:	4650      	mov	r0, sl
 8008e44:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008e46:	f002 fb23 	bl	800b490 <_Bfree>
 8008e4a:	3e01      	subs	r6, #1
 8008e4c:	2e04      	cmp	r6, #4
 8008e4e:	d806      	bhi.n	8008e5e <_strtod_l+0xf6>
 8008e50:	e8df f006 	tbb	[pc, r6]
 8008e54:	1714030a 	.word	0x1714030a
 8008e58:	0a          	.byte	0x0a
 8008e59:	00          	.byte	0x00
 8008e5a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008e5e:	0721      	lsls	r1, r4, #28
 8008e60:	d5c3      	bpl.n	8008dea <_strtod_l+0x82>
 8008e62:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008e66:	e7c0      	b.n	8008dea <_strtod_l+0x82>
 8008e68:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008e6a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008e6e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008e72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008e76:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008e7a:	e7f0      	b.n	8008e5e <_strtod_l+0xf6>
 8008e7c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008ff8 <_strtod_l+0x290>
 8008e80:	e7ed      	b.n	8008e5e <_strtod_l+0xf6>
 8008e82:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008e86:	f04f 38ff 	mov.w	r8, #4294967295
 8008e8a:	e7e8      	b.n	8008e5e <_strtod_l+0xf6>
 8008e8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e8e:	1c5a      	adds	r2, r3, #1
 8008e90:	9219      	str	r2, [sp, #100]	; 0x64
 8008e92:	785b      	ldrb	r3, [r3, #1]
 8008e94:	2b30      	cmp	r3, #48	; 0x30
 8008e96:	d0f9      	beq.n	8008e8c <_strtod_l+0x124>
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d0a6      	beq.n	8008dea <_strtod_l+0x82>
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	9307      	str	r3, [sp, #28]
 8008ea0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ea2:	220a      	movs	r2, #10
 8008ea4:	9308      	str	r3, [sp, #32]
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	469b      	mov	fp, r3
 8008eaa:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008eae:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008eb0:	7805      	ldrb	r5, [r0, #0]
 8008eb2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8008eb6:	b2d9      	uxtb	r1, r3
 8008eb8:	2909      	cmp	r1, #9
 8008eba:	d927      	bls.n	8008f0c <_strtod_l+0x1a4>
 8008ebc:	4622      	mov	r2, r4
 8008ebe:	4639      	mov	r1, r7
 8008ec0:	f003 fb5b 	bl	800c57a <strncmp>
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	d033      	beq.n	8008f30 <_strtod_l+0x1c8>
 8008ec8:	2000      	movs	r0, #0
 8008eca:	462a      	mov	r2, r5
 8008ecc:	465c      	mov	r4, fp
 8008ece:	4603      	mov	r3, r0
 8008ed0:	9004      	str	r0, [sp, #16]
 8008ed2:	2a65      	cmp	r2, #101	; 0x65
 8008ed4:	d001      	beq.n	8008eda <_strtod_l+0x172>
 8008ed6:	2a45      	cmp	r2, #69	; 0x45
 8008ed8:	d114      	bne.n	8008f04 <_strtod_l+0x19c>
 8008eda:	b91c      	cbnz	r4, 8008ee4 <_strtod_l+0x17c>
 8008edc:	9a07      	ldr	r2, [sp, #28]
 8008ede:	4302      	orrs	r2, r0
 8008ee0:	d09f      	beq.n	8008e22 <_strtod_l+0xba>
 8008ee2:	2400      	movs	r4, #0
 8008ee4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008ee6:	1c72      	adds	r2, r6, #1
 8008ee8:	9219      	str	r2, [sp, #100]	; 0x64
 8008eea:	7872      	ldrb	r2, [r6, #1]
 8008eec:	2a2b      	cmp	r2, #43	; 0x2b
 8008eee:	d079      	beq.n	8008fe4 <_strtod_l+0x27c>
 8008ef0:	2a2d      	cmp	r2, #45	; 0x2d
 8008ef2:	f000 8083 	beq.w	8008ffc <_strtod_l+0x294>
 8008ef6:	2700      	movs	r7, #0
 8008ef8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008efc:	2909      	cmp	r1, #9
 8008efe:	f240 8083 	bls.w	8009008 <_strtod_l+0x2a0>
 8008f02:	9619      	str	r6, [sp, #100]	; 0x64
 8008f04:	2500      	movs	r5, #0
 8008f06:	e09f      	b.n	8009048 <_strtod_l+0x2e0>
 8008f08:	2300      	movs	r3, #0
 8008f0a:	e7c8      	b.n	8008e9e <_strtod_l+0x136>
 8008f0c:	f1bb 0f08 	cmp.w	fp, #8
 8008f10:	bfd5      	itete	le
 8008f12:	9906      	ldrle	r1, [sp, #24]
 8008f14:	9905      	ldrgt	r1, [sp, #20]
 8008f16:	fb02 3301 	mlale	r3, r2, r1, r3
 8008f1a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008f1e:	f100 0001 	add.w	r0, r0, #1
 8008f22:	bfd4      	ite	le
 8008f24:	9306      	strle	r3, [sp, #24]
 8008f26:	9305      	strgt	r3, [sp, #20]
 8008f28:	f10b 0b01 	add.w	fp, fp, #1
 8008f2c:	9019      	str	r0, [sp, #100]	; 0x64
 8008f2e:	e7be      	b.n	8008eae <_strtod_l+0x146>
 8008f30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f32:	191a      	adds	r2, r3, r4
 8008f34:	9219      	str	r2, [sp, #100]	; 0x64
 8008f36:	5d1a      	ldrb	r2, [r3, r4]
 8008f38:	f1bb 0f00 	cmp.w	fp, #0
 8008f3c:	d036      	beq.n	8008fac <_strtod_l+0x244>
 8008f3e:	465c      	mov	r4, fp
 8008f40:	9004      	str	r0, [sp, #16]
 8008f42:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008f46:	2b09      	cmp	r3, #9
 8008f48:	d912      	bls.n	8008f70 <_strtod_l+0x208>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e7c1      	b.n	8008ed2 <_strtod_l+0x16a>
 8008f4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f50:	3001      	adds	r0, #1
 8008f52:	1c5a      	adds	r2, r3, #1
 8008f54:	9219      	str	r2, [sp, #100]	; 0x64
 8008f56:	785a      	ldrb	r2, [r3, #1]
 8008f58:	2a30      	cmp	r2, #48	; 0x30
 8008f5a:	d0f8      	beq.n	8008f4e <_strtod_l+0x1e6>
 8008f5c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008f60:	2b08      	cmp	r3, #8
 8008f62:	f200 84d5 	bhi.w	8009910 <_strtod_l+0xba8>
 8008f66:	9004      	str	r0, [sp, #16]
 8008f68:	2000      	movs	r0, #0
 8008f6a:	4604      	mov	r4, r0
 8008f6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f6e:	9308      	str	r3, [sp, #32]
 8008f70:	3a30      	subs	r2, #48	; 0x30
 8008f72:	f100 0301 	add.w	r3, r0, #1
 8008f76:	d013      	beq.n	8008fa0 <_strtod_l+0x238>
 8008f78:	9904      	ldr	r1, [sp, #16]
 8008f7a:	1905      	adds	r5, r0, r4
 8008f7c:	4419      	add	r1, r3
 8008f7e:	9104      	str	r1, [sp, #16]
 8008f80:	4623      	mov	r3, r4
 8008f82:	210a      	movs	r1, #10
 8008f84:	42ab      	cmp	r3, r5
 8008f86:	d113      	bne.n	8008fb0 <_strtod_l+0x248>
 8008f88:	1823      	adds	r3, r4, r0
 8008f8a:	2b08      	cmp	r3, #8
 8008f8c:	f104 0401 	add.w	r4, r4, #1
 8008f90:	4404      	add	r4, r0
 8008f92:	dc1b      	bgt.n	8008fcc <_strtod_l+0x264>
 8008f94:	230a      	movs	r3, #10
 8008f96:	9906      	ldr	r1, [sp, #24]
 8008f98:	fb03 2301 	mla	r3, r3, r1, r2
 8008f9c:	9306      	str	r3, [sp, #24]
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	1c51      	adds	r1, r2, #1
 8008fa6:	9119      	str	r1, [sp, #100]	; 0x64
 8008fa8:	7852      	ldrb	r2, [r2, #1]
 8008faa:	e7ca      	b.n	8008f42 <_strtod_l+0x1da>
 8008fac:	4658      	mov	r0, fp
 8008fae:	e7d3      	b.n	8008f58 <_strtod_l+0x1f0>
 8008fb0:	2b08      	cmp	r3, #8
 8008fb2:	dc04      	bgt.n	8008fbe <_strtod_l+0x256>
 8008fb4:	9f06      	ldr	r7, [sp, #24]
 8008fb6:	434f      	muls	r7, r1
 8008fb8:	9706      	str	r7, [sp, #24]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	e7e2      	b.n	8008f84 <_strtod_l+0x21c>
 8008fbe:	1c5f      	adds	r7, r3, #1
 8008fc0:	2f10      	cmp	r7, #16
 8008fc2:	bfde      	ittt	le
 8008fc4:	9f05      	ldrle	r7, [sp, #20]
 8008fc6:	434f      	mulle	r7, r1
 8008fc8:	9705      	strle	r7, [sp, #20]
 8008fca:	e7f6      	b.n	8008fba <_strtod_l+0x252>
 8008fcc:	2c10      	cmp	r4, #16
 8008fce:	bfdf      	itttt	le
 8008fd0:	230a      	movle	r3, #10
 8008fd2:	9905      	ldrle	r1, [sp, #20]
 8008fd4:	fb03 2301 	mlale	r3, r3, r1, r2
 8008fd8:	9305      	strle	r3, [sp, #20]
 8008fda:	e7e0      	b.n	8008f9e <_strtod_l+0x236>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	9304      	str	r3, [sp, #16]
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e77b      	b.n	8008edc <_strtod_l+0x174>
 8008fe4:	2700      	movs	r7, #0
 8008fe6:	1cb2      	adds	r2, r6, #2
 8008fe8:	9219      	str	r2, [sp, #100]	; 0x64
 8008fea:	78b2      	ldrb	r2, [r6, #2]
 8008fec:	e784      	b.n	8008ef8 <_strtod_l+0x190>
 8008fee:	bf00      	nop
 8008ff0:	0800d634 	.word	0x0800d634
 8008ff4:	0800d388 	.word	0x0800d388
 8008ff8:	7ff00000 	.word	0x7ff00000
 8008ffc:	2701      	movs	r7, #1
 8008ffe:	e7f2      	b.n	8008fe6 <_strtod_l+0x27e>
 8009000:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009002:	1c51      	adds	r1, r2, #1
 8009004:	9119      	str	r1, [sp, #100]	; 0x64
 8009006:	7852      	ldrb	r2, [r2, #1]
 8009008:	2a30      	cmp	r2, #48	; 0x30
 800900a:	d0f9      	beq.n	8009000 <_strtod_l+0x298>
 800900c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009010:	2908      	cmp	r1, #8
 8009012:	f63f af77 	bhi.w	8008f04 <_strtod_l+0x19c>
 8009016:	f04f 0e0a 	mov.w	lr, #10
 800901a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800901e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009020:	9209      	str	r2, [sp, #36]	; 0x24
 8009022:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009024:	1c51      	adds	r1, r2, #1
 8009026:	9119      	str	r1, [sp, #100]	; 0x64
 8009028:	7852      	ldrb	r2, [r2, #1]
 800902a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800902e:	2d09      	cmp	r5, #9
 8009030:	d935      	bls.n	800909e <_strtod_l+0x336>
 8009032:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009034:	1b49      	subs	r1, r1, r5
 8009036:	2908      	cmp	r1, #8
 8009038:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800903c:	dc02      	bgt.n	8009044 <_strtod_l+0x2dc>
 800903e:	4565      	cmp	r5, ip
 8009040:	bfa8      	it	ge
 8009042:	4665      	movge	r5, ip
 8009044:	b107      	cbz	r7, 8009048 <_strtod_l+0x2e0>
 8009046:	426d      	negs	r5, r5
 8009048:	2c00      	cmp	r4, #0
 800904a:	d14c      	bne.n	80090e6 <_strtod_l+0x37e>
 800904c:	9907      	ldr	r1, [sp, #28]
 800904e:	4301      	orrs	r1, r0
 8009050:	f47f aecb 	bne.w	8008dea <_strtod_l+0x82>
 8009054:	2b00      	cmp	r3, #0
 8009056:	f47f aee4 	bne.w	8008e22 <_strtod_l+0xba>
 800905a:	2a69      	cmp	r2, #105	; 0x69
 800905c:	d026      	beq.n	80090ac <_strtod_l+0x344>
 800905e:	dc23      	bgt.n	80090a8 <_strtod_l+0x340>
 8009060:	2a49      	cmp	r2, #73	; 0x49
 8009062:	d023      	beq.n	80090ac <_strtod_l+0x344>
 8009064:	2a4e      	cmp	r2, #78	; 0x4e
 8009066:	f47f aedc 	bne.w	8008e22 <_strtod_l+0xba>
 800906a:	499d      	ldr	r1, [pc, #628]	; (80092e0 <_strtod_l+0x578>)
 800906c:	a819      	add	r0, sp, #100	; 0x64
 800906e:	f002 f88b 	bl	800b188 <__match>
 8009072:	2800      	cmp	r0, #0
 8009074:	f43f aed5 	beq.w	8008e22 <_strtod_l+0xba>
 8009078:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	2b28      	cmp	r3, #40	; 0x28
 800907e:	d12c      	bne.n	80090da <_strtod_l+0x372>
 8009080:	4998      	ldr	r1, [pc, #608]	; (80092e4 <_strtod_l+0x57c>)
 8009082:	aa1c      	add	r2, sp, #112	; 0x70
 8009084:	a819      	add	r0, sp, #100	; 0x64
 8009086:	f002 f893 	bl	800b1b0 <__hexnan>
 800908a:	2805      	cmp	r0, #5
 800908c:	d125      	bne.n	80090da <_strtod_l+0x372>
 800908e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009090:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009094:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009098:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800909c:	e6a5      	b.n	8008dea <_strtod_l+0x82>
 800909e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80090a2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80090a6:	e7bc      	b.n	8009022 <_strtod_l+0x2ba>
 80090a8:	2a6e      	cmp	r2, #110	; 0x6e
 80090aa:	e7dc      	b.n	8009066 <_strtod_l+0x2fe>
 80090ac:	498e      	ldr	r1, [pc, #568]	; (80092e8 <_strtod_l+0x580>)
 80090ae:	a819      	add	r0, sp, #100	; 0x64
 80090b0:	f002 f86a 	bl	800b188 <__match>
 80090b4:	2800      	cmp	r0, #0
 80090b6:	f43f aeb4 	beq.w	8008e22 <_strtod_l+0xba>
 80090ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80090bc:	498b      	ldr	r1, [pc, #556]	; (80092ec <_strtod_l+0x584>)
 80090be:	3b01      	subs	r3, #1
 80090c0:	a819      	add	r0, sp, #100	; 0x64
 80090c2:	9319      	str	r3, [sp, #100]	; 0x64
 80090c4:	f002 f860 	bl	800b188 <__match>
 80090c8:	b910      	cbnz	r0, 80090d0 <_strtod_l+0x368>
 80090ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80090cc:	3301      	adds	r3, #1
 80090ce:	9319      	str	r3, [sp, #100]	; 0x64
 80090d0:	f04f 0800 	mov.w	r8, #0
 80090d4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80092f0 <_strtod_l+0x588>
 80090d8:	e687      	b.n	8008dea <_strtod_l+0x82>
 80090da:	4886      	ldr	r0, [pc, #536]	; (80092f4 <_strtod_l+0x58c>)
 80090dc:	f003 f9f4 	bl	800c4c8 <nan>
 80090e0:	4680      	mov	r8, r0
 80090e2:	4689      	mov	r9, r1
 80090e4:	e681      	b.n	8008dea <_strtod_l+0x82>
 80090e6:	9b04      	ldr	r3, [sp, #16]
 80090e8:	f1bb 0f00 	cmp.w	fp, #0
 80090ec:	bf08      	it	eq
 80090ee:	46a3      	moveq	fp, r4
 80090f0:	1aeb      	subs	r3, r5, r3
 80090f2:	2c10      	cmp	r4, #16
 80090f4:	9806      	ldr	r0, [sp, #24]
 80090f6:	4626      	mov	r6, r4
 80090f8:	9307      	str	r3, [sp, #28]
 80090fa:	bfa8      	it	ge
 80090fc:	2610      	movge	r6, #16
 80090fe:	f7f7 f971 	bl	80003e4 <__aeabi_ui2d>
 8009102:	2c09      	cmp	r4, #9
 8009104:	4680      	mov	r8, r0
 8009106:	4689      	mov	r9, r1
 8009108:	dd13      	ble.n	8009132 <_strtod_l+0x3ca>
 800910a:	4b7b      	ldr	r3, [pc, #492]	; (80092f8 <_strtod_l+0x590>)
 800910c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009110:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009114:	f7f7 f9e0 	bl	80004d8 <__aeabi_dmul>
 8009118:	4680      	mov	r8, r0
 800911a:	9805      	ldr	r0, [sp, #20]
 800911c:	4689      	mov	r9, r1
 800911e:	f7f7 f961 	bl	80003e4 <__aeabi_ui2d>
 8009122:	4602      	mov	r2, r0
 8009124:	460b      	mov	r3, r1
 8009126:	4640      	mov	r0, r8
 8009128:	4649      	mov	r1, r9
 800912a:	f7f7 f81f 	bl	800016c <__adddf3>
 800912e:	4680      	mov	r8, r0
 8009130:	4689      	mov	r9, r1
 8009132:	2c0f      	cmp	r4, #15
 8009134:	dc36      	bgt.n	80091a4 <_strtod_l+0x43c>
 8009136:	9b07      	ldr	r3, [sp, #28]
 8009138:	2b00      	cmp	r3, #0
 800913a:	f43f ae56 	beq.w	8008dea <_strtod_l+0x82>
 800913e:	dd22      	ble.n	8009186 <_strtod_l+0x41e>
 8009140:	2b16      	cmp	r3, #22
 8009142:	dc09      	bgt.n	8009158 <_strtod_l+0x3f0>
 8009144:	496c      	ldr	r1, [pc, #432]	; (80092f8 <_strtod_l+0x590>)
 8009146:	4642      	mov	r2, r8
 8009148:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800914c:	464b      	mov	r3, r9
 800914e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009152:	f7f7 f9c1 	bl	80004d8 <__aeabi_dmul>
 8009156:	e7c3      	b.n	80090e0 <_strtod_l+0x378>
 8009158:	9a07      	ldr	r2, [sp, #28]
 800915a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800915e:	4293      	cmp	r3, r2
 8009160:	db20      	blt.n	80091a4 <_strtod_l+0x43c>
 8009162:	4d65      	ldr	r5, [pc, #404]	; (80092f8 <_strtod_l+0x590>)
 8009164:	f1c4 040f 	rsb	r4, r4, #15
 8009168:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800916c:	4642      	mov	r2, r8
 800916e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009172:	464b      	mov	r3, r9
 8009174:	f7f7 f9b0 	bl	80004d8 <__aeabi_dmul>
 8009178:	9b07      	ldr	r3, [sp, #28]
 800917a:	1b1c      	subs	r4, r3, r4
 800917c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009180:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009184:	e7e5      	b.n	8009152 <_strtod_l+0x3ea>
 8009186:	9b07      	ldr	r3, [sp, #28]
 8009188:	3316      	adds	r3, #22
 800918a:	db0b      	blt.n	80091a4 <_strtod_l+0x43c>
 800918c:	9b04      	ldr	r3, [sp, #16]
 800918e:	4640      	mov	r0, r8
 8009190:	1b5d      	subs	r5, r3, r5
 8009192:	4b59      	ldr	r3, [pc, #356]	; (80092f8 <_strtod_l+0x590>)
 8009194:	4649      	mov	r1, r9
 8009196:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800919a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800919e:	f7f7 fac5 	bl	800072c <__aeabi_ddiv>
 80091a2:	e79d      	b.n	80090e0 <_strtod_l+0x378>
 80091a4:	9b07      	ldr	r3, [sp, #28]
 80091a6:	1ba6      	subs	r6, r4, r6
 80091a8:	441e      	add	r6, r3
 80091aa:	2e00      	cmp	r6, #0
 80091ac:	dd74      	ble.n	8009298 <_strtod_l+0x530>
 80091ae:	f016 030f 	ands.w	r3, r6, #15
 80091b2:	d00a      	beq.n	80091ca <_strtod_l+0x462>
 80091b4:	4950      	ldr	r1, [pc, #320]	; (80092f8 <_strtod_l+0x590>)
 80091b6:	4642      	mov	r2, r8
 80091b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80091bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091c0:	464b      	mov	r3, r9
 80091c2:	f7f7 f989 	bl	80004d8 <__aeabi_dmul>
 80091c6:	4680      	mov	r8, r0
 80091c8:	4689      	mov	r9, r1
 80091ca:	f036 060f 	bics.w	r6, r6, #15
 80091ce:	d052      	beq.n	8009276 <_strtod_l+0x50e>
 80091d0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80091d4:	dd27      	ble.n	8009226 <_strtod_l+0x4be>
 80091d6:	f04f 0b00 	mov.w	fp, #0
 80091da:	f8cd b010 	str.w	fp, [sp, #16]
 80091de:	f8cd b020 	str.w	fp, [sp, #32]
 80091e2:	f8cd b018 	str.w	fp, [sp, #24]
 80091e6:	2322      	movs	r3, #34	; 0x22
 80091e8:	f04f 0800 	mov.w	r8, #0
 80091ec:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80092f0 <_strtod_l+0x588>
 80091f0:	f8ca 3000 	str.w	r3, [sl]
 80091f4:	9b08      	ldr	r3, [sp, #32]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	f43f adf7 	beq.w	8008dea <_strtod_l+0x82>
 80091fc:	4650      	mov	r0, sl
 80091fe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009200:	f002 f946 	bl	800b490 <_Bfree>
 8009204:	4650      	mov	r0, sl
 8009206:	9906      	ldr	r1, [sp, #24]
 8009208:	f002 f942 	bl	800b490 <_Bfree>
 800920c:	4650      	mov	r0, sl
 800920e:	9904      	ldr	r1, [sp, #16]
 8009210:	f002 f93e 	bl	800b490 <_Bfree>
 8009214:	4650      	mov	r0, sl
 8009216:	9908      	ldr	r1, [sp, #32]
 8009218:	f002 f93a 	bl	800b490 <_Bfree>
 800921c:	4659      	mov	r1, fp
 800921e:	4650      	mov	r0, sl
 8009220:	f002 f936 	bl	800b490 <_Bfree>
 8009224:	e5e1      	b.n	8008dea <_strtod_l+0x82>
 8009226:	4b35      	ldr	r3, [pc, #212]	; (80092fc <_strtod_l+0x594>)
 8009228:	4640      	mov	r0, r8
 800922a:	9305      	str	r3, [sp, #20]
 800922c:	2300      	movs	r3, #0
 800922e:	4649      	mov	r1, r9
 8009230:	461f      	mov	r7, r3
 8009232:	1136      	asrs	r6, r6, #4
 8009234:	2e01      	cmp	r6, #1
 8009236:	dc21      	bgt.n	800927c <_strtod_l+0x514>
 8009238:	b10b      	cbz	r3, 800923e <_strtod_l+0x4d6>
 800923a:	4680      	mov	r8, r0
 800923c:	4689      	mov	r9, r1
 800923e:	4b2f      	ldr	r3, [pc, #188]	; (80092fc <_strtod_l+0x594>)
 8009240:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009244:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009248:	4642      	mov	r2, r8
 800924a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800924e:	464b      	mov	r3, r9
 8009250:	f7f7 f942 	bl	80004d8 <__aeabi_dmul>
 8009254:	4b26      	ldr	r3, [pc, #152]	; (80092f0 <_strtod_l+0x588>)
 8009256:	460a      	mov	r2, r1
 8009258:	400b      	ands	r3, r1
 800925a:	4929      	ldr	r1, [pc, #164]	; (8009300 <_strtod_l+0x598>)
 800925c:	4680      	mov	r8, r0
 800925e:	428b      	cmp	r3, r1
 8009260:	d8b9      	bhi.n	80091d6 <_strtod_l+0x46e>
 8009262:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009266:	428b      	cmp	r3, r1
 8009268:	bf86      	itte	hi
 800926a:	f04f 38ff 	movhi.w	r8, #4294967295
 800926e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009304 <_strtod_l+0x59c>
 8009272:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009276:	2300      	movs	r3, #0
 8009278:	9305      	str	r3, [sp, #20]
 800927a:	e07f      	b.n	800937c <_strtod_l+0x614>
 800927c:	07f2      	lsls	r2, r6, #31
 800927e:	d505      	bpl.n	800928c <_strtod_l+0x524>
 8009280:	9b05      	ldr	r3, [sp, #20]
 8009282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009286:	f7f7 f927 	bl	80004d8 <__aeabi_dmul>
 800928a:	2301      	movs	r3, #1
 800928c:	9a05      	ldr	r2, [sp, #20]
 800928e:	3701      	adds	r7, #1
 8009290:	3208      	adds	r2, #8
 8009292:	1076      	asrs	r6, r6, #1
 8009294:	9205      	str	r2, [sp, #20]
 8009296:	e7cd      	b.n	8009234 <_strtod_l+0x4cc>
 8009298:	d0ed      	beq.n	8009276 <_strtod_l+0x50e>
 800929a:	4276      	negs	r6, r6
 800929c:	f016 020f 	ands.w	r2, r6, #15
 80092a0:	d00a      	beq.n	80092b8 <_strtod_l+0x550>
 80092a2:	4b15      	ldr	r3, [pc, #84]	; (80092f8 <_strtod_l+0x590>)
 80092a4:	4640      	mov	r0, r8
 80092a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092aa:	4649      	mov	r1, r9
 80092ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b0:	f7f7 fa3c 	bl	800072c <__aeabi_ddiv>
 80092b4:	4680      	mov	r8, r0
 80092b6:	4689      	mov	r9, r1
 80092b8:	1136      	asrs	r6, r6, #4
 80092ba:	d0dc      	beq.n	8009276 <_strtod_l+0x50e>
 80092bc:	2e1f      	cmp	r6, #31
 80092be:	dd23      	ble.n	8009308 <_strtod_l+0x5a0>
 80092c0:	f04f 0b00 	mov.w	fp, #0
 80092c4:	f8cd b010 	str.w	fp, [sp, #16]
 80092c8:	f8cd b020 	str.w	fp, [sp, #32]
 80092cc:	f8cd b018 	str.w	fp, [sp, #24]
 80092d0:	2322      	movs	r3, #34	; 0x22
 80092d2:	f04f 0800 	mov.w	r8, #0
 80092d6:	f04f 0900 	mov.w	r9, #0
 80092da:	f8ca 3000 	str.w	r3, [sl]
 80092de:	e789      	b.n	80091f4 <_strtod_l+0x48c>
 80092e0:	0800d359 	.word	0x0800d359
 80092e4:	0800d39c 	.word	0x0800d39c
 80092e8:	0800d351 	.word	0x0800d351
 80092ec:	0800d4dc 	.word	0x0800d4dc
 80092f0:	7ff00000 	.word	0x7ff00000
 80092f4:	0800d7f0 	.word	0x0800d7f0
 80092f8:	0800d6d0 	.word	0x0800d6d0
 80092fc:	0800d6a8 	.word	0x0800d6a8
 8009300:	7ca00000 	.word	0x7ca00000
 8009304:	7fefffff 	.word	0x7fefffff
 8009308:	f016 0310 	ands.w	r3, r6, #16
 800930c:	bf18      	it	ne
 800930e:	236a      	movne	r3, #106	; 0x6a
 8009310:	4640      	mov	r0, r8
 8009312:	9305      	str	r3, [sp, #20]
 8009314:	4649      	mov	r1, r9
 8009316:	2300      	movs	r3, #0
 8009318:	4fb0      	ldr	r7, [pc, #704]	; (80095dc <_strtod_l+0x874>)
 800931a:	07f2      	lsls	r2, r6, #31
 800931c:	d504      	bpl.n	8009328 <_strtod_l+0x5c0>
 800931e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009322:	f7f7 f8d9 	bl	80004d8 <__aeabi_dmul>
 8009326:	2301      	movs	r3, #1
 8009328:	1076      	asrs	r6, r6, #1
 800932a:	f107 0708 	add.w	r7, r7, #8
 800932e:	d1f4      	bne.n	800931a <_strtod_l+0x5b2>
 8009330:	b10b      	cbz	r3, 8009336 <_strtod_l+0x5ce>
 8009332:	4680      	mov	r8, r0
 8009334:	4689      	mov	r9, r1
 8009336:	9b05      	ldr	r3, [sp, #20]
 8009338:	b1c3      	cbz	r3, 800936c <_strtod_l+0x604>
 800933a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800933e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009342:	2b00      	cmp	r3, #0
 8009344:	4649      	mov	r1, r9
 8009346:	dd11      	ble.n	800936c <_strtod_l+0x604>
 8009348:	2b1f      	cmp	r3, #31
 800934a:	f340 8127 	ble.w	800959c <_strtod_l+0x834>
 800934e:	2b34      	cmp	r3, #52	; 0x34
 8009350:	bfd8      	it	le
 8009352:	f04f 33ff 	movle.w	r3, #4294967295
 8009356:	f04f 0800 	mov.w	r8, #0
 800935a:	bfcf      	iteee	gt
 800935c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009360:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009364:	fa03 f202 	lslle.w	r2, r3, r2
 8009368:	ea02 0901 	andle.w	r9, r2, r1
 800936c:	2200      	movs	r2, #0
 800936e:	2300      	movs	r3, #0
 8009370:	4640      	mov	r0, r8
 8009372:	4649      	mov	r1, r9
 8009374:	f7f7 fb18 	bl	80009a8 <__aeabi_dcmpeq>
 8009378:	2800      	cmp	r0, #0
 800937a:	d1a1      	bne.n	80092c0 <_strtod_l+0x558>
 800937c:	9b06      	ldr	r3, [sp, #24]
 800937e:	465a      	mov	r2, fp
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	4650      	mov	r0, sl
 8009384:	4623      	mov	r3, r4
 8009386:	9908      	ldr	r1, [sp, #32]
 8009388:	f002 f8ea 	bl	800b560 <__s2b>
 800938c:	9008      	str	r0, [sp, #32]
 800938e:	2800      	cmp	r0, #0
 8009390:	f43f af21 	beq.w	80091d6 <_strtod_l+0x46e>
 8009394:	9b04      	ldr	r3, [sp, #16]
 8009396:	f04f 0b00 	mov.w	fp, #0
 800939a:	1b5d      	subs	r5, r3, r5
 800939c:	9b07      	ldr	r3, [sp, #28]
 800939e:	f8cd b010 	str.w	fp, [sp, #16]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	bfb4      	ite	lt
 80093a6:	462b      	movlt	r3, r5
 80093a8:	2300      	movge	r3, #0
 80093aa:	930e      	str	r3, [sp, #56]	; 0x38
 80093ac:	9b07      	ldr	r3, [sp, #28]
 80093ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80093b2:	9314      	str	r3, [sp, #80]	; 0x50
 80093b4:	9b08      	ldr	r3, [sp, #32]
 80093b6:	4650      	mov	r0, sl
 80093b8:	6859      	ldr	r1, [r3, #4]
 80093ba:	f002 f829 	bl	800b410 <_Balloc>
 80093be:	9006      	str	r0, [sp, #24]
 80093c0:	2800      	cmp	r0, #0
 80093c2:	f43f af10 	beq.w	80091e6 <_strtod_l+0x47e>
 80093c6:	9b08      	ldr	r3, [sp, #32]
 80093c8:	300c      	adds	r0, #12
 80093ca:	691a      	ldr	r2, [r3, #16]
 80093cc:	f103 010c 	add.w	r1, r3, #12
 80093d0:	3202      	adds	r2, #2
 80093d2:	0092      	lsls	r2, r2, #2
 80093d4:	f7fe fd70 	bl	8007eb8 <memcpy>
 80093d8:	ab1c      	add	r3, sp, #112	; 0x70
 80093da:	9301      	str	r3, [sp, #4]
 80093dc:	ab1b      	add	r3, sp, #108	; 0x6c
 80093de:	9300      	str	r3, [sp, #0]
 80093e0:	4642      	mov	r2, r8
 80093e2:	464b      	mov	r3, r9
 80093e4:	4650      	mov	r0, sl
 80093e6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80093ea:	f002 fbfb 	bl	800bbe4 <__d2b>
 80093ee:	901a      	str	r0, [sp, #104]	; 0x68
 80093f0:	2800      	cmp	r0, #0
 80093f2:	f43f aef8 	beq.w	80091e6 <_strtod_l+0x47e>
 80093f6:	2101      	movs	r1, #1
 80093f8:	4650      	mov	r0, sl
 80093fa:	f002 f949 	bl	800b690 <__i2b>
 80093fe:	4603      	mov	r3, r0
 8009400:	9004      	str	r0, [sp, #16]
 8009402:	2800      	cmp	r0, #0
 8009404:	f43f aeef 	beq.w	80091e6 <_strtod_l+0x47e>
 8009408:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800940a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800940c:	2d00      	cmp	r5, #0
 800940e:	bfab      	itete	ge
 8009410:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009412:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8009414:	18ee      	addge	r6, r5, r3
 8009416:	1b5c      	sublt	r4, r3, r5
 8009418:	9b05      	ldr	r3, [sp, #20]
 800941a:	bfa8      	it	ge
 800941c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800941e:	eba5 0503 	sub.w	r5, r5, r3
 8009422:	4415      	add	r5, r2
 8009424:	4b6e      	ldr	r3, [pc, #440]	; (80095e0 <_strtod_l+0x878>)
 8009426:	f105 35ff 	add.w	r5, r5, #4294967295
 800942a:	bfb8      	it	lt
 800942c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800942e:	429d      	cmp	r5, r3
 8009430:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009434:	f280 80c4 	bge.w	80095c0 <_strtod_l+0x858>
 8009438:	1b5b      	subs	r3, r3, r5
 800943a:	2b1f      	cmp	r3, #31
 800943c:	f04f 0701 	mov.w	r7, #1
 8009440:	eba2 0203 	sub.w	r2, r2, r3
 8009444:	f300 80b1 	bgt.w	80095aa <_strtod_l+0x842>
 8009448:	2500      	movs	r5, #0
 800944a:	fa07 f303 	lsl.w	r3, r7, r3
 800944e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009450:	18b7      	adds	r7, r6, r2
 8009452:	9b05      	ldr	r3, [sp, #20]
 8009454:	42be      	cmp	r6, r7
 8009456:	4414      	add	r4, r2
 8009458:	441c      	add	r4, r3
 800945a:	4633      	mov	r3, r6
 800945c:	bfa8      	it	ge
 800945e:	463b      	movge	r3, r7
 8009460:	42a3      	cmp	r3, r4
 8009462:	bfa8      	it	ge
 8009464:	4623      	movge	r3, r4
 8009466:	2b00      	cmp	r3, #0
 8009468:	bfc2      	ittt	gt
 800946a:	1aff      	subgt	r7, r7, r3
 800946c:	1ae4      	subgt	r4, r4, r3
 800946e:	1af6      	subgt	r6, r6, r3
 8009470:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009472:	2b00      	cmp	r3, #0
 8009474:	dd17      	ble.n	80094a6 <_strtod_l+0x73e>
 8009476:	461a      	mov	r2, r3
 8009478:	4650      	mov	r0, sl
 800947a:	9904      	ldr	r1, [sp, #16]
 800947c:	f002 f9c6 	bl	800b80c <__pow5mult>
 8009480:	9004      	str	r0, [sp, #16]
 8009482:	2800      	cmp	r0, #0
 8009484:	f43f aeaf 	beq.w	80091e6 <_strtod_l+0x47e>
 8009488:	4601      	mov	r1, r0
 800948a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800948c:	4650      	mov	r0, sl
 800948e:	f002 f915 	bl	800b6bc <__multiply>
 8009492:	9009      	str	r0, [sp, #36]	; 0x24
 8009494:	2800      	cmp	r0, #0
 8009496:	f43f aea6 	beq.w	80091e6 <_strtod_l+0x47e>
 800949a:	4650      	mov	r0, sl
 800949c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800949e:	f001 fff7 	bl	800b490 <_Bfree>
 80094a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094a4:	931a      	str	r3, [sp, #104]	; 0x68
 80094a6:	2f00      	cmp	r7, #0
 80094a8:	f300 808e 	bgt.w	80095c8 <_strtod_l+0x860>
 80094ac:	9b07      	ldr	r3, [sp, #28]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	dd08      	ble.n	80094c4 <_strtod_l+0x75c>
 80094b2:	4650      	mov	r0, sl
 80094b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80094b6:	9906      	ldr	r1, [sp, #24]
 80094b8:	f002 f9a8 	bl	800b80c <__pow5mult>
 80094bc:	9006      	str	r0, [sp, #24]
 80094be:	2800      	cmp	r0, #0
 80094c0:	f43f ae91 	beq.w	80091e6 <_strtod_l+0x47e>
 80094c4:	2c00      	cmp	r4, #0
 80094c6:	dd08      	ble.n	80094da <_strtod_l+0x772>
 80094c8:	4622      	mov	r2, r4
 80094ca:	4650      	mov	r0, sl
 80094cc:	9906      	ldr	r1, [sp, #24]
 80094ce:	f002 f9f7 	bl	800b8c0 <__lshift>
 80094d2:	9006      	str	r0, [sp, #24]
 80094d4:	2800      	cmp	r0, #0
 80094d6:	f43f ae86 	beq.w	80091e6 <_strtod_l+0x47e>
 80094da:	2e00      	cmp	r6, #0
 80094dc:	dd08      	ble.n	80094f0 <_strtod_l+0x788>
 80094de:	4632      	mov	r2, r6
 80094e0:	4650      	mov	r0, sl
 80094e2:	9904      	ldr	r1, [sp, #16]
 80094e4:	f002 f9ec 	bl	800b8c0 <__lshift>
 80094e8:	9004      	str	r0, [sp, #16]
 80094ea:	2800      	cmp	r0, #0
 80094ec:	f43f ae7b 	beq.w	80091e6 <_strtod_l+0x47e>
 80094f0:	4650      	mov	r0, sl
 80094f2:	9a06      	ldr	r2, [sp, #24]
 80094f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80094f6:	f002 fa6f 	bl	800b9d8 <__mdiff>
 80094fa:	4683      	mov	fp, r0
 80094fc:	2800      	cmp	r0, #0
 80094fe:	f43f ae72 	beq.w	80091e6 <_strtod_l+0x47e>
 8009502:	2400      	movs	r4, #0
 8009504:	68c3      	ldr	r3, [r0, #12]
 8009506:	9904      	ldr	r1, [sp, #16]
 8009508:	60c4      	str	r4, [r0, #12]
 800950a:	930b      	str	r3, [sp, #44]	; 0x2c
 800950c:	f002 fa48 	bl	800b9a0 <__mcmp>
 8009510:	42a0      	cmp	r0, r4
 8009512:	da6b      	bge.n	80095ec <_strtod_l+0x884>
 8009514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009516:	ea53 0308 	orrs.w	r3, r3, r8
 800951a:	f040 8091 	bne.w	8009640 <_strtod_l+0x8d8>
 800951e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009522:	2b00      	cmp	r3, #0
 8009524:	f040 808c 	bne.w	8009640 <_strtod_l+0x8d8>
 8009528:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800952c:	0d1b      	lsrs	r3, r3, #20
 800952e:	051b      	lsls	r3, r3, #20
 8009530:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009534:	f240 8084 	bls.w	8009640 <_strtod_l+0x8d8>
 8009538:	f8db 3014 	ldr.w	r3, [fp, #20]
 800953c:	b91b      	cbnz	r3, 8009546 <_strtod_l+0x7de>
 800953e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009542:	2b01      	cmp	r3, #1
 8009544:	dd7c      	ble.n	8009640 <_strtod_l+0x8d8>
 8009546:	4659      	mov	r1, fp
 8009548:	2201      	movs	r2, #1
 800954a:	4650      	mov	r0, sl
 800954c:	f002 f9b8 	bl	800b8c0 <__lshift>
 8009550:	9904      	ldr	r1, [sp, #16]
 8009552:	4683      	mov	fp, r0
 8009554:	f002 fa24 	bl	800b9a0 <__mcmp>
 8009558:	2800      	cmp	r0, #0
 800955a:	dd71      	ble.n	8009640 <_strtod_l+0x8d8>
 800955c:	9905      	ldr	r1, [sp, #20]
 800955e:	464b      	mov	r3, r9
 8009560:	4a20      	ldr	r2, [pc, #128]	; (80095e4 <_strtod_l+0x87c>)
 8009562:	2900      	cmp	r1, #0
 8009564:	f000 808c 	beq.w	8009680 <_strtod_l+0x918>
 8009568:	ea02 0109 	and.w	r1, r2, r9
 800956c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009570:	f300 8086 	bgt.w	8009680 <_strtod_l+0x918>
 8009574:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009578:	f77f aeaa 	ble.w	80092d0 <_strtod_l+0x568>
 800957c:	4640      	mov	r0, r8
 800957e:	4649      	mov	r1, r9
 8009580:	4b19      	ldr	r3, [pc, #100]	; (80095e8 <_strtod_l+0x880>)
 8009582:	2200      	movs	r2, #0
 8009584:	f7f6 ffa8 	bl	80004d8 <__aeabi_dmul>
 8009588:	460b      	mov	r3, r1
 800958a:	4303      	orrs	r3, r0
 800958c:	bf08      	it	eq
 800958e:	2322      	moveq	r3, #34	; 0x22
 8009590:	4680      	mov	r8, r0
 8009592:	4689      	mov	r9, r1
 8009594:	bf08      	it	eq
 8009596:	f8ca 3000 	streq.w	r3, [sl]
 800959a:	e62f      	b.n	80091fc <_strtod_l+0x494>
 800959c:	f04f 32ff 	mov.w	r2, #4294967295
 80095a0:	fa02 f303 	lsl.w	r3, r2, r3
 80095a4:	ea03 0808 	and.w	r8, r3, r8
 80095a8:	e6e0      	b.n	800936c <_strtod_l+0x604>
 80095aa:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80095ae:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80095b2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80095b6:	35e2      	adds	r5, #226	; 0xe2
 80095b8:	fa07 f505 	lsl.w	r5, r7, r5
 80095bc:	970f      	str	r7, [sp, #60]	; 0x3c
 80095be:	e747      	b.n	8009450 <_strtod_l+0x6e8>
 80095c0:	2301      	movs	r3, #1
 80095c2:	2500      	movs	r5, #0
 80095c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80095c6:	e743      	b.n	8009450 <_strtod_l+0x6e8>
 80095c8:	463a      	mov	r2, r7
 80095ca:	4650      	mov	r0, sl
 80095cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80095ce:	f002 f977 	bl	800b8c0 <__lshift>
 80095d2:	901a      	str	r0, [sp, #104]	; 0x68
 80095d4:	2800      	cmp	r0, #0
 80095d6:	f47f af69 	bne.w	80094ac <_strtod_l+0x744>
 80095da:	e604      	b.n	80091e6 <_strtod_l+0x47e>
 80095dc:	0800d3b0 	.word	0x0800d3b0
 80095e0:	fffffc02 	.word	0xfffffc02
 80095e4:	7ff00000 	.word	0x7ff00000
 80095e8:	39500000 	.word	0x39500000
 80095ec:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80095f0:	d165      	bne.n	80096be <_strtod_l+0x956>
 80095f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80095f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095f8:	b35a      	cbz	r2, 8009652 <_strtod_l+0x8ea>
 80095fa:	4a99      	ldr	r2, [pc, #612]	; (8009860 <_strtod_l+0xaf8>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d12b      	bne.n	8009658 <_strtod_l+0x8f0>
 8009600:	9b05      	ldr	r3, [sp, #20]
 8009602:	4641      	mov	r1, r8
 8009604:	b303      	cbz	r3, 8009648 <_strtod_l+0x8e0>
 8009606:	464a      	mov	r2, r9
 8009608:	4b96      	ldr	r3, [pc, #600]	; (8009864 <_strtod_l+0xafc>)
 800960a:	4013      	ands	r3, r2
 800960c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009610:	f04f 32ff 	mov.w	r2, #4294967295
 8009614:	d81b      	bhi.n	800964e <_strtod_l+0x8e6>
 8009616:	0d1b      	lsrs	r3, r3, #20
 8009618:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800961c:	fa02 f303 	lsl.w	r3, r2, r3
 8009620:	4299      	cmp	r1, r3
 8009622:	d119      	bne.n	8009658 <_strtod_l+0x8f0>
 8009624:	4b90      	ldr	r3, [pc, #576]	; (8009868 <_strtod_l+0xb00>)
 8009626:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009628:	429a      	cmp	r2, r3
 800962a:	d102      	bne.n	8009632 <_strtod_l+0x8ca>
 800962c:	3101      	adds	r1, #1
 800962e:	f43f adda 	beq.w	80091e6 <_strtod_l+0x47e>
 8009632:	f04f 0800 	mov.w	r8, #0
 8009636:	4b8b      	ldr	r3, [pc, #556]	; (8009864 <_strtod_l+0xafc>)
 8009638:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800963a:	401a      	ands	r2, r3
 800963c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009640:	9b05      	ldr	r3, [sp, #20]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d19a      	bne.n	800957c <_strtod_l+0x814>
 8009646:	e5d9      	b.n	80091fc <_strtod_l+0x494>
 8009648:	f04f 33ff 	mov.w	r3, #4294967295
 800964c:	e7e8      	b.n	8009620 <_strtod_l+0x8b8>
 800964e:	4613      	mov	r3, r2
 8009650:	e7e6      	b.n	8009620 <_strtod_l+0x8b8>
 8009652:	ea53 0308 	orrs.w	r3, r3, r8
 8009656:	d081      	beq.n	800955c <_strtod_l+0x7f4>
 8009658:	b1e5      	cbz	r5, 8009694 <_strtod_l+0x92c>
 800965a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800965c:	421d      	tst	r5, r3
 800965e:	d0ef      	beq.n	8009640 <_strtod_l+0x8d8>
 8009660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009662:	4640      	mov	r0, r8
 8009664:	4649      	mov	r1, r9
 8009666:	9a05      	ldr	r2, [sp, #20]
 8009668:	b1c3      	cbz	r3, 800969c <_strtod_l+0x934>
 800966a:	f7ff fb5b 	bl	8008d24 <sulp>
 800966e:	4602      	mov	r2, r0
 8009670:	460b      	mov	r3, r1
 8009672:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009676:	f7f6 fd79 	bl	800016c <__adddf3>
 800967a:	4680      	mov	r8, r0
 800967c:	4689      	mov	r9, r1
 800967e:	e7df      	b.n	8009640 <_strtod_l+0x8d8>
 8009680:	4013      	ands	r3, r2
 8009682:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009686:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800968a:	f04f 38ff 	mov.w	r8, #4294967295
 800968e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009692:	e7d5      	b.n	8009640 <_strtod_l+0x8d8>
 8009694:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009696:	ea13 0f08 	tst.w	r3, r8
 800969a:	e7e0      	b.n	800965e <_strtod_l+0x8f6>
 800969c:	f7ff fb42 	bl	8008d24 <sulp>
 80096a0:	4602      	mov	r2, r0
 80096a2:	460b      	mov	r3, r1
 80096a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80096a8:	f7f6 fd5e 	bl	8000168 <__aeabi_dsub>
 80096ac:	2200      	movs	r2, #0
 80096ae:	2300      	movs	r3, #0
 80096b0:	4680      	mov	r8, r0
 80096b2:	4689      	mov	r9, r1
 80096b4:	f7f7 f978 	bl	80009a8 <__aeabi_dcmpeq>
 80096b8:	2800      	cmp	r0, #0
 80096ba:	d0c1      	beq.n	8009640 <_strtod_l+0x8d8>
 80096bc:	e608      	b.n	80092d0 <_strtod_l+0x568>
 80096be:	4658      	mov	r0, fp
 80096c0:	9904      	ldr	r1, [sp, #16]
 80096c2:	f002 faeb 	bl	800bc9c <__ratio>
 80096c6:	2200      	movs	r2, #0
 80096c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80096cc:	4606      	mov	r6, r0
 80096ce:	460f      	mov	r7, r1
 80096d0:	f7f7 f97e 	bl	80009d0 <__aeabi_dcmple>
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d070      	beq.n	80097ba <_strtod_l+0xa52>
 80096d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d042      	beq.n	8009764 <_strtod_l+0x9fc>
 80096de:	2600      	movs	r6, #0
 80096e0:	4f62      	ldr	r7, [pc, #392]	; (800986c <_strtod_l+0xb04>)
 80096e2:	4d62      	ldr	r5, [pc, #392]	; (800986c <_strtod_l+0xb04>)
 80096e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096ea:	0d1b      	lsrs	r3, r3, #20
 80096ec:	051b      	lsls	r3, r3, #20
 80096ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80096f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80096f2:	4b5f      	ldr	r3, [pc, #380]	; (8009870 <_strtod_l+0xb08>)
 80096f4:	429a      	cmp	r2, r3
 80096f6:	f040 80c3 	bne.w	8009880 <_strtod_l+0xb18>
 80096fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096fc:	4640      	mov	r0, r8
 80096fe:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009702:	4649      	mov	r1, r9
 8009704:	f002 f9f4 	bl	800baf0 <__ulp>
 8009708:	4602      	mov	r2, r0
 800970a:	460b      	mov	r3, r1
 800970c:	4630      	mov	r0, r6
 800970e:	4639      	mov	r1, r7
 8009710:	f7f6 fee2 	bl	80004d8 <__aeabi_dmul>
 8009714:	4642      	mov	r2, r8
 8009716:	464b      	mov	r3, r9
 8009718:	f7f6 fd28 	bl	800016c <__adddf3>
 800971c:	460b      	mov	r3, r1
 800971e:	4951      	ldr	r1, [pc, #324]	; (8009864 <_strtod_l+0xafc>)
 8009720:	4a54      	ldr	r2, [pc, #336]	; (8009874 <_strtod_l+0xb0c>)
 8009722:	4019      	ands	r1, r3
 8009724:	4291      	cmp	r1, r2
 8009726:	4680      	mov	r8, r0
 8009728:	d95d      	bls.n	80097e6 <_strtod_l+0xa7e>
 800972a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800972c:	4b4e      	ldr	r3, [pc, #312]	; (8009868 <_strtod_l+0xb00>)
 800972e:	429a      	cmp	r2, r3
 8009730:	d103      	bne.n	800973a <_strtod_l+0x9d2>
 8009732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009734:	3301      	adds	r3, #1
 8009736:	f43f ad56 	beq.w	80091e6 <_strtod_l+0x47e>
 800973a:	f04f 38ff 	mov.w	r8, #4294967295
 800973e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009868 <_strtod_l+0xb00>
 8009742:	4650      	mov	r0, sl
 8009744:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009746:	f001 fea3 	bl	800b490 <_Bfree>
 800974a:	4650      	mov	r0, sl
 800974c:	9906      	ldr	r1, [sp, #24]
 800974e:	f001 fe9f 	bl	800b490 <_Bfree>
 8009752:	4650      	mov	r0, sl
 8009754:	9904      	ldr	r1, [sp, #16]
 8009756:	f001 fe9b 	bl	800b490 <_Bfree>
 800975a:	4659      	mov	r1, fp
 800975c:	4650      	mov	r0, sl
 800975e:	f001 fe97 	bl	800b490 <_Bfree>
 8009762:	e627      	b.n	80093b4 <_strtod_l+0x64c>
 8009764:	f1b8 0f00 	cmp.w	r8, #0
 8009768:	d119      	bne.n	800979e <_strtod_l+0xa36>
 800976a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800976c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009770:	b9e3      	cbnz	r3, 80097ac <_strtod_l+0xa44>
 8009772:	2200      	movs	r2, #0
 8009774:	4630      	mov	r0, r6
 8009776:	4639      	mov	r1, r7
 8009778:	4b3c      	ldr	r3, [pc, #240]	; (800986c <_strtod_l+0xb04>)
 800977a:	f7f7 f91f 	bl	80009bc <__aeabi_dcmplt>
 800977e:	b9c8      	cbnz	r0, 80097b4 <_strtod_l+0xa4c>
 8009780:	2200      	movs	r2, #0
 8009782:	4630      	mov	r0, r6
 8009784:	4639      	mov	r1, r7
 8009786:	4b3c      	ldr	r3, [pc, #240]	; (8009878 <_strtod_l+0xb10>)
 8009788:	f7f6 fea6 	bl	80004d8 <__aeabi_dmul>
 800978c:	4604      	mov	r4, r0
 800978e:	460d      	mov	r5, r1
 8009790:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009794:	9416      	str	r4, [sp, #88]	; 0x58
 8009796:	9317      	str	r3, [sp, #92]	; 0x5c
 8009798:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800979c:	e7a2      	b.n	80096e4 <_strtod_l+0x97c>
 800979e:	f1b8 0f01 	cmp.w	r8, #1
 80097a2:	d103      	bne.n	80097ac <_strtod_l+0xa44>
 80097a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f43f ad92 	beq.w	80092d0 <_strtod_l+0x568>
 80097ac:	2600      	movs	r6, #0
 80097ae:	2400      	movs	r4, #0
 80097b0:	4f32      	ldr	r7, [pc, #200]	; (800987c <_strtod_l+0xb14>)
 80097b2:	e796      	b.n	80096e2 <_strtod_l+0x97a>
 80097b4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80097b6:	4d30      	ldr	r5, [pc, #192]	; (8009878 <_strtod_l+0xb10>)
 80097b8:	e7ea      	b.n	8009790 <_strtod_l+0xa28>
 80097ba:	4b2f      	ldr	r3, [pc, #188]	; (8009878 <_strtod_l+0xb10>)
 80097bc:	2200      	movs	r2, #0
 80097be:	4630      	mov	r0, r6
 80097c0:	4639      	mov	r1, r7
 80097c2:	f7f6 fe89 	bl	80004d8 <__aeabi_dmul>
 80097c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097c8:	4604      	mov	r4, r0
 80097ca:	460d      	mov	r5, r1
 80097cc:	b933      	cbnz	r3, 80097dc <_strtod_l+0xa74>
 80097ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097d2:	9010      	str	r0, [sp, #64]	; 0x40
 80097d4:	9311      	str	r3, [sp, #68]	; 0x44
 80097d6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80097da:	e783      	b.n	80096e4 <_strtod_l+0x97c>
 80097dc:	4602      	mov	r2, r0
 80097de:	460b      	mov	r3, r1
 80097e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80097e4:	e7f7      	b.n	80097d6 <_strtod_l+0xa6e>
 80097e6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80097ea:	9b05      	ldr	r3, [sp, #20]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d1a8      	bne.n	8009742 <_strtod_l+0x9da>
 80097f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80097f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80097f6:	0d1b      	lsrs	r3, r3, #20
 80097f8:	051b      	lsls	r3, r3, #20
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d1a1      	bne.n	8009742 <_strtod_l+0x9da>
 80097fe:	4620      	mov	r0, r4
 8009800:	4629      	mov	r1, r5
 8009802:	f7f7 f9b1 	bl	8000b68 <__aeabi_d2lz>
 8009806:	f7f6 fe39 	bl	800047c <__aeabi_l2d>
 800980a:	4602      	mov	r2, r0
 800980c:	460b      	mov	r3, r1
 800980e:	4620      	mov	r0, r4
 8009810:	4629      	mov	r1, r5
 8009812:	f7f6 fca9 	bl	8000168 <__aeabi_dsub>
 8009816:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009818:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800981c:	ea43 0308 	orr.w	r3, r3, r8
 8009820:	4313      	orrs	r3, r2
 8009822:	4604      	mov	r4, r0
 8009824:	460d      	mov	r5, r1
 8009826:	d066      	beq.n	80098f6 <_strtod_l+0xb8e>
 8009828:	a309      	add	r3, pc, #36	; (adr r3, 8009850 <_strtod_l+0xae8>)
 800982a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982e:	f7f7 f8c5 	bl	80009bc <__aeabi_dcmplt>
 8009832:	2800      	cmp	r0, #0
 8009834:	f47f ace2 	bne.w	80091fc <_strtod_l+0x494>
 8009838:	a307      	add	r3, pc, #28	; (adr r3, 8009858 <_strtod_l+0xaf0>)
 800983a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983e:	4620      	mov	r0, r4
 8009840:	4629      	mov	r1, r5
 8009842:	f7f7 f8d9 	bl	80009f8 <__aeabi_dcmpgt>
 8009846:	2800      	cmp	r0, #0
 8009848:	f43f af7b 	beq.w	8009742 <_strtod_l+0x9da>
 800984c:	e4d6      	b.n	80091fc <_strtod_l+0x494>
 800984e:	bf00      	nop
 8009850:	94a03595 	.word	0x94a03595
 8009854:	3fdfffff 	.word	0x3fdfffff
 8009858:	35afe535 	.word	0x35afe535
 800985c:	3fe00000 	.word	0x3fe00000
 8009860:	000fffff 	.word	0x000fffff
 8009864:	7ff00000 	.word	0x7ff00000
 8009868:	7fefffff 	.word	0x7fefffff
 800986c:	3ff00000 	.word	0x3ff00000
 8009870:	7fe00000 	.word	0x7fe00000
 8009874:	7c9fffff 	.word	0x7c9fffff
 8009878:	3fe00000 	.word	0x3fe00000
 800987c:	bff00000 	.word	0xbff00000
 8009880:	9b05      	ldr	r3, [sp, #20]
 8009882:	b313      	cbz	r3, 80098ca <_strtod_l+0xb62>
 8009884:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009886:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800988a:	d81e      	bhi.n	80098ca <_strtod_l+0xb62>
 800988c:	a326      	add	r3, pc, #152	; (adr r3, 8009928 <_strtod_l+0xbc0>)
 800988e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009892:	4620      	mov	r0, r4
 8009894:	4629      	mov	r1, r5
 8009896:	f7f7 f89b 	bl	80009d0 <__aeabi_dcmple>
 800989a:	b190      	cbz	r0, 80098c2 <_strtod_l+0xb5a>
 800989c:	4629      	mov	r1, r5
 800989e:	4620      	mov	r0, r4
 80098a0:	f7f7 f8f2 	bl	8000a88 <__aeabi_d2uiz>
 80098a4:	2801      	cmp	r0, #1
 80098a6:	bf38      	it	cc
 80098a8:	2001      	movcc	r0, #1
 80098aa:	f7f6 fd9b 	bl	80003e4 <__aeabi_ui2d>
 80098ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098b0:	4604      	mov	r4, r0
 80098b2:	460d      	mov	r5, r1
 80098b4:	b9d3      	cbnz	r3, 80098ec <_strtod_l+0xb84>
 80098b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098ba:	9012      	str	r0, [sp, #72]	; 0x48
 80098bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80098be:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80098c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80098c4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80098c8:	1a9f      	subs	r7, r3, r2
 80098ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80098ce:	f002 f90f 	bl	800baf0 <__ulp>
 80098d2:	4602      	mov	r2, r0
 80098d4:	460b      	mov	r3, r1
 80098d6:	4630      	mov	r0, r6
 80098d8:	4639      	mov	r1, r7
 80098da:	f7f6 fdfd 	bl	80004d8 <__aeabi_dmul>
 80098de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80098e2:	f7f6 fc43 	bl	800016c <__adddf3>
 80098e6:	4680      	mov	r8, r0
 80098e8:	4689      	mov	r9, r1
 80098ea:	e77e      	b.n	80097ea <_strtod_l+0xa82>
 80098ec:	4602      	mov	r2, r0
 80098ee:	460b      	mov	r3, r1
 80098f0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80098f4:	e7e3      	b.n	80098be <_strtod_l+0xb56>
 80098f6:	a30e      	add	r3, pc, #56	; (adr r3, 8009930 <_strtod_l+0xbc8>)
 80098f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fc:	f7f7 f85e 	bl	80009bc <__aeabi_dcmplt>
 8009900:	e7a1      	b.n	8009846 <_strtod_l+0xade>
 8009902:	2300      	movs	r3, #0
 8009904:	930a      	str	r3, [sp, #40]	; 0x28
 8009906:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009908:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800990a:	6013      	str	r3, [r2, #0]
 800990c:	f7ff ba71 	b.w	8008df2 <_strtod_l+0x8a>
 8009910:	2a65      	cmp	r2, #101	; 0x65
 8009912:	f43f ab63 	beq.w	8008fdc <_strtod_l+0x274>
 8009916:	2a45      	cmp	r2, #69	; 0x45
 8009918:	f43f ab60 	beq.w	8008fdc <_strtod_l+0x274>
 800991c:	2301      	movs	r3, #1
 800991e:	f7ff bb95 	b.w	800904c <_strtod_l+0x2e4>
 8009922:	bf00      	nop
 8009924:	f3af 8000 	nop.w
 8009928:	ffc00000 	.word	0xffc00000
 800992c:	41dfffff 	.word	0x41dfffff
 8009930:	94a03595 	.word	0x94a03595
 8009934:	3fcfffff 	.word	0x3fcfffff

08009938 <_strtod_r>:
 8009938:	4b01      	ldr	r3, [pc, #4]	; (8009940 <_strtod_r+0x8>)
 800993a:	f7ff ba15 	b.w	8008d68 <_strtod_l>
 800993e:	bf00      	nop
 8009940:	20000094 	.word	0x20000094

08009944 <_strtol_l.constprop.0>:
 8009944:	2b01      	cmp	r3, #1
 8009946:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800994a:	4680      	mov	r8, r0
 800994c:	d001      	beq.n	8009952 <_strtol_l.constprop.0+0xe>
 800994e:	2b24      	cmp	r3, #36	; 0x24
 8009950:	d906      	bls.n	8009960 <_strtol_l.constprop.0+0x1c>
 8009952:	f7fe fa87 	bl	8007e64 <__errno>
 8009956:	2316      	movs	r3, #22
 8009958:	6003      	str	r3, [r0, #0]
 800995a:	2000      	movs	r0, #0
 800995c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009960:	460d      	mov	r5, r1
 8009962:	4f35      	ldr	r7, [pc, #212]	; (8009a38 <_strtol_l.constprop.0+0xf4>)
 8009964:	4628      	mov	r0, r5
 8009966:	f815 4b01 	ldrb.w	r4, [r5], #1
 800996a:	5de6      	ldrb	r6, [r4, r7]
 800996c:	f016 0608 	ands.w	r6, r6, #8
 8009970:	d1f8      	bne.n	8009964 <_strtol_l.constprop.0+0x20>
 8009972:	2c2d      	cmp	r4, #45	; 0x2d
 8009974:	d12f      	bne.n	80099d6 <_strtol_l.constprop.0+0x92>
 8009976:	2601      	movs	r6, #1
 8009978:	782c      	ldrb	r4, [r5, #0]
 800997a:	1c85      	adds	r5, r0, #2
 800997c:	2b00      	cmp	r3, #0
 800997e:	d057      	beq.n	8009a30 <_strtol_l.constprop.0+0xec>
 8009980:	2b10      	cmp	r3, #16
 8009982:	d109      	bne.n	8009998 <_strtol_l.constprop.0+0x54>
 8009984:	2c30      	cmp	r4, #48	; 0x30
 8009986:	d107      	bne.n	8009998 <_strtol_l.constprop.0+0x54>
 8009988:	7828      	ldrb	r0, [r5, #0]
 800998a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800998e:	2858      	cmp	r0, #88	; 0x58
 8009990:	d149      	bne.n	8009a26 <_strtol_l.constprop.0+0xe2>
 8009992:	2310      	movs	r3, #16
 8009994:	786c      	ldrb	r4, [r5, #1]
 8009996:	3502      	adds	r5, #2
 8009998:	2700      	movs	r7, #0
 800999a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800999e:	f10e 3eff 	add.w	lr, lr, #4294967295
 80099a2:	fbbe f9f3 	udiv	r9, lr, r3
 80099a6:	4638      	mov	r0, r7
 80099a8:	fb03 ea19 	mls	sl, r3, r9, lr
 80099ac:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80099b0:	f1bc 0f09 	cmp.w	ip, #9
 80099b4:	d814      	bhi.n	80099e0 <_strtol_l.constprop.0+0x9c>
 80099b6:	4664      	mov	r4, ip
 80099b8:	42a3      	cmp	r3, r4
 80099ba:	dd22      	ble.n	8009a02 <_strtol_l.constprop.0+0xbe>
 80099bc:	2f00      	cmp	r7, #0
 80099be:	db1d      	blt.n	80099fc <_strtol_l.constprop.0+0xb8>
 80099c0:	4581      	cmp	r9, r0
 80099c2:	d31b      	bcc.n	80099fc <_strtol_l.constprop.0+0xb8>
 80099c4:	d101      	bne.n	80099ca <_strtol_l.constprop.0+0x86>
 80099c6:	45a2      	cmp	sl, r4
 80099c8:	db18      	blt.n	80099fc <_strtol_l.constprop.0+0xb8>
 80099ca:	2701      	movs	r7, #1
 80099cc:	fb00 4003 	mla	r0, r0, r3, r4
 80099d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80099d4:	e7ea      	b.n	80099ac <_strtol_l.constprop.0+0x68>
 80099d6:	2c2b      	cmp	r4, #43	; 0x2b
 80099d8:	bf04      	itt	eq
 80099da:	782c      	ldrbeq	r4, [r5, #0]
 80099dc:	1c85      	addeq	r5, r0, #2
 80099de:	e7cd      	b.n	800997c <_strtol_l.constprop.0+0x38>
 80099e0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80099e4:	f1bc 0f19 	cmp.w	ip, #25
 80099e8:	d801      	bhi.n	80099ee <_strtol_l.constprop.0+0xaa>
 80099ea:	3c37      	subs	r4, #55	; 0x37
 80099ec:	e7e4      	b.n	80099b8 <_strtol_l.constprop.0+0x74>
 80099ee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80099f2:	f1bc 0f19 	cmp.w	ip, #25
 80099f6:	d804      	bhi.n	8009a02 <_strtol_l.constprop.0+0xbe>
 80099f8:	3c57      	subs	r4, #87	; 0x57
 80099fa:	e7dd      	b.n	80099b8 <_strtol_l.constprop.0+0x74>
 80099fc:	f04f 37ff 	mov.w	r7, #4294967295
 8009a00:	e7e6      	b.n	80099d0 <_strtol_l.constprop.0+0x8c>
 8009a02:	2f00      	cmp	r7, #0
 8009a04:	da07      	bge.n	8009a16 <_strtol_l.constprop.0+0xd2>
 8009a06:	2322      	movs	r3, #34	; 0x22
 8009a08:	4670      	mov	r0, lr
 8009a0a:	f8c8 3000 	str.w	r3, [r8]
 8009a0e:	2a00      	cmp	r2, #0
 8009a10:	d0a4      	beq.n	800995c <_strtol_l.constprop.0+0x18>
 8009a12:	1e69      	subs	r1, r5, #1
 8009a14:	e005      	b.n	8009a22 <_strtol_l.constprop.0+0xde>
 8009a16:	b106      	cbz	r6, 8009a1a <_strtol_l.constprop.0+0xd6>
 8009a18:	4240      	negs	r0, r0
 8009a1a:	2a00      	cmp	r2, #0
 8009a1c:	d09e      	beq.n	800995c <_strtol_l.constprop.0+0x18>
 8009a1e:	2f00      	cmp	r7, #0
 8009a20:	d1f7      	bne.n	8009a12 <_strtol_l.constprop.0+0xce>
 8009a22:	6011      	str	r1, [r2, #0]
 8009a24:	e79a      	b.n	800995c <_strtol_l.constprop.0+0x18>
 8009a26:	2430      	movs	r4, #48	; 0x30
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d1b5      	bne.n	8009998 <_strtol_l.constprop.0+0x54>
 8009a2c:	2308      	movs	r3, #8
 8009a2e:	e7b3      	b.n	8009998 <_strtol_l.constprop.0+0x54>
 8009a30:	2c30      	cmp	r4, #48	; 0x30
 8009a32:	d0a9      	beq.n	8009988 <_strtol_l.constprop.0+0x44>
 8009a34:	230a      	movs	r3, #10
 8009a36:	e7af      	b.n	8009998 <_strtol_l.constprop.0+0x54>
 8009a38:	0800d3d9 	.word	0x0800d3d9

08009a3c <_strtol_r>:
 8009a3c:	f7ff bf82 	b.w	8009944 <_strtol_l.constprop.0>

08009a40 <__swbuf_r>:
 8009a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a42:	460e      	mov	r6, r1
 8009a44:	4614      	mov	r4, r2
 8009a46:	4605      	mov	r5, r0
 8009a48:	b118      	cbz	r0, 8009a52 <__swbuf_r+0x12>
 8009a4a:	6983      	ldr	r3, [r0, #24]
 8009a4c:	b90b      	cbnz	r3, 8009a52 <__swbuf_r+0x12>
 8009a4e:	f001 f847 	bl	800aae0 <__sinit>
 8009a52:	4b21      	ldr	r3, [pc, #132]	; (8009ad8 <__swbuf_r+0x98>)
 8009a54:	429c      	cmp	r4, r3
 8009a56:	d12b      	bne.n	8009ab0 <__swbuf_r+0x70>
 8009a58:	686c      	ldr	r4, [r5, #4]
 8009a5a:	69a3      	ldr	r3, [r4, #24]
 8009a5c:	60a3      	str	r3, [r4, #8]
 8009a5e:	89a3      	ldrh	r3, [r4, #12]
 8009a60:	071a      	lsls	r2, r3, #28
 8009a62:	d52f      	bpl.n	8009ac4 <__swbuf_r+0x84>
 8009a64:	6923      	ldr	r3, [r4, #16]
 8009a66:	b36b      	cbz	r3, 8009ac4 <__swbuf_r+0x84>
 8009a68:	6923      	ldr	r3, [r4, #16]
 8009a6a:	6820      	ldr	r0, [r4, #0]
 8009a6c:	b2f6      	uxtb	r6, r6
 8009a6e:	1ac0      	subs	r0, r0, r3
 8009a70:	6963      	ldr	r3, [r4, #20]
 8009a72:	4637      	mov	r7, r6
 8009a74:	4283      	cmp	r3, r0
 8009a76:	dc04      	bgt.n	8009a82 <__swbuf_r+0x42>
 8009a78:	4621      	mov	r1, r4
 8009a7a:	4628      	mov	r0, r5
 8009a7c:	f000 ff9c 	bl	800a9b8 <_fflush_r>
 8009a80:	bb30      	cbnz	r0, 8009ad0 <__swbuf_r+0x90>
 8009a82:	68a3      	ldr	r3, [r4, #8]
 8009a84:	3001      	adds	r0, #1
 8009a86:	3b01      	subs	r3, #1
 8009a88:	60a3      	str	r3, [r4, #8]
 8009a8a:	6823      	ldr	r3, [r4, #0]
 8009a8c:	1c5a      	adds	r2, r3, #1
 8009a8e:	6022      	str	r2, [r4, #0]
 8009a90:	701e      	strb	r6, [r3, #0]
 8009a92:	6963      	ldr	r3, [r4, #20]
 8009a94:	4283      	cmp	r3, r0
 8009a96:	d004      	beq.n	8009aa2 <__swbuf_r+0x62>
 8009a98:	89a3      	ldrh	r3, [r4, #12]
 8009a9a:	07db      	lsls	r3, r3, #31
 8009a9c:	d506      	bpl.n	8009aac <__swbuf_r+0x6c>
 8009a9e:	2e0a      	cmp	r6, #10
 8009aa0:	d104      	bne.n	8009aac <__swbuf_r+0x6c>
 8009aa2:	4621      	mov	r1, r4
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	f000 ff87 	bl	800a9b8 <_fflush_r>
 8009aaa:	b988      	cbnz	r0, 8009ad0 <__swbuf_r+0x90>
 8009aac:	4638      	mov	r0, r7
 8009aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ab0:	4b0a      	ldr	r3, [pc, #40]	; (8009adc <__swbuf_r+0x9c>)
 8009ab2:	429c      	cmp	r4, r3
 8009ab4:	d101      	bne.n	8009aba <__swbuf_r+0x7a>
 8009ab6:	68ac      	ldr	r4, [r5, #8]
 8009ab8:	e7cf      	b.n	8009a5a <__swbuf_r+0x1a>
 8009aba:	4b09      	ldr	r3, [pc, #36]	; (8009ae0 <__swbuf_r+0xa0>)
 8009abc:	429c      	cmp	r4, r3
 8009abe:	bf08      	it	eq
 8009ac0:	68ec      	ldreq	r4, [r5, #12]
 8009ac2:	e7ca      	b.n	8009a5a <__swbuf_r+0x1a>
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	f000 f80c 	bl	8009ae4 <__swsetup_r>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d0cb      	beq.n	8009a68 <__swbuf_r+0x28>
 8009ad0:	f04f 37ff 	mov.w	r7, #4294967295
 8009ad4:	e7ea      	b.n	8009aac <__swbuf_r+0x6c>
 8009ad6:	bf00      	nop
 8009ad8:	0800d58c 	.word	0x0800d58c
 8009adc:	0800d5ac 	.word	0x0800d5ac
 8009ae0:	0800d56c 	.word	0x0800d56c

08009ae4 <__swsetup_r>:
 8009ae4:	4b32      	ldr	r3, [pc, #200]	; (8009bb0 <__swsetup_r+0xcc>)
 8009ae6:	b570      	push	{r4, r5, r6, lr}
 8009ae8:	681d      	ldr	r5, [r3, #0]
 8009aea:	4606      	mov	r6, r0
 8009aec:	460c      	mov	r4, r1
 8009aee:	b125      	cbz	r5, 8009afa <__swsetup_r+0x16>
 8009af0:	69ab      	ldr	r3, [r5, #24]
 8009af2:	b913      	cbnz	r3, 8009afa <__swsetup_r+0x16>
 8009af4:	4628      	mov	r0, r5
 8009af6:	f000 fff3 	bl	800aae0 <__sinit>
 8009afa:	4b2e      	ldr	r3, [pc, #184]	; (8009bb4 <__swsetup_r+0xd0>)
 8009afc:	429c      	cmp	r4, r3
 8009afe:	d10f      	bne.n	8009b20 <__swsetup_r+0x3c>
 8009b00:	686c      	ldr	r4, [r5, #4]
 8009b02:	89a3      	ldrh	r3, [r4, #12]
 8009b04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b08:	0719      	lsls	r1, r3, #28
 8009b0a:	d42c      	bmi.n	8009b66 <__swsetup_r+0x82>
 8009b0c:	06dd      	lsls	r5, r3, #27
 8009b0e:	d411      	bmi.n	8009b34 <__swsetup_r+0x50>
 8009b10:	2309      	movs	r3, #9
 8009b12:	6033      	str	r3, [r6, #0]
 8009b14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b18:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1c:	81a3      	strh	r3, [r4, #12]
 8009b1e:	e03e      	b.n	8009b9e <__swsetup_r+0xba>
 8009b20:	4b25      	ldr	r3, [pc, #148]	; (8009bb8 <__swsetup_r+0xd4>)
 8009b22:	429c      	cmp	r4, r3
 8009b24:	d101      	bne.n	8009b2a <__swsetup_r+0x46>
 8009b26:	68ac      	ldr	r4, [r5, #8]
 8009b28:	e7eb      	b.n	8009b02 <__swsetup_r+0x1e>
 8009b2a:	4b24      	ldr	r3, [pc, #144]	; (8009bbc <__swsetup_r+0xd8>)
 8009b2c:	429c      	cmp	r4, r3
 8009b2e:	bf08      	it	eq
 8009b30:	68ec      	ldreq	r4, [r5, #12]
 8009b32:	e7e6      	b.n	8009b02 <__swsetup_r+0x1e>
 8009b34:	0758      	lsls	r0, r3, #29
 8009b36:	d512      	bpl.n	8009b5e <__swsetup_r+0x7a>
 8009b38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b3a:	b141      	cbz	r1, 8009b4e <__swsetup_r+0x6a>
 8009b3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b40:	4299      	cmp	r1, r3
 8009b42:	d002      	beq.n	8009b4a <__swsetup_r+0x66>
 8009b44:	4630      	mov	r0, r6
 8009b46:	f002 f92f 	bl	800bda8 <_free_r>
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	6363      	str	r3, [r4, #52]	; 0x34
 8009b4e:	89a3      	ldrh	r3, [r4, #12]
 8009b50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b54:	81a3      	strh	r3, [r4, #12]
 8009b56:	2300      	movs	r3, #0
 8009b58:	6063      	str	r3, [r4, #4]
 8009b5a:	6923      	ldr	r3, [r4, #16]
 8009b5c:	6023      	str	r3, [r4, #0]
 8009b5e:	89a3      	ldrh	r3, [r4, #12]
 8009b60:	f043 0308 	orr.w	r3, r3, #8
 8009b64:	81a3      	strh	r3, [r4, #12]
 8009b66:	6923      	ldr	r3, [r4, #16]
 8009b68:	b94b      	cbnz	r3, 8009b7e <__swsetup_r+0x9a>
 8009b6a:	89a3      	ldrh	r3, [r4, #12]
 8009b6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b74:	d003      	beq.n	8009b7e <__swsetup_r+0x9a>
 8009b76:	4621      	mov	r1, r4
 8009b78:	4630      	mov	r0, r6
 8009b7a:	f001 fbe1 	bl	800b340 <__smakebuf_r>
 8009b7e:	89a0      	ldrh	r0, [r4, #12]
 8009b80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b84:	f010 0301 	ands.w	r3, r0, #1
 8009b88:	d00a      	beq.n	8009ba0 <__swsetup_r+0xbc>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	60a3      	str	r3, [r4, #8]
 8009b8e:	6963      	ldr	r3, [r4, #20]
 8009b90:	425b      	negs	r3, r3
 8009b92:	61a3      	str	r3, [r4, #24]
 8009b94:	6923      	ldr	r3, [r4, #16]
 8009b96:	b943      	cbnz	r3, 8009baa <__swsetup_r+0xc6>
 8009b98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b9c:	d1ba      	bne.n	8009b14 <__swsetup_r+0x30>
 8009b9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ba0:	0781      	lsls	r1, r0, #30
 8009ba2:	bf58      	it	pl
 8009ba4:	6963      	ldrpl	r3, [r4, #20]
 8009ba6:	60a3      	str	r3, [r4, #8]
 8009ba8:	e7f4      	b.n	8009b94 <__swsetup_r+0xb0>
 8009baa:	2000      	movs	r0, #0
 8009bac:	e7f7      	b.n	8009b9e <__swsetup_r+0xba>
 8009bae:	bf00      	nop
 8009bb0:	2000002c 	.word	0x2000002c
 8009bb4:	0800d58c 	.word	0x0800d58c
 8009bb8:	0800d5ac 	.word	0x0800d5ac
 8009bbc:	0800d56c 	.word	0x0800d56c

08009bc0 <quorem>:
 8009bc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc4:	6903      	ldr	r3, [r0, #16]
 8009bc6:	690c      	ldr	r4, [r1, #16]
 8009bc8:	4607      	mov	r7, r0
 8009bca:	42a3      	cmp	r3, r4
 8009bcc:	f2c0 8082 	blt.w	8009cd4 <quorem+0x114>
 8009bd0:	3c01      	subs	r4, #1
 8009bd2:	f100 0514 	add.w	r5, r0, #20
 8009bd6:	f101 0814 	add.w	r8, r1, #20
 8009bda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009bde:	9301      	str	r3, [sp, #4]
 8009be0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009be4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009be8:	3301      	adds	r3, #1
 8009bea:	429a      	cmp	r2, r3
 8009bec:	fbb2 f6f3 	udiv	r6, r2, r3
 8009bf0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009bf4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009bf8:	d331      	bcc.n	8009c5e <quorem+0x9e>
 8009bfa:	f04f 0e00 	mov.w	lr, #0
 8009bfe:	4640      	mov	r0, r8
 8009c00:	46ac      	mov	ip, r5
 8009c02:	46f2      	mov	sl, lr
 8009c04:	f850 2b04 	ldr.w	r2, [r0], #4
 8009c08:	b293      	uxth	r3, r2
 8009c0a:	fb06 e303 	mla	r3, r6, r3, lr
 8009c0e:	0c12      	lsrs	r2, r2, #16
 8009c10:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	fb06 e202 	mla	r2, r6, r2, lr
 8009c1a:	ebaa 0303 	sub.w	r3, sl, r3
 8009c1e:	f8dc a000 	ldr.w	sl, [ip]
 8009c22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009c26:	fa1f fa8a 	uxth.w	sl, sl
 8009c2a:	4453      	add	r3, sl
 8009c2c:	f8dc a000 	ldr.w	sl, [ip]
 8009c30:	b292      	uxth	r2, r2
 8009c32:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009c36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c40:	4581      	cmp	r9, r0
 8009c42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009c46:	f84c 3b04 	str.w	r3, [ip], #4
 8009c4a:	d2db      	bcs.n	8009c04 <quorem+0x44>
 8009c4c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009c50:	b92b      	cbnz	r3, 8009c5e <quorem+0x9e>
 8009c52:	9b01      	ldr	r3, [sp, #4]
 8009c54:	3b04      	subs	r3, #4
 8009c56:	429d      	cmp	r5, r3
 8009c58:	461a      	mov	r2, r3
 8009c5a:	d32f      	bcc.n	8009cbc <quorem+0xfc>
 8009c5c:	613c      	str	r4, [r7, #16]
 8009c5e:	4638      	mov	r0, r7
 8009c60:	f001 fe9e 	bl	800b9a0 <__mcmp>
 8009c64:	2800      	cmp	r0, #0
 8009c66:	db25      	blt.n	8009cb4 <quorem+0xf4>
 8009c68:	4628      	mov	r0, r5
 8009c6a:	f04f 0c00 	mov.w	ip, #0
 8009c6e:	3601      	adds	r6, #1
 8009c70:	f858 1b04 	ldr.w	r1, [r8], #4
 8009c74:	f8d0 e000 	ldr.w	lr, [r0]
 8009c78:	b28b      	uxth	r3, r1
 8009c7a:	ebac 0303 	sub.w	r3, ip, r3
 8009c7e:	fa1f f28e 	uxth.w	r2, lr
 8009c82:	4413      	add	r3, r2
 8009c84:	0c0a      	lsrs	r2, r1, #16
 8009c86:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009c8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c94:	45c1      	cmp	r9, r8
 8009c96:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009c9a:	f840 3b04 	str.w	r3, [r0], #4
 8009c9e:	d2e7      	bcs.n	8009c70 <quorem+0xb0>
 8009ca0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ca4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ca8:	b922      	cbnz	r2, 8009cb4 <quorem+0xf4>
 8009caa:	3b04      	subs	r3, #4
 8009cac:	429d      	cmp	r5, r3
 8009cae:	461a      	mov	r2, r3
 8009cb0:	d30a      	bcc.n	8009cc8 <quorem+0x108>
 8009cb2:	613c      	str	r4, [r7, #16]
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	b003      	add	sp, #12
 8009cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cbc:	6812      	ldr	r2, [r2, #0]
 8009cbe:	3b04      	subs	r3, #4
 8009cc0:	2a00      	cmp	r2, #0
 8009cc2:	d1cb      	bne.n	8009c5c <quorem+0x9c>
 8009cc4:	3c01      	subs	r4, #1
 8009cc6:	e7c6      	b.n	8009c56 <quorem+0x96>
 8009cc8:	6812      	ldr	r2, [r2, #0]
 8009cca:	3b04      	subs	r3, #4
 8009ccc:	2a00      	cmp	r2, #0
 8009cce:	d1f0      	bne.n	8009cb2 <quorem+0xf2>
 8009cd0:	3c01      	subs	r4, #1
 8009cd2:	e7eb      	b.n	8009cac <quorem+0xec>
 8009cd4:	2000      	movs	r0, #0
 8009cd6:	e7ee      	b.n	8009cb6 <quorem+0xf6>

08009cd8 <_dtoa_r>:
 8009cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cdc:	4616      	mov	r6, r2
 8009cde:	461f      	mov	r7, r3
 8009ce0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009ce2:	b099      	sub	sp, #100	; 0x64
 8009ce4:	4605      	mov	r5, r0
 8009ce6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009cea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009cee:	b974      	cbnz	r4, 8009d0e <_dtoa_r+0x36>
 8009cf0:	2010      	movs	r0, #16
 8009cf2:	f001 fb65 	bl	800b3c0 <malloc>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	6268      	str	r0, [r5, #36]	; 0x24
 8009cfa:	b920      	cbnz	r0, 8009d06 <_dtoa_r+0x2e>
 8009cfc:	21ea      	movs	r1, #234	; 0xea
 8009cfe:	4ba8      	ldr	r3, [pc, #672]	; (8009fa0 <_dtoa_r+0x2c8>)
 8009d00:	48a8      	ldr	r0, [pc, #672]	; (8009fa4 <_dtoa_r+0x2cc>)
 8009d02:	f002 fc6d 	bl	800c5e0 <__assert_func>
 8009d06:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d0a:	6004      	str	r4, [r0, #0]
 8009d0c:	60c4      	str	r4, [r0, #12]
 8009d0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009d10:	6819      	ldr	r1, [r3, #0]
 8009d12:	b151      	cbz	r1, 8009d2a <_dtoa_r+0x52>
 8009d14:	685a      	ldr	r2, [r3, #4]
 8009d16:	2301      	movs	r3, #1
 8009d18:	4093      	lsls	r3, r2
 8009d1a:	604a      	str	r2, [r1, #4]
 8009d1c:	608b      	str	r3, [r1, #8]
 8009d1e:	4628      	mov	r0, r5
 8009d20:	f001 fbb6 	bl	800b490 <_Bfree>
 8009d24:	2200      	movs	r2, #0
 8009d26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009d28:	601a      	str	r2, [r3, #0]
 8009d2a:	1e3b      	subs	r3, r7, #0
 8009d2c:	bfaf      	iteee	ge
 8009d2e:	2300      	movge	r3, #0
 8009d30:	2201      	movlt	r2, #1
 8009d32:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009d36:	9305      	strlt	r3, [sp, #20]
 8009d38:	bfa8      	it	ge
 8009d3a:	f8c8 3000 	strge.w	r3, [r8]
 8009d3e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009d42:	4b99      	ldr	r3, [pc, #612]	; (8009fa8 <_dtoa_r+0x2d0>)
 8009d44:	bfb8      	it	lt
 8009d46:	f8c8 2000 	strlt.w	r2, [r8]
 8009d4a:	ea33 0309 	bics.w	r3, r3, r9
 8009d4e:	d119      	bne.n	8009d84 <_dtoa_r+0xac>
 8009d50:	f242 730f 	movw	r3, #9999	; 0x270f
 8009d54:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009d56:	6013      	str	r3, [r2, #0]
 8009d58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d5c:	4333      	orrs	r3, r6
 8009d5e:	f000 857f 	beq.w	800a860 <_dtoa_r+0xb88>
 8009d62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009d64:	b953      	cbnz	r3, 8009d7c <_dtoa_r+0xa4>
 8009d66:	4b91      	ldr	r3, [pc, #580]	; (8009fac <_dtoa_r+0x2d4>)
 8009d68:	e022      	b.n	8009db0 <_dtoa_r+0xd8>
 8009d6a:	4b91      	ldr	r3, [pc, #580]	; (8009fb0 <_dtoa_r+0x2d8>)
 8009d6c:	9303      	str	r3, [sp, #12]
 8009d6e:	3308      	adds	r3, #8
 8009d70:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009d72:	6013      	str	r3, [r2, #0]
 8009d74:	9803      	ldr	r0, [sp, #12]
 8009d76:	b019      	add	sp, #100	; 0x64
 8009d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d7c:	4b8b      	ldr	r3, [pc, #556]	; (8009fac <_dtoa_r+0x2d4>)
 8009d7e:	9303      	str	r3, [sp, #12]
 8009d80:	3303      	adds	r3, #3
 8009d82:	e7f5      	b.n	8009d70 <_dtoa_r+0x98>
 8009d84:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009d88:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009d8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d90:	2200      	movs	r2, #0
 8009d92:	2300      	movs	r3, #0
 8009d94:	f7f6 fe08 	bl	80009a8 <__aeabi_dcmpeq>
 8009d98:	4680      	mov	r8, r0
 8009d9a:	b158      	cbz	r0, 8009db4 <_dtoa_r+0xdc>
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009da0:	6013      	str	r3, [r2, #0]
 8009da2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	f000 8558 	beq.w	800a85a <_dtoa_r+0xb82>
 8009daa:	4882      	ldr	r0, [pc, #520]	; (8009fb4 <_dtoa_r+0x2dc>)
 8009dac:	6018      	str	r0, [r3, #0]
 8009dae:	1e43      	subs	r3, r0, #1
 8009db0:	9303      	str	r3, [sp, #12]
 8009db2:	e7df      	b.n	8009d74 <_dtoa_r+0x9c>
 8009db4:	ab16      	add	r3, sp, #88	; 0x58
 8009db6:	9301      	str	r3, [sp, #4]
 8009db8:	ab17      	add	r3, sp, #92	; 0x5c
 8009dba:	9300      	str	r3, [sp, #0]
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009dc2:	f001 ff0f 	bl	800bbe4 <__d2b>
 8009dc6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009dca:	4683      	mov	fp, r0
 8009dcc:	2c00      	cmp	r4, #0
 8009dce:	d07f      	beq.n	8009ed0 <_dtoa_r+0x1f8>
 8009dd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009dd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dd6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009dda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009dde:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8009de2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009de6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009dea:	2200      	movs	r2, #0
 8009dec:	4b72      	ldr	r3, [pc, #456]	; (8009fb8 <_dtoa_r+0x2e0>)
 8009dee:	f7f6 f9bb 	bl	8000168 <__aeabi_dsub>
 8009df2:	a365      	add	r3, pc, #404	; (adr r3, 8009f88 <_dtoa_r+0x2b0>)
 8009df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df8:	f7f6 fb6e 	bl	80004d8 <__aeabi_dmul>
 8009dfc:	a364      	add	r3, pc, #400	; (adr r3, 8009f90 <_dtoa_r+0x2b8>)
 8009dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e02:	f7f6 f9b3 	bl	800016c <__adddf3>
 8009e06:	4606      	mov	r6, r0
 8009e08:	4620      	mov	r0, r4
 8009e0a:	460f      	mov	r7, r1
 8009e0c:	f7f6 fafa 	bl	8000404 <__aeabi_i2d>
 8009e10:	a361      	add	r3, pc, #388	; (adr r3, 8009f98 <_dtoa_r+0x2c0>)
 8009e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e16:	f7f6 fb5f 	bl	80004d8 <__aeabi_dmul>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	4630      	mov	r0, r6
 8009e20:	4639      	mov	r1, r7
 8009e22:	f7f6 f9a3 	bl	800016c <__adddf3>
 8009e26:	4606      	mov	r6, r0
 8009e28:	460f      	mov	r7, r1
 8009e2a:	f7f6 fe05 	bl	8000a38 <__aeabi_d2iz>
 8009e2e:	2200      	movs	r2, #0
 8009e30:	4682      	mov	sl, r0
 8009e32:	2300      	movs	r3, #0
 8009e34:	4630      	mov	r0, r6
 8009e36:	4639      	mov	r1, r7
 8009e38:	f7f6 fdc0 	bl	80009bc <__aeabi_dcmplt>
 8009e3c:	b148      	cbz	r0, 8009e52 <_dtoa_r+0x17a>
 8009e3e:	4650      	mov	r0, sl
 8009e40:	f7f6 fae0 	bl	8000404 <__aeabi_i2d>
 8009e44:	4632      	mov	r2, r6
 8009e46:	463b      	mov	r3, r7
 8009e48:	f7f6 fdae 	bl	80009a8 <__aeabi_dcmpeq>
 8009e4c:	b908      	cbnz	r0, 8009e52 <_dtoa_r+0x17a>
 8009e4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e52:	f1ba 0f16 	cmp.w	sl, #22
 8009e56:	d858      	bhi.n	8009f0a <_dtoa_r+0x232>
 8009e58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e5c:	4b57      	ldr	r3, [pc, #348]	; (8009fbc <_dtoa_r+0x2e4>)
 8009e5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e66:	f7f6 fda9 	bl	80009bc <__aeabi_dcmplt>
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	d04f      	beq.n	8009f0e <_dtoa_r+0x236>
 8009e6e:	2300      	movs	r3, #0
 8009e70:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e74:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e76:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009e78:	1b1c      	subs	r4, r3, r4
 8009e7a:	1e63      	subs	r3, r4, #1
 8009e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e7e:	bf49      	itett	mi
 8009e80:	f1c4 0301 	rsbmi	r3, r4, #1
 8009e84:	2300      	movpl	r3, #0
 8009e86:	9306      	strmi	r3, [sp, #24]
 8009e88:	2300      	movmi	r3, #0
 8009e8a:	bf54      	ite	pl
 8009e8c:	9306      	strpl	r3, [sp, #24]
 8009e8e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009e90:	f1ba 0f00 	cmp.w	sl, #0
 8009e94:	db3d      	blt.n	8009f12 <_dtoa_r+0x23a>
 8009e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e98:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009e9c:	4453      	add	r3, sl
 8009e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	930a      	str	r3, [sp, #40]	; 0x28
 8009ea4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ea6:	2b09      	cmp	r3, #9
 8009ea8:	f200 808c 	bhi.w	8009fc4 <_dtoa_r+0x2ec>
 8009eac:	2b05      	cmp	r3, #5
 8009eae:	bfc4      	itt	gt
 8009eb0:	3b04      	subgt	r3, #4
 8009eb2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009eb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009eb6:	bfc8      	it	gt
 8009eb8:	2400      	movgt	r4, #0
 8009eba:	f1a3 0302 	sub.w	r3, r3, #2
 8009ebe:	bfd8      	it	le
 8009ec0:	2401      	movle	r4, #1
 8009ec2:	2b03      	cmp	r3, #3
 8009ec4:	f200 808a 	bhi.w	8009fdc <_dtoa_r+0x304>
 8009ec8:	e8df f003 	tbb	[pc, r3]
 8009ecc:	5b4d4f2d 	.word	0x5b4d4f2d
 8009ed0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009ed4:	441c      	add	r4, r3
 8009ed6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009eda:	2b20      	cmp	r3, #32
 8009edc:	bfc3      	ittte	gt
 8009ede:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009ee2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8009ee6:	fa09 f303 	lslgt.w	r3, r9, r3
 8009eea:	f1c3 0320 	rsble	r3, r3, #32
 8009eee:	bfc6      	itte	gt
 8009ef0:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009ef4:	4318      	orrgt	r0, r3
 8009ef6:	fa06 f003 	lslle.w	r0, r6, r3
 8009efa:	f7f6 fa73 	bl	80003e4 <__aeabi_ui2d>
 8009efe:	2301      	movs	r3, #1
 8009f00:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009f04:	3c01      	subs	r4, #1
 8009f06:	9313      	str	r3, [sp, #76]	; 0x4c
 8009f08:	e76f      	b.n	8009dea <_dtoa_r+0x112>
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e7b2      	b.n	8009e74 <_dtoa_r+0x19c>
 8009f0e:	900f      	str	r0, [sp, #60]	; 0x3c
 8009f10:	e7b1      	b.n	8009e76 <_dtoa_r+0x19e>
 8009f12:	9b06      	ldr	r3, [sp, #24]
 8009f14:	eba3 030a 	sub.w	r3, r3, sl
 8009f18:	9306      	str	r3, [sp, #24]
 8009f1a:	f1ca 0300 	rsb	r3, sl, #0
 8009f1e:	930a      	str	r3, [sp, #40]	; 0x28
 8009f20:	2300      	movs	r3, #0
 8009f22:	930e      	str	r3, [sp, #56]	; 0x38
 8009f24:	e7be      	b.n	8009ea4 <_dtoa_r+0x1cc>
 8009f26:	2300      	movs	r3, #0
 8009f28:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	dc58      	bgt.n	8009fe2 <_dtoa_r+0x30a>
 8009f30:	f04f 0901 	mov.w	r9, #1
 8009f34:	464b      	mov	r3, r9
 8009f36:	f8cd 9020 	str.w	r9, [sp, #32]
 8009f3a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8009f3e:	2200      	movs	r2, #0
 8009f40:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009f42:	6042      	str	r2, [r0, #4]
 8009f44:	2204      	movs	r2, #4
 8009f46:	f102 0614 	add.w	r6, r2, #20
 8009f4a:	429e      	cmp	r6, r3
 8009f4c:	6841      	ldr	r1, [r0, #4]
 8009f4e:	d94e      	bls.n	8009fee <_dtoa_r+0x316>
 8009f50:	4628      	mov	r0, r5
 8009f52:	f001 fa5d 	bl	800b410 <_Balloc>
 8009f56:	9003      	str	r0, [sp, #12]
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	d14c      	bne.n	8009ff6 <_dtoa_r+0x31e>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009f62:	4b17      	ldr	r3, [pc, #92]	; (8009fc0 <_dtoa_r+0x2e8>)
 8009f64:	e6cc      	b.n	8009d00 <_dtoa_r+0x28>
 8009f66:	2301      	movs	r3, #1
 8009f68:	e7de      	b.n	8009f28 <_dtoa_r+0x250>
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f6e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009f70:	eb0a 0903 	add.w	r9, sl, r3
 8009f74:	f109 0301 	add.w	r3, r9, #1
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	9308      	str	r3, [sp, #32]
 8009f7c:	bfb8      	it	lt
 8009f7e:	2301      	movlt	r3, #1
 8009f80:	e7dd      	b.n	8009f3e <_dtoa_r+0x266>
 8009f82:	2301      	movs	r3, #1
 8009f84:	e7f2      	b.n	8009f6c <_dtoa_r+0x294>
 8009f86:	bf00      	nop
 8009f88:	636f4361 	.word	0x636f4361
 8009f8c:	3fd287a7 	.word	0x3fd287a7
 8009f90:	8b60c8b3 	.word	0x8b60c8b3
 8009f94:	3fc68a28 	.word	0x3fc68a28
 8009f98:	509f79fb 	.word	0x509f79fb
 8009f9c:	3fd34413 	.word	0x3fd34413
 8009fa0:	0800d4e6 	.word	0x0800d4e6
 8009fa4:	0800d4fd 	.word	0x0800d4fd
 8009fa8:	7ff00000 	.word	0x7ff00000
 8009fac:	0800d4e2 	.word	0x0800d4e2
 8009fb0:	0800d4d9 	.word	0x0800d4d9
 8009fb4:	0800d35d 	.word	0x0800d35d
 8009fb8:	3ff80000 	.word	0x3ff80000
 8009fbc:	0800d6d0 	.word	0x0800d6d0
 8009fc0:	0800d558 	.word	0x0800d558
 8009fc4:	2401      	movs	r4, #1
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	940b      	str	r4, [sp, #44]	; 0x2c
 8009fca:	9322      	str	r3, [sp, #136]	; 0x88
 8009fcc:	f04f 39ff 	mov.w	r9, #4294967295
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	2312      	movs	r3, #18
 8009fd4:	f8cd 9020 	str.w	r9, [sp, #32]
 8009fd8:	9223      	str	r2, [sp, #140]	; 0x8c
 8009fda:	e7b0      	b.n	8009f3e <_dtoa_r+0x266>
 8009fdc:	2301      	movs	r3, #1
 8009fde:	930b      	str	r3, [sp, #44]	; 0x2c
 8009fe0:	e7f4      	b.n	8009fcc <_dtoa_r+0x2f4>
 8009fe2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8009fe6:	464b      	mov	r3, r9
 8009fe8:	f8cd 9020 	str.w	r9, [sp, #32]
 8009fec:	e7a7      	b.n	8009f3e <_dtoa_r+0x266>
 8009fee:	3101      	adds	r1, #1
 8009ff0:	6041      	str	r1, [r0, #4]
 8009ff2:	0052      	lsls	r2, r2, #1
 8009ff4:	e7a7      	b.n	8009f46 <_dtoa_r+0x26e>
 8009ff6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ff8:	9a03      	ldr	r2, [sp, #12]
 8009ffa:	601a      	str	r2, [r3, #0]
 8009ffc:	9b08      	ldr	r3, [sp, #32]
 8009ffe:	2b0e      	cmp	r3, #14
 800a000:	f200 80a8 	bhi.w	800a154 <_dtoa_r+0x47c>
 800a004:	2c00      	cmp	r4, #0
 800a006:	f000 80a5 	beq.w	800a154 <_dtoa_r+0x47c>
 800a00a:	f1ba 0f00 	cmp.w	sl, #0
 800a00e:	dd34      	ble.n	800a07a <_dtoa_r+0x3a2>
 800a010:	4a9a      	ldr	r2, [pc, #616]	; (800a27c <_dtoa_r+0x5a4>)
 800a012:	f00a 030f 	and.w	r3, sl, #15
 800a016:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a01a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a01e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a022:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a026:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a02a:	d016      	beq.n	800a05a <_dtoa_r+0x382>
 800a02c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a030:	4b93      	ldr	r3, [pc, #588]	; (800a280 <_dtoa_r+0x5a8>)
 800a032:	2703      	movs	r7, #3
 800a034:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a038:	f7f6 fb78 	bl	800072c <__aeabi_ddiv>
 800a03c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a040:	f004 040f 	and.w	r4, r4, #15
 800a044:	4e8e      	ldr	r6, [pc, #568]	; (800a280 <_dtoa_r+0x5a8>)
 800a046:	b954      	cbnz	r4, 800a05e <_dtoa_r+0x386>
 800a048:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a04c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a050:	f7f6 fb6c 	bl	800072c <__aeabi_ddiv>
 800a054:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a058:	e029      	b.n	800a0ae <_dtoa_r+0x3d6>
 800a05a:	2702      	movs	r7, #2
 800a05c:	e7f2      	b.n	800a044 <_dtoa_r+0x36c>
 800a05e:	07e1      	lsls	r1, r4, #31
 800a060:	d508      	bpl.n	800a074 <_dtoa_r+0x39c>
 800a062:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a066:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a06a:	f7f6 fa35 	bl	80004d8 <__aeabi_dmul>
 800a06e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a072:	3701      	adds	r7, #1
 800a074:	1064      	asrs	r4, r4, #1
 800a076:	3608      	adds	r6, #8
 800a078:	e7e5      	b.n	800a046 <_dtoa_r+0x36e>
 800a07a:	f000 80a5 	beq.w	800a1c8 <_dtoa_r+0x4f0>
 800a07e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a082:	f1ca 0400 	rsb	r4, sl, #0
 800a086:	4b7d      	ldr	r3, [pc, #500]	; (800a27c <_dtoa_r+0x5a4>)
 800a088:	f004 020f 	and.w	r2, r4, #15
 800a08c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a094:	f7f6 fa20 	bl	80004d8 <__aeabi_dmul>
 800a098:	2702      	movs	r7, #2
 800a09a:	2300      	movs	r3, #0
 800a09c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0a0:	4e77      	ldr	r6, [pc, #476]	; (800a280 <_dtoa_r+0x5a8>)
 800a0a2:	1124      	asrs	r4, r4, #4
 800a0a4:	2c00      	cmp	r4, #0
 800a0a6:	f040 8084 	bne.w	800a1b2 <_dtoa_r+0x4da>
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d1d2      	bne.n	800a054 <_dtoa_r+0x37c>
 800a0ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	f000 808b 	beq.w	800a1cc <_dtoa_r+0x4f4>
 800a0b6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a0ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a0be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	4b6f      	ldr	r3, [pc, #444]	; (800a284 <_dtoa_r+0x5ac>)
 800a0c6:	f7f6 fc79 	bl	80009bc <__aeabi_dcmplt>
 800a0ca:	2800      	cmp	r0, #0
 800a0cc:	d07e      	beq.n	800a1cc <_dtoa_r+0x4f4>
 800a0ce:	9b08      	ldr	r3, [sp, #32]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d07b      	beq.n	800a1cc <_dtoa_r+0x4f4>
 800a0d4:	f1b9 0f00 	cmp.w	r9, #0
 800a0d8:	dd38      	ble.n	800a14c <_dtoa_r+0x474>
 800a0da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a0de:	2200      	movs	r2, #0
 800a0e0:	4b69      	ldr	r3, [pc, #420]	; (800a288 <_dtoa_r+0x5b0>)
 800a0e2:	f7f6 f9f9 	bl	80004d8 <__aeabi_dmul>
 800a0e6:	464c      	mov	r4, r9
 800a0e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0ec:	f10a 38ff 	add.w	r8, sl, #4294967295
 800a0f0:	3701      	adds	r7, #1
 800a0f2:	4638      	mov	r0, r7
 800a0f4:	f7f6 f986 	bl	8000404 <__aeabi_i2d>
 800a0f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0fc:	f7f6 f9ec 	bl	80004d8 <__aeabi_dmul>
 800a100:	2200      	movs	r2, #0
 800a102:	4b62      	ldr	r3, [pc, #392]	; (800a28c <_dtoa_r+0x5b4>)
 800a104:	f7f6 f832 	bl	800016c <__adddf3>
 800a108:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a10c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a110:	9611      	str	r6, [sp, #68]	; 0x44
 800a112:	2c00      	cmp	r4, #0
 800a114:	d15d      	bne.n	800a1d2 <_dtoa_r+0x4fa>
 800a116:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a11a:	2200      	movs	r2, #0
 800a11c:	4b5c      	ldr	r3, [pc, #368]	; (800a290 <_dtoa_r+0x5b8>)
 800a11e:	f7f6 f823 	bl	8000168 <__aeabi_dsub>
 800a122:	4602      	mov	r2, r0
 800a124:	460b      	mov	r3, r1
 800a126:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a12a:	4633      	mov	r3, r6
 800a12c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a12e:	f7f6 fc63 	bl	80009f8 <__aeabi_dcmpgt>
 800a132:	2800      	cmp	r0, #0
 800a134:	f040 829c 	bne.w	800a670 <_dtoa_r+0x998>
 800a138:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a13c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a13e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a142:	f7f6 fc3b 	bl	80009bc <__aeabi_dcmplt>
 800a146:	2800      	cmp	r0, #0
 800a148:	f040 8290 	bne.w	800a66c <_dtoa_r+0x994>
 800a14c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a150:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a154:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a156:	2b00      	cmp	r3, #0
 800a158:	f2c0 8152 	blt.w	800a400 <_dtoa_r+0x728>
 800a15c:	f1ba 0f0e 	cmp.w	sl, #14
 800a160:	f300 814e 	bgt.w	800a400 <_dtoa_r+0x728>
 800a164:	4b45      	ldr	r3, [pc, #276]	; (800a27c <_dtoa_r+0x5a4>)
 800a166:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a16a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a16e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a172:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a174:	2b00      	cmp	r3, #0
 800a176:	f280 80db 	bge.w	800a330 <_dtoa_r+0x658>
 800a17a:	9b08      	ldr	r3, [sp, #32]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f300 80d7 	bgt.w	800a330 <_dtoa_r+0x658>
 800a182:	f040 8272 	bne.w	800a66a <_dtoa_r+0x992>
 800a186:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a18a:	2200      	movs	r2, #0
 800a18c:	4b40      	ldr	r3, [pc, #256]	; (800a290 <_dtoa_r+0x5b8>)
 800a18e:	f7f6 f9a3 	bl	80004d8 <__aeabi_dmul>
 800a192:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a196:	f7f6 fc25 	bl	80009e4 <__aeabi_dcmpge>
 800a19a:	9c08      	ldr	r4, [sp, #32]
 800a19c:	4626      	mov	r6, r4
 800a19e:	2800      	cmp	r0, #0
 800a1a0:	f040 8248 	bne.w	800a634 <_dtoa_r+0x95c>
 800a1a4:	2331      	movs	r3, #49	; 0x31
 800a1a6:	9f03      	ldr	r7, [sp, #12]
 800a1a8:	f10a 0a01 	add.w	sl, sl, #1
 800a1ac:	f807 3b01 	strb.w	r3, [r7], #1
 800a1b0:	e244      	b.n	800a63c <_dtoa_r+0x964>
 800a1b2:	07e2      	lsls	r2, r4, #31
 800a1b4:	d505      	bpl.n	800a1c2 <_dtoa_r+0x4ea>
 800a1b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a1ba:	f7f6 f98d 	bl	80004d8 <__aeabi_dmul>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	3701      	adds	r7, #1
 800a1c2:	1064      	asrs	r4, r4, #1
 800a1c4:	3608      	adds	r6, #8
 800a1c6:	e76d      	b.n	800a0a4 <_dtoa_r+0x3cc>
 800a1c8:	2702      	movs	r7, #2
 800a1ca:	e770      	b.n	800a0ae <_dtoa_r+0x3d6>
 800a1cc:	46d0      	mov	r8, sl
 800a1ce:	9c08      	ldr	r4, [sp, #32]
 800a1d0:	e78f      	b.n	800a0f2 <_dtoa_r+0x41a>
 800a1d2:	9903      	ldr	r1, [sp, #12]
 800a1d4:	4b29      	ldr	r3, [pc, #164]	; (800a27c <_dtoa_r+0x5a4>)
 800a1d6:	4421      	add	r1, r4
 800a1d8:	9112      	str	r1, [sp, #72]	; 0x48
 800a1da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a1e0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a1e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a1e8:	2900      	cmp	r1, #0
 800a1ea:	d055      	beq.n	800a298 <_dtoa_r+0x5c0>
 800a1ec:	2000      	movs	r0, #0
 800a1ee:	4929      	ldr	r1, [pc, #164]	; (800a294 <_dtoa_r+0x5bc>)
 800a1f0:	f7f6 fa9c 	bl	800072c <__aeabi_ddiv>
 800a1f4:	463b      	mov	r3, r7
 800a1f6:	4632      	mov	r2, r6
 800a1f8:	f7f5 ffb6 	bl	8000168 <__aeabi_dsub>
 800a1fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a200:	9f03      	ldr	r7, [sp, #12]
 800a202:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a206:	f7f6 fc17 	bl	8000a38 <__aeabi_d2iz>
 800a20a:	4604      	mov	r4, r0
 800a20c:	f7f6 f8fa 	bl	8000404 <__aeabi_i2d>
 800a210:	4602      	mov	r2, r0
 800a212:	460b      	mov	r3, r1
 800a214:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a218:	f7f5 ffa6 	bl	8000168 <__aeabi_dsub>
 800a21c:	4602      	mov	r2, r0
 800a21e:	460b      	mov	r3, r1
 800a220:	3430      	adds	r4, #48	; 0x30
 800a222:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a226:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a22a:	f807 4b01 	strb.w	r4, [r7], #1
 800a22e:	f7f6 fbc5 	bl	80009bc <__aeabi_dcmplt>
 800a232:	2800      	cmp	r0, #0
 800a234:	d174      	bne.n	800a320 <_dtoa_r+0x648>
 800a236:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a23a:	2000      	movs	r0, #0
 800a23c:	4911      	ldr	r1, [pc, #68]	; (800a284 <_dtoa_r+0x5ac>)
 800a23e:	f7f5 ff93 	bl	8000168 <__aeabi_dsub>
 800a242:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a246:	f7f6 fbb9 	bl	80009bc <__aeabi_dcmplt>
 800a24a:	2800      	cmp	r0, #0
 800a24c:	f040 80b7 	bne.w	800a3be <_dtoa_r+0x6e6>
 800a250:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a252:	429f      	cmp	r7, r3
 800a254:	f43f af7a 	beq.w	800a14c <_dtoa_r+0x474>
 800a258:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a25c:	2200      	movs	r2, #0
 800a25e:	4b0a      	ldr	r3, [pc, #40]	; (800a288 <_dtoa_r+0x5b0>)
 800a260:	f7f6 f93a 	bl	80004d8 <__aeabi_dmul>
 800a264:	2200      	movs	r2, #0
 800a266:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a26a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a26e:	4b06      	ldr	r3, [pc, #24]	; (800a288 <_dtoa_r+0x5b0>)
 800a270:	f7f6 f932 	bl	80004d8 <__aeabi_dmul>
 800a274:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a278:	e7c3      	b.n	800a202 <_dtoa_r+0x52a>
 800a27a:	bf00      	nop
 800a27c:	0800d6d0 	.word	0x0800d6d0
 800a280:	0800d6a8 	.word	0x0800d6a8
 800a284:	3ff00000 	.word	0x3ff00000
 800a288:	40240000 	.word	0x40240000
 800a28c:	401c0000 	.word	0x401c0000
 800a290:	40140000 	.word	0x40140000
 800a294:	3fe00000 	.word	0x3fe00000
 800a298:	4630      	mov	r0, r6
 800a29a:	4639      	mov	r1, r7
 800a29c:	f7f6 f91c 	bl	80004d8 <__aeabi_dmul>
 800a2a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a2a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a2a6:	9c03      	ldr	r4, [sp, #12]
 800a2a8:	9314      	str	r3, [sp, #80]	; 0x50
 800a2aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2ae:	f7f6 fbc3 	bl	8000a38 <__aeabi_d2iz>
 800a2b2:	9015      	str	r0, [sp, #84]	; 0x54
 800a2b4:	f7f6 f8a6 	bl	8000404 <__aeabi_i2d>
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2c0:	f7f5 ff52 	bl	8000168 <__aeabi_dsub>
 800a2c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2c6:	4606      	mov	r6, r0
 800a2c8:	3330      	adds	r3, #48	; 0x30
 800a2ca:	f804 3b01 	strb.w	r3, [r4], #1
 800a2ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a2d0:	460f      	mov	r7, r1
 800a2d2:	429c      	cmp	r4, r3
 800a2d4:	f04f 0200 	mov.w	r2, #0
 800a2d8:	d124      	bne.n	800a324 <_dtoa_r+0x64c>
 800a2da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a2de:	4bb0      	ldr	r3, [pc, #704]	; (800a5a0 <_dtoa_r+0x8c8>)
 800a2e0:	f7f5 ff44 	bl	800016c <__adddf3>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	4630      	mov	r0, r6
 800a2ea:	4639      	mov	r1, r7
 800a2ec:	f7f6 fb84 	bl	80009f8 <__aeabi_dcmpgt>
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	d163      	bne.n	800a3bc <_dtoa_r+0x6e4>
 800a2f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a2f8:	2000      	movs	r0, #0
 800a2fa:	49a9      	ldr	r1, [pc, #676]	; (800a5a0 <_dtoa_r+0x8c8>)
 800a2fc:	f7f5 ff34 	bl	8000168 <__aeabi_dsub>
 800a300:	4602      	mov	r2, r0
 800a302:	460b      	mov	r3, r1
 800a304:	4630      	mov	r0, r6
 800a306:	4639      	mov	r1, r7
 800a308:	f7f6 fb58 	bl	80009bc <__aeabi_dcmplt>
 800a30c:	2800      	cmp	r0, #0
 800a30e:	f43f af1d 	beq.w	800a14c <_dtoa_r+0x474>
 800a312:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a314:	1e7b      	subs	r3, r7, #1
 800a316:	9314      	str	r3, [sp, #80]	; 0x50
 800a318:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a31c:	2b30      	cmp	r3, #48	; 0x30
 800a31e:	d0f8      	beq.n	800a312 <_dtoa_r+0x63a>
 800a320:	46c2      	mov	sl, r8
 800a322:	e03b      	b.n	800a39c <_dtoa_r+0x6c4>
 800a324:	4b9f      	ldr	r3, [pc, #636]	; (800a5a4 <_dtoa_r+0x8cc>)
 800a326:	f7f6 f8d7 	bl	80004d8 <__aeabi_dmul>
 800a32a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a32e:	e7bc      	b.n	800a2aa <_dtoa_r+0x5d2>
 800a330:	9f03      	ldr	r7, [sp, #12]
 800a332:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a336:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a33a:	4640      	mov	r0, r8
 800a33c:	4649      	mov	r1, r9
 800a33e:	f7f6 f9f5 	bl	800072c <__aeabi_ddiv>
 800a342:	f7f6 fb79 	bl	8000a38 <__aeabi_d2iz>
 800a346:	4604      	mov	r4, r0
 800a348:	f7f6 f85c 	bl	8000404 <__aeabi_i2d>
 800a34c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a350:	f7f6 f8c2 	bl	80004d8 <__aeabi_dmul>
 800a354:	4602      	mov	r2, r0
 800a356:	460b      	mov	r3, r1
 800a358:	4640      	mov	r0, r8
 800a35a:	4649      	mov	r1, r9
 800a35c:	f7f5 ff04 	bl	8000168 <__aeabi_dsub>
 800a360:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a364:	f807 6b01 	strb.w	r6, [r7], #1
 800a368:	9e03      	ldr	r6, [sp, #12]
 800a36a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a36e:	1bbe      	subs	r6, r7, r6
 800a370:	45b4      	cmp	ip, r6
 800a372:	4602      	mov	r2, r0
 800a374:	460b      	mov	r3, r1
 800a376:	d136      	bne.n	800a3e6 <_dtoa_r+0x70e>
 800a378:	f7f5 fef8 	bl	800016c <__adddf3>
 800a37c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a380:	4680      	mov	r8, r0
 800a382:	4689      	mov	r9, r1
 800a384:	f7f6 fb38 	bl	80009f8 <__aeabi_dcmpgt>
 800a388:	bb58      	cbnz	r0, 800a3e2 <_dtoa_r+0x70a>
 800a38a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a38e:	4640      	mov	r0, r8
 800a390:	4649      	mov	r1, r9
 800a392:	f7f6 fb09 	bl	80009a8 <__aeabi_dcmpeq>
 800a396:	b108      	cbz	r0, 800a39c <_dtoa_r+0x6c4>
 800a398:	07e1      	lsls	r1, r4, #31
 800a39a:	d422      	bmi.n	800a3e2 <_dtoa_r+0x70a>
 800a39c:	4628      	mov	r0, r5
 800a39e:	4659      	mov	r1, fp
 800a3a0:	f001 f876 	bl	800b490 <_Bfree>
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	703b      	strb	r3, [r7, #0]
 800a3a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a3aa:	f10a 0001 	add.w	r0, sl, #1
 800a3ae:	6018      	str	r0, [r3, #0]
 800a3b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	f43f acde 	beq.w	8009d74 <_dtoa_r+0x9c>
 800a3b8:	601f      	str	r7, [r3, #0]
 800a3ba:	e4db      	b.n	8009d74 <_dtoa_r+0x9c>
 800a3bc:	4627      	mov	r7, r4
 800a3be:	463b      	mov	r3, r7
 800a3c0:	461f      	mov	r7, r3
 800a3c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3c6:	2a39      	cmp	r2, #57	; 0x39
 800a3c8:	d107      	bne.n	800a3da <_dtoa_r+0x702>
 800a3ca:	9a03      	ldr	r2, [sp, #12]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d1f7      	bne.n	800a3c0 <_dtoa_r+0x6e8>
 800a3d0:	2230      	movs	r2, #48	; 0x30
 800a3d2:	9903      	ldr	r1, [sp, #12]
 800a3d4:	f108 0801 	add.w	r8, r8, #1
 800a3d8:	700a      	strb	r2, [r1, #0]
 800a3da:	781a      	ldrb	r2, [r3, #0]
 800a3dc:	3201      	adds	r2, #1
 800a3de:	701a      	strb	r2, [r3, #0]
 800a3e0:	e79e      	b.n	800a320 <_dtoa_r+0x648>
 800a3e2:	46d0      	mov	r8, sl
 800a3e4:	e7eb      	b.n	800a3be <_dtoa_r+0x6e6>
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	4b6e      	ldr	r3, [pc, #440]	; (800a5a4 <_dtoa_r+0x8cc>)
 800a3ea:	f7f6 f875 	bl	80004d8 <__aeabi_dmul>
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	4680      	mov	r8, r0
 800a3f4:	4689      	mov	r9, r1
 800a3f6:	f7f6 fad7 	bl	80009a8 <__aeabi_dcmpeq>
 800a3fa:	2800      	cmp	r0, #0
 800a3fc:	d09b      	beq.n	800a336 <_dtoa_r+0x65e>
 800a3fe:	e7cd      	b.n	800a39c <_dtoa_r+0x6c4>
 800a400:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a402:	2a00      	cmp	r2, #0
 800a404:	f000 80d0 	beq.w	800a5a8 <_dtoa_r+0x8d0>
 800a408:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a40a:	2a01      	cmp	r2, #1
 800a40c:	f300 80ae 	bgt.w	800a56c <_dtoa_r+0x894>
 800a410:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a412:	2a00      	cmp	r2, #0
 800a414:	f000 80a6 	beq.w	800a564 <_dtoa_r+0x88c>
 800a418:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a41c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a41e:	9f06      	ldr	r7, [sp, #24]
 800a420:	9a06      	ldr	r2, [sp, #24]
 800a422:	2101      	movs	r1, #1
 800a424:	441a      	add	r2, r3
 800a426:	9206      	str	r2, [sp, #24]
 800a428:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a42a:	4628      	mov	r0, r5
 800a42c:	441a      	add	r2, r3
 800a42e:	9209      	str	r2, [sp, #36]	; 0x24
 800a430:	f001 f92e 	bl	800b690 <__i2b>
 800a434:	4606      	mov	r6, r0
 800a436:	2f00      	cmp	r7, #0
 800a438:	dd0c      	ble.n	800a454 <_dtoa_r+0x77c>
 800a43a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	dd09      	ble.n	800a454 <_dtoa_r+0x77c>
 800a440:	42bb      	cmp	r3, r7
 800a442:	bfa8      	it	ge
 800a444:	463b      	movge	r3, r7
 800a446:	9a06      	ldr	r2, [sp, #24]
 800a448:	1aff      	subs	r7, r7, r3
 800a44a:	1ad2      	subs	r2, r2, r3
 800a44c:	9206      	str	r2, [sp, #24]
 800a44e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a450:	1ad3      	subs	r3, r2, r3
 800a452:	9309      	str	r3, [sp, #36]	; 0x24
 800a454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a456:	b1f3      	cbz	r3, 800a496 <_dtoa_r+0x7be>
 800a458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f000 80a8 	beq.w	800a5b0 <_dtoa_r+0x8d8>
 800a460:	2c00      	cmp	r4, #0
 800a462:	dd10      	ble.n	800a486 <_dtoa_r+0x7ae>
 800a464:	4631      	mov	r1, r6
 800a466:	4622      	mov	r2, r4
 800a468:	4628      	mov	r0, r5
 800a46a:	f001 f9cf 	bl	800b80c <__pow5mult>
 800a46e:	465a      	mov	r2, fp
 800a470:	4601      	mov	r1, r0
 800a472:	4606      	mov	r6, r0
 800a474:	4628      	mov	r0, r5
 800a476:	f001 f921 	bl	800b6bc <__multiply>
 800a47a:	4680      	mov	r8, r0
 800a47c:	4659      	mov	r1, fp
 800a47e:	4628      	mov	r0, r5
 800a480:	f001 f806 	bl	800b490 <_Bfree>
 800a484:	46c3      	mov	fp, r8
 800a486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a488:	1b1a      	subs	r2, r3, r4
 800a48a:	d004      	beq.n	800a496 <_dtoa_r+0x7be>
 800a48c:	4659      	mov	r1, fp
 800a48e:	4628      	mov	r0, r5
 800a490:	f001 f9bc 	bl	800b80c <__pow5mult>
 800a494:	4683      	mov	fp, r0
 800a496:	2101      	movs	r1, #1
 800a498:	4628      	mov	r0, r5
 800a49a:	f001 f8f9 	bl	800b690 <__i2b>
 800a49e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f340 8086 	ble.w	800a5b4 <_dtoa_r+0x8dc>
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	4601      	mov	r1, r0
 800a4ac:	4628      	mov	r0, r5
 800a4ae:	f001 f9ad 	bl	800b80c <__pow5mult>
 800a4b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a4b4:	4604      	mov	r4, r0
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	dd7f      	ble.n	800a5ba <_dtoa_r+0x8e2>
 800a4ba:	f04f 0800 	mov.w	r8, #0
 800a4be:	6923      	ldr	r3, [r4, #16]
 800a4c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a4c4:	6918      	ldr	r0, [r3, #16]
 800a4c6:	f001 f895 	bl	800b5f4 <__hi0bits>
 800a4ca:	f1c0 0020 	rsb	r0, r0, #32
 800a4ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4d0:	4418      	add	r0, r3
 800a4d2:	f010 001f 	ands.w	r0, r0, #31
 800a4d6:	f000 8092 	beq.w	800a5fe <_dtoa_r+0x926>
 800a4da:	f1c0 0320 	rsb	r3, r0, #32
 800a4de:	2b04      	cmp	r3, #4
 800a4e0:	f340 808a 	ble.w	800a5f8 <_dtoa_r+0x920>
 800a4e4:	f1c0 001c 	rsb	r0, r0, #28
 800a4e8:	9b06      	ldr	r3, [sp, #24]
 800a4ea:	4407      	add	r7, r0
 800a4ec:	4403      	add	r3, r0
 800a4ee:	9306      	str	r3, [sp, #24]
 800a4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f2:	4403      	add	r3, r0
 800a4f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a4f6:	9b06      	ldr	r3, [sp, #24]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	dd05      	ble.n	800a508 <_dtoa_r+0x830>
 800a4fc:	4659      	mov	r1, fp
 800a4fe:	461a      	mov	r2, r3
 800a500:	4628      	mov	r0, r5
 800a502:	f001 f9dd 	bl	800b8c0 <__lshift>
 800a506:	4683      	mov	fp, r0
 800a508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	dd05      	ble.n	800a51a <_dtoa_r+0x842>
 800a50e:	4621      	mov	r1, r4
 800a510:	461a      	mov	r2, r3
 800a512:	4628      	mov	r0, r5
 800a514:	f001 f9d4 	bl	800b8c0 <__lshift>
 800a518:	4604      	mov	r4, r0
 800a51a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d070      	beq.n	800a602 <_dtoa_r+0x92a>
 800a520:	4621      	mov	r1, r4
 800a522:	4658      	mov	r0, fp
 800a524:	f001 fa3c 	bl	800b9a0 <__mcmp>
 800a528:	2800      	cmp	r0, #0
 800a52a:	da6a      	bge.n	800a602 <_dtoa_r+0x92a>
 800a52c:	2300      	movs	r3, #0
 800a52e:	4659      	mov	r1, fp
 800a530:	220a      	movs	r2, #10
 800a532:	4628      	mov	r0, r5
 800a534:	f000 ffce 	bl	800b4d4 <__multadd>
 800a538:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a53a:	4683      	mov	fp, r0
 800a53c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a540:	2b00      	cmp	r3, #0
 800a542:	f000 8194 	beq.w	800a86e <_dtoa_r+0xb96>
 800a546:	4631      	mov	r1, r6
 800a548:	2300      	movs	r3, #0
 800a54a:	220a      	movs	r2, #10
 800a54c:	4628      	mov	r0, r5
 800a54e:	f000 ffc1 	bl	800b4d4 <__multadd>
 800a552:	f1b9 0f00 	cmp.w	r9, #0
 800a556:	4606      	mov	r6, r0
 800a558:	f300 8093 	bgt.w	800a682 <_dtoa_r+0x9aa>
 800a55c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a55e:	2b02      	cmp	r3, #2
 800a560:	dc57      	bgt.n	800a612 <_dtoa_r+0x93a>
 800a562:	e08e      	b.n	800a682 <_dtoa_r+0x9aa>
 800a564:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a566:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a56a:	e757      	b.n	800a41c <_dtoa_r+0x744>
 800a56c:	9b08      	ldr	r3, [sp, #32]
 800a56e:	1e5c      	subs	r4, r3, #1
 800a570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a572:	42a3      	cmp	r3, r4
 800a574:	bfb7      	itett	lt
 800a576:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a578:	1b1c      	subge	r4, r3, r4
 800a57a:	1ae2      	sublt	r2, r4, r3
 800a57c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a57e:	bfbe      	ittt	lt
 800a580:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a582:	189b      	addlt	r3, r3, r2
 800a584:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a586:	9b08      	ldr	r3, [sp, #32]
 800a588:	bfb8      	it	lt
 800a58a:	2400      	movlt	r4, #0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	bfbb      	ittet	lt
 800a590:	9b06      	ldrlt	r3, [sp, #24]
 800a592:	9a08      	ldrlt	r2, [sp, #32]
 800a594:	9f06      	ldrge	r7, [sp, #24]
 800a596:	1a9f      	sublt	r7, r3, r2
 800a598:	bfac      	ite	ge
 800a59a:	9b08      	ldrge	r3, [sp, #32]
 800a59c:	2300      	movlt	r3, #0
 800a59e:	e73f      	b.n	800a420 <_dtoa_r+0x748>
 800a5a0:	3fe00000 	.word	0x3fe00000
 800a5a4:	40240000 	.word	0x40240000
 800a5a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a5aa:	9f06      	ldr	r7, [sp, #24]
 800a5ac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a5ae:	e742      	b.n	800a436 <_dtoa_r+0x75e>
 800a5b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5b2:	e76b      	b.n	800a48c <_dtoa_r+0x7b4>
 800a5b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	dc19      	bgt.n	800a5ee <_dtoa_r+0x916>
 800a5ba:	9b04      	ldr	r3, [sp, #16]
 800a5bc:	b9bb      	cbnz	r3, 800a5ee <_dtoa_r+0x916>
 800a5be:	9b05      	ldr	r3, [sp, #20]
 800a5c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5c4:	b99b      	cbnz	r3, 800a5ee <_dtoa_r+0x916>
 800a5c6:	9b05      	ldr	r3, [sp, #20]
 800a5c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a5cc:	0d1b      	lsrs	r3, r3, #20
 800a5ce:	051b      	lsls	r3, r3, #20
 800a5d0:	b183      	cbz	r3, 800a5f4 <_dtoa_r+0x91c>
 800a5d2:	f04f 0801 	mov.w	r8, #1
 800a5d6:	9b06      	ldr	r3, [sp, #24]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	9306      	str	r3, [sp, #24]
 800a5dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5de:	3301      	adds	r3, #1
 800a5e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a5e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f47f af6a 	bne.w	800a4be <_dtoa_r+0x7e6>
 800a5ea:	2001      	movs	r0, #1
 800a5ec:	e76f      	b.n	800a4ce <_dtoa_r+0x7f6>
 800a5ee:	f04f 0800 	mov.w	r8, #0
 800a5f2:	e7f6      	b.n	800a5e2 <_dtoa_r+0x90a>
 800a5f4:	4698      	mov	r8, r3
 800a5f6:	e7f4      	b.n	800a5e2 <_dtoa_r+0x90a>
 800a5f8:	f43f af7d 	beq.w	800a4f6 <_dtoa_r+0x81e>
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	301c      	adds	r0, #28
 800a600:	e772      	b.n	800a4e8 <_dtoa_r+0x810>
 800a602:	9b08      	ldr	r3, [sp, #32]
 800a604:	2b00      	cmp	r3, #0
 800a606:	dc36      	bgt.n	800a676 <_dtoa_r+0x99e>
 800a608:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a60a:	2b02      	cmp	r3, #2
 800a60c:	dd33      	ble.n	800a676 <_dtoa_r+0x99e>
 800a60e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a612:	f1b9 0f00 	cmp.w	r9, #0
 800a616:	d10d      	bne.n	800a634 <_dtoa_r+0x95c>
 800a618:	4621      	mov	r1, r4
 800a61a:	464b      	mov	r3, r9
 800a61c:	2205      	movs	r2, #5
 800a61e:	4628      	mov	r0, r5
 800a620:	f000 ff58 	bl	800b4d4 <__multadd>
 800a624:	4601      	mov	r1, r0
 800a626:	4604      	mov	r4, r0
 800a628:	4658      	mov	r0, fp
 800a62a:	f001 f9b9 	bl	800b9a0 <__mcmp>
 800a62e:	2800      	cmp	r0, #0
 800a630:	f73f adb8 	bgt.w	800a1a4 <_dtoa_r+0x4cc>
 800a634:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a636:	9f03      	ldr	r7, [sp, #12]
 800a638:	ea6f 0a03 	mvn.w	sl, r3
 800a63c:	f04f 0800 	mov.w	r8, #0
 800a640:	4621      	mov	r1, r4
 800a642:	4628      	mov	r0, r5
 800a644:	f000 ff24 	bl	800b490 <_Bfree>
 800a648:	2e00      	cmp	r6, #0
 800a64a:	f43f aea7 	beq.w	800a39c <_dtoa_r+0x6c4>
 800a64e:	f1b8 0f00 	cmp.w	r8, #0
 800a652:	d005      	beq.n	800a660 <_dtoa_r+0x988>
 800a654:	45b0      	cmp	r8, r6
 800a656:	d003      	beq.n	800a660 <_dtoa_r+0x988>
 800a658:	4641      	mov	r1, r8
 800a65a:	4628      	mov	r0, r5
 800a65c:	f000 ff18 	bl	800b490 <_Bfree>
 800a660:	4631      	mov	r1, r6
 800a662:	4628      	mov	r0, r5
 800a664:	f000 ff14 	bl	800b490 <_Bfree>
 800a668:	e698      	b.n	800a39c <_dtoa_r+0x6c4>
 800a66a:	2400      	movs	r4, #0
 800a66c:	4626      	mov	r6, r4
 800a66e:	e7e1      	b.n	800a634 <_dtoa_r+0x95c>
 800a670:	46c2      	mov	sl, r8
 800a672:	4626      	mov	r6, r4
 800a674:	e596      	b.n	800a1a4 <_dtoa_r+0x4cc>
 800a676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a678:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f000 80fd 	beq.w	800a87c <_dtoa_r+0xba4>
 800a682:	2f00      	cmp	r7, #0
 800a684:	dd05      	ble.n	800a692 <_dtoa_r+0x9ba>
 800a686:	4631      	mov	r1, r6
 800a688:	463a      	mov	r2, r7
 800a68a:	4628      	mov	r0, r5
 800a68c:	f001 f918 	bl	800b8c0 <__lshift>
 800a690:	4606      	mov	r6, r0
 800a692:	f1b8 0f00 	cmp.w	r8, #0
 800a696:	d05c      	beq.n	800a752 <_dtoa_r+0xa7a>
 800a698:	4628      	mov	r0, r5
 800a69a:	6871      	ldr	r1, [r6, #4]
 800a69c:	f000 feb8 	bl	800b410 <_Balloc>
 800a6a0:	4607      	mov	r7, r0
 800a6a2:	b928      	cbnz	r0, 800a6b0 <_dtoa_r+0x9d8>
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a6aa:	4b7f      	ldr	r3, [pc, #508]	; (800a8a8 <_dtoa_r+0xbd0>)
 800a6ac:	f7ff bb28 	b.w	8009d00 <_dtoa_r+0x28>
 800a6b0:	6932      	ldr	r2, [r6, #16]
 800a6b2:	f106 010c 	add.w	r1, r6, #12
 800a6b6:	3202      	adds	r2, #2
 800a6b8:	0092      	lsls	r2, r2, #2
 800a6ba:	300c      	adds	r0, #12
 800a6bc:	f7fd fbfc 	bl	8007eb8 <memcpy>
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	4639      	mov	r1, r7
 800a6c4:	4628      	mov	r0, r5
 800a6c6:	f001 f8fb 	bl	800b8c0 <__lshift>
 800a6ca:	46b0      	mov	r8, r6
 800a6cc:	4606      	mov	r6, r0
 800a6ce:	9b03      	ldr	r3, [sp, #12]
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	9308      	str	r3, [sp, #32]
 800a6d4:	9b03      	ldr	r3, [sp, #12]
 800a6d6:	444b      	add	r3, r9
 800a6d8:	930a      	str	r3, [sp, #40]	; 0x28
 800a6da:	9b04      	ldr	r3, [sp, #16]
 800a6dc:	f003 0301 	and.w	r3, r3, #1
 800a6e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a6e2:	9b08      	ldr	r3, [sp, #32]
 800a6e4:	4621      	mov	r1, r4
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	4658      	mov	r0, fp
 800a6ea:	9304      	str	r3, [sp, #16]
 800a6ec:	f7ff fa68 	bl	8009bc0 <quorem>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	4641      	mov	r1, r8
 800a6f4:	3330      	adds	r3, #48	; 0x30
 800a6f6:	9006      	str	r0, [sp, #24]
 800a6f8:	4658      	mov	r0, fp
 800a6fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6fc:	f001 f950 	bl	800b9a0 <__mcmp>
 800a700:	4632      	mov	r2, r6
 800a702:	4681      	mov	r9, r0
 800a704:	4621      	mov	r1, r4
 800a706:	4628      	mov	r0, r5
 800a708:	f001 f966 	bl	800b9d8 <__mdiff>
 800a70c:	68c2      	ldr	r2, [r0, #12]
 800a70e:	4607      	mov	r7, r0
 800a710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a712:	bb02      	cbnz	r2, 800a756 <_dtoa_r+0xa7e>
 800a714:	4601      	mov	r1, r0
 800a716:	4658      	mov	r0, fp
 800a718:	f001 f942 	bl	800b9a0 <__mcmp>
 800a71c:	4602      	mov	r2, r0
 800a71e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a720:	4639      	mov	r1, r7
 800a722:	4628      	mov	r0, r5
 800a724:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a728:	f000 feb2 	bl	800b490 <_Bfree>
 800a72c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a72e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a730:	9f08      	ldr	r7, [sp, #32]
 800a732:	ea43 0102 	orr.w	r1, r3, r2
 800a736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a738:	430b      	orrs	r3, r1
 800a73a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a73c:	d10d      	bne.n	800a75a <_dtoa_r+0xa82>
 800a73e:	2b39      	cmp	r3, #57	; 0x39
 800a740:	d029      	beq.n	800a796 <_dtoa_r+0xabe>
 800a742:	f1b9 0f00 	cmp.w	r9, #0
 800a746:	dd01      	ble.n	800a74c <_dtoa_r+0xa74>
 800a748:	9b06      	ldr	r3, [sp, #24]
 800a74a:	3331      	adds	r3, #49	; 0x31
 800a74c:	9a04      	ldr	r2, [sp, #16]
 800a74e:	7013      	strb	r3, [r2, #0]
 800a750:	e776      	b.n	800a640 <_dtoa_r+0x968>
 800a752:	4630      	mov	r0, r6
 800a754:	e7b9      	b.n	800a6ca <_dtoa_r+0x9f2>
 800a756:	2201      	movs	r2, #1
 800a758:	e7e2      	b.n	800a720 <_dtoa_r+0xa48>
 800a75a:	f1b9 0f00 	cmp.w	r9, #0
 800a75e:	db06      	blt.n	800a76e <_dtoa_r+0xa96>
 800a760:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a762:	ea41 0909 	orr.w	r9, r1, r9
 800a766:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a768:	ea59 0101 	orrs.w	r1, r9, r1
 800a76c:	d120      	bne.n	800a7b0 <_dtoa_r+0xad8>
 800a76e:	2a00      	cmp	r2, #0
 800a770:	ddec      	ble.n	800a74c <_dtoa_r+0xa74>
 800a772:	4659      	mov	r1, fp
 800a774:	2201      	movs	r2, #1
 800a776:	4628      	mov	r0, r5
 800a778:	9308      	str	r3, [sp, #32]
 800a77a:	f001 f8a1 	bl	800b8c0 <__lshift>
 800a77e:	4621      	mov	r1, r4
 800a780:	4683      	mov	fp, r0
 800a782:	f001 f90d 	bl	800b9a0 <__mcmp>
 800a786:	2800      	cmp	r0, #0
 800a788:	9b08      	ldr	r3, [sp, #32]
 800a78a:	dc02      	bgt.n	800a792 <_dtoa_r+0xaba>
 800a78c:	d1de      	bne.n	800a74c <_dtoa_r+0xa74>
 800a78e:	07da      	lsls	r2, r3, #31
 800a790:	d5dc      	bpl.n	800a74c <_dtoa_r+0xa74>
 800a792:	2b39      	cmp	r3, #57	; 0x39
 800a794:	d1d8      	bne.n	800a748 <_dtoa_r+0xa70>
 800a796:	2339      	movs	r3, #57	; 0x39
 800a798:	9a04      	ldr	r2, [sp, #16]
 800a79a:	7013      	strb	r3, [r2, #0]
 800a79c:	463b      	mov	r3, r7
 800a79e:	461f      	mov	r7, r3
 800a7a0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a7a4:	3b01      	subs	r3, #1
 800a7a6:	2a39      	cmp	r2, #57	; 0x39
 800a7a8:	d050      	beq.n	800a84c <_dtoa_r+0xb74>
 800a7aa:	3201      	adds	r2, #1
 800a7ac:	701a      	strb	r2, [r3, #0]
 800a7ae:	e747      	b.n	800a640 <_dtoa_r+0x968>
 800a7b0:	2a00      	cmp	r2, #0
 800a7b2:	dd03      	ble.n	800a7bc <_dtoa_r+0xae4>
 800a7b4:	2b39      	cmp	r3, #57	; 0x39
 800a7b6:	d0ee      	beq.n	800a796 <_dtoa_r+0xabe>
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	e7c7      	b.n	800a74c <_dtoa_r+0xa74>
 800a7bc:	9a08      	ldr	r2, [sp, #32]
 800a7be:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a7c0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a7c4:	428a      	cmp	r2, r1
 800a7c6:	d02a      	beq.n	800a81e <_dtoa_r+0xb46>
 800a7c8:	4659      	mov	r1, fp
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	220a      	movs	r2, #10
 800a7ce:	4628      	mov	r0, r5
 800a7d0:	f000 fe80 	bl	800b4d4 <__multadd>
 800a7d4:	45b0      	cmp	r8, r6
 800a7d6:	4683      	mov	fp, r0
 800a7d8:	f04f 0300 	mov.w	r3, #0
 800a7dc:	f04f 020a 	mov.w	r2, #10
 800a7e0:	4641      	mov	r1, r8
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	d107      	bne.n	800a7f6 <_dtoa_r+0xb1e>
 800a7e6:	f000 fe75 	bl	800b4d4 <__multadd>
 800a7ea:	4680      	mov	r8, r0
 800a7ec:	4606      	mov	r6, r0
 800a7ee:	9b08      	ldr	r3, [sp, #32]
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	9308      	str	r3, [sp, #32]
 800a7f4:	e775      	b.n	800a6e2 <_dtoa_r+0xa0a>
 800a7f6:	f000 fe6d 	bl	800b4d4 <__multadd>
 800a7fa:	4631      	mov	r1, r6
 800a7fc:	4680      	mov	r8, r0
 800a7fe:	2300      	movs	r3, #0
 800a800:	220a      	movs	r2, #10
 800a802:	4628      	mov	r0, r5
 800a804:	f000 fe66 	bl	800b4d4 <__multadd>
 800a808:	4606      	mov	r6, r0
 800a80a:	e7f0      	b.n	800a7ee <_dtoa_r+0xb16>
 800a80c:	f1b9 0f00 	cmp.w	r9, #0
 800a810:	bfcc      	ite	gt
 800a812:	464f      	movgt	r7, r9
 800a814:	2701      	movle	r7, #1
 800a816:	f04f 0800 	mov.w	r8, #0
 800a81a:	9a03      	ldr	r2, [sp, #12]
 800a81c:	4417      	add	r7, r2
 800a81e:	4659      	mov	r1, fp
 800a820:	2201      	movs	r2, #1
 800a822:	4628      	mov	r0, r5
 800a824:	9308      	str	r3, [sp, #32]
 800a826:	f001 f84b 	bl	800b8c0 <__lshift>
 800a82a:	4621      	mov	r1, r4
 800a82c:	4683      	mov	fp, r0
 800a82e:	f001 f8b7 	bl	800b9a0 <__mcmp>
 800a832:	2800      	cmp	r0, #0
 800a834:	dcb2      	bgt.n	800a79c <_dtoa_r+0xac4>
 800a836:	d102      	bne.n	800a83e <_dtoa_r+0xb66>
 800a838:	9b08      	ldr	r3, [sp, #32]
 800a83a:	07db      	lsls	r3, r3, #31
 800a83c:	d4ae      	bmi.n	800a79c <_dtoa_r+0xac4>
 800a83e:	463b      	mov	r3, r7
 800a840:	461f      	mov	r7, r3
 800a842:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a846:	2a30      	cmp	r2, #48	; 0x30
 800a848:	d0fa      	beq.n	800a840 <_dtoa_r+0xb68>
 800a84a:	e6f9      	b.n	800a640 <_dtoa_r+0x968>
 800a84c:	9a03      	ldr	r2, [sp, #12]
 800a84e:	429a      	cmp	r2, r3
 800a850:	d1a5      	bne.n	800a79e <_dtoa_r+0xac6>
 800a852:	2331      	movs	r3, #49	; 0x31
 800a854:	f10a 0a01 	add.w	sl, sl, #1
 800a858:	e779      	b.n	800a74e <_dtoa_r+0xa76>
 800a85a:	4b14      	ldr	r3, [pc, #80]	; (800a8ac <_dtoa_r+0xbd4>)
 800a85c:	f7ff baa8 	b.w	8009db0 <_dtoa_r+0xd8>
 800a860:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a862:	2b00      	cmp	r3, #0
 800a864:	f47f aa81 	bne.w	8009d6a <_dtoa_r+0x92>
 800a868:	4b11      	ldr	r3, [pc, #68]	; (800a8b0 <_dtoa_r+0xbd8>)
 800a86a:	f7ff baa1 	b.w	8009db0 <_dtoa_r+0xd8>
 800a86e:	f1b9 0f00 	cmp.w	r9, #0
 800a872:	dc03      	bgt.n	800a87c <_dtoa_r+0xba4>
 800a874:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a876:	2b02      	cmp	r3, #2
 800a878:	f73f aecb 	bgt.w	800a612 <_dtoa_r+0x93a>
 800a87c:	9f03      	ldr	r7, [sp, #12]
 800a87e:	4621      	mov	r1, r4
 800a880:	4658      	mov	r0, fp
 800a882:	f7ff f99d 	bl	8009bc0 <quorem>
 800a886:	9a03      	ldr	r2, [sp, #12]
 800a888:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a88c:	f807 3b01 	strb.w	r3, [r7], #1
 800a890:	1aba      	subs	r2, r7, r2
 800a892:	4591      	cmp	r9, r2
 800a894:	ddba      	ble.n	800a80c <_dtoa_r+0xb34>
 800a896:	4659      	mov	r1, fp
 800a898:	2300      	movs	r3, #0
 800a89a:	220a      	movs	r2, #10
 800a89c:	4628      	mov	r0, r5
 800a89e:	f000 fe19 	bl	800b4d4 <__multadd>
 800a8a2:	4683      	mov	fp, r0
 800a8a4:	e7eb      	b.n	800a87e <_dtoa_r+0xba6>
 800a8a6:	bf00      	nop
 800a8a8:	0800d558 	.word	0x0800d558
 800a8ac:	0800d35c 	.word	0x0800d35c
 800a8b0:	0800d4d9 	.word	0x0800d4d9

0800a8b4 <__sflush_r>:
 800a8b4:	898a      	ldrh	r2, [r1, #12]
 800a8b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8b8:	4605      	mov	r5, r0
 800a8ba:	0710      	lsls	r0, r2, #28
 800a8bc:	460c      	mov	r4, r1
 800a8be:	d457      	bmi.n	800a970 <__sflush_r+0xbc>
 800a8c0:	684b      	ldr	r3, [r1, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	dc04      	bgt.n	800a8d0 <__sflush_r+0x1c>
 800a8c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	dc01      	bgt.n	800a8d0 <__sflush_r+0x1c>
 800a8cc:	2000      	movs	r0, #0
 800a8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8d2:	2e00      	cmp	r6, #0
 800a8d4:	d0fa      	beq.n	800a8cc <__sflush_r+0x18>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a8dc:	682f      	ldr	r7, [r5, #0]
 800a8de:	602b      	str	r3, [r5, #0]
 800a8e0:	d032      	beq.n	800a948 <__sflush_r+0x94>
 800a8e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a8e4:	89a3      	ldrh	r3, [r4, #12]
 800a8e6:	075a      	lsls	r2, r3, #29
 800a8e8:	d505      	bpl.n	800a8f6 <__sflush_r+0x42>
 800a8ea:	6863      	ldr	r3, [r4, #4]
 800a8ec:	1ac0      	subs	r0, r0, r3
 800a8ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8f0:	b10b      	cbz	r3, 800a8f6 <__sflush_r+0x42>
 800a8f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a8f4:	1ac0      	subs	r0, r0, r3
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8fc:	4628      	mov	r0, r5
 800a8fe:	6a21      	ldr	r1, [r4, #32]
 800a900:	47b0      	blx	r6
 800a902:	1c43      	adds	r3, r0, #1
 800a904:	89a3      	ldrh	r3, [r4, #12]
 800a906:	d106      	bne.n	800a916 <__sflush_r+0x62>
 800a908:	6829      	ldr	r1, [r5, #0]
 800a90a:	291d      	cmp	r1, #29
 800a90c:	d82c      	bhi.n	800a968 <__sflush_r+0xb4>
 800a90e:	4a29      	ldr	r2, [pc, #164]	; (800a9b4 <__sflush_r+0x100>)
 800a910:	40ca      	lsrs	r2, r1
 800a912:	07d6      	lsls	r6, r2, #31
 800a914:	d528      	bpl.n	800a968 <__sflush_r+0xb4>
 800a916:	2200      	movs	r2, #0
 800a918:	6062      	str	r2, [r4, #4]
 800a91a:	6922      	ldr	r2, [r4, #16]
 800a91c:	04d9      	lsls	r1, r3, #19
 800a91e:	6022      	str	r2, [r4, #0]
 800a920:	d504      	bpl.n	800a92c <__sflush_r+0x78>
 800a922:	1c42      	adds	r2, r0, #1
 800a924:	d101      	bne.n	800a92a <__sflush_r+0x76>
 800a926:	682b      	ldr	r3, [r5, #0]
 800a928:	b903      	cbnz	r3, 800a92c <__sflush_r+0x78>
 800a92a:	6560      	str	r0, [r4, #84]	; 0x54
 800a92c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a92e:	602f      	str	r7, [r5, #0]
 800a930:	2900      	cmp	r1, #0
 800a932:	d0cb      	beq.n	800a8cc <__sflush_r+0x18>
 800a934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a938:	4299      	cmp	r1, r3
 800a93a:	d002      	beq.n	800a942 <__sflush_r+0x8e>
 800a93c:	4628      	mov	r0, r5
 800a93e:	f001 fa33 	bl	800bda8 <_free_r>
 800a942:	2000      	movs	r0, #0
 800a944:	6360      	str	r0, [r4, #52]	; 0x34
 800a946:	e7c2      	b.n	800a8ce <__sflush_r+0x1a>
 800a948:	6a21      	ldr	r1, [r4, #32]
 800a94a:	2301      	movs	r3, #1
 800a94c:	4628      	mov	r0, r5
 800a94e:	47b0      	blx	r6
 800a950:	1c41      	adds	r1, r0, #1
 800a952:	d1c7      	bne.n	800a8e4 <__sflush_r+0x30>
 800a954:	682b      	ldr	r3, [r5, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d0c4      	beq.n	800a8e4 <__sflush_r+0x30>
 800a95a:	2b1d      	cmp	r3, #29
 800a95c:	d001      	beq.n	800a962 <__sflush_r+0xae>
 800a95e:	2b16      	cmp	r3, #22
 800a960:	d101      	bne.n	800a966 <__sflush_r+0xb2>
 800a962:	602f      	str	r7, [r5, #0]
 800a964:	e7b2      	b.n	800a8cc <__sflush_r+0x18>
 800a966:	89a3      	ldrh	r3, [r4, #12]
 800a968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a96c:	81a3      	strh	r3, [r4, #12]
 800a96e:	e7ae      	b.n	800a8ce <__sflush_r+0x1a>
 800a970:	690f      	ldr	r7, [r1, #16]
 800a972:	2f00      	cmp	r7, #0
 800a974:	d0aa      	beq.n	800a8cc <__sflush_r+0x18>
 800a976:	0793      	lsls	r3, r2, #30
 800a978:	bf18      	it	ne
 800a97a:	2300      	movne	r3, #0
 800a97c:	680e      	ldr	r6, [r1, #0]
 800a97e:	bf08      	it	eq
 800a980:	694b      	ldreq	r3, [r1, #20]
 800a982:	1bf6      	subs	r6, r6, r7
 800a984:	600f      	str	r7, [r1, #0]
 800a986:	608b      	str	r3, [r1, #8]
 800a988:	2e00      	cmp	r6, #0
 800a98a:	dd9f      	ble.n	800a8cc <__sflush_r+0x18>
 800a98c:	4633      	mov	r3, r6
 800a98e:	463a      	mov	r2, r7
 800a990:	4628      	mov	r0, r5
 800a992:	6a21      	ldr	r1, [r4, #32]
 800a994:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a998:	47e0      	blx	ip
 800a99a:	2800      	cmp	r0, #0
 800a99c:	dc06      	bgt.n	800a9ac <__sflush_r+0xf8>
 800a99e:	89a3      	ldrh	r3, [r4, #12]
 800a9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9a8:	81a3      	strh	r3, [r4, #12]
 800a9aa:	e790      	b.n	800a8ce <__sflush_r+0x1a>
 800a9ac:	4407      	add	r7, r0
 800a9ae:	1a36      	subs	r6, r6, r0
 800a9b0:	e7ea      	b.n	800a988 <__sflush_r+0xd4>
 800a9b2:	bf00      	nop
 800a9b4:	20400001 	.word	0x20400001

0800a9b8 <_fflush_r>:
 800a9b8:	b538      	push	{r3, r4, r5, lr}
 800a9ba:	690b      	ldr	r3, [r1, #16]
 800a9bc:	4605      	mov	r5, r0
 800a9be:	460c      	mov	r4, r1
 800a9c0:	b913      	cbnz	r3, 800a9c8 <_fflush_r+0x10>
 800a9c2:	2500      	movs	r5, #0
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	bd38      	pop	{r3, r4, r5, pc}
 800a9c8:	b118      	cbz	r0, 800a9d2 <_fflush_r+0x1a>
 800a9ca:	6983      	ldr	r3, [r0, #24]
 800a9cc:	b90b      	cbnz	r3, 800a9d2 <_fflush_r+0x1a>
 800a9ce:	f000 f887 	bl	800aae0 <__sinit>
 800a9d2:	4b14      	ldr	r3, [pc, #80]	; (800aa24 <_fflush_r+0x6c>)
 800a9d4:	429c      	cmp	r4, r3
 800a9d6:	d11b      	bne.n	800aa10 <_fflush_r+0x58>
 800a9d8:	686c      	ldr	r4, [r5, #4]
 800a9da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d0ef      	beq.n	800a9c2 <_fflush_r+0xa>
 800a9e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a9e4:	07d0      	lsls	r0, r2, #31
 800a9e6:	d404      	bmi.n	800a9f2 <_fflush_r+0x3a>
 800a9e8:	0599      	lsls	r1, r3, #22
 800a9ea:	d402      	bmi.n	800a9f2 <_fflush_r+0x3a>
 800a9ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9ee:	f000 fc80 	bl	800b2f2 <__retarget_lock_acquire_recursive>
 800a9f2:	4628      	mov	r0, r5
 800a9f4:	4621      	mov	r1, r4
 800a9f6:	f7ff ff5d 	bl	800a8b4 <__sflush_r>
 800a9fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9fc:	4605      	mov	r5, r0
 800a9fe:	07da      	lsls	r2, r3, #31
 800aa00:	d4e0      	bmi.n	800a9c4 <_fflush_r+0xc>
 800aa02:	89a3      	ldrh	r3, [r4, #12]
 800aa04:	059b      	lsls	r3, r3, #22
 800aa06:	d4dd      	bmi.n	800a9c4 <_fflush_r+0xc>
 800aa08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa0a:	f000 fc73 	bl	800b2f4 <__retarget_lock_release_recursive>
 800aa0e:	e7d9      	b.n	800a9c4 <_fflush_r+0xc>
 800aa10:	4b05      	ldr	r3, [pc, #20]	; (800aa28 <_fflush_r+0x70>)
 800aa12:	429c      	cmp	r4, r3
 800aa14:	d101      	bne.n	800aa1a <_fflush_r+0x62>
 800aa16:	68ac      	ldr	r4, [r5, #8]
 800aa18:	e7df      	b.n	800a9da <_fflush_r+0x22>
 800aa1a:	4b04      	ldr	r3, [pc, #16]	; (800aa2c <_fflush_r+0x74>)
 800aa1c:	429c      	cmp	r4, r3
 800aa1e:	bf08      	it	eq
 800aa20:	68ec      	ldreq	r4, [r5, #12]
 800aa22:	e7da      	b.n	800a9da <_fflush_r+0x22>
 800aa24:	0800d58c 	.word	0x0800d58c
 800aa28:	0800d5ac 	.word	0x0800d5ac
 800aa2c:	0800d56c 	.word	0x0800d56c

0800aa30 <std>:
 800aa30:	2300      	movs	r3, #0
 800aa32:	b510      	push	{r4, lr}
 800aa34:	4604      	mov	r4, r0
 800aa36:	e9c0 3300 	strd	r3, r3, [r0]
 800aa3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa3e:	6083      	str	r3, [r0, #8]
 800aa40:	8181      	strh	r1, [r0, #12]
 800aa42:	6643      	str	r3, [r0, #100]	; 0x64
 800aa44:	81c2      	strh	r2, [r0, #14]
 800aa46:	6183      	str	r3, [r0, #24]
 800aa48:	4619      	mov	r1, r3
 800aa4a:	2208      	movs	r2, #8
 800aa4c:	305c      	adds	r0, #92	; 0x5c
 800aa4e:	f7fd fa41 	bl	8007ed4 <memset>
 800aa52:	4b05      	ldr	r3, [pc, #20]	; (800aa68 <std+0x38>)
 800aa54:	6224      	str	r4, [r4, #32]
 800aa56:	6263      	str	r3, [r4, #36]	; 0x24
 800aa58:	4b04      	ldr	r3, [pc, #16]	; (800aa6c <std+0x3c>)
 800aa5a:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa5c:	4b04      	ldr	r3, [pc, #16]	; (800aa70 <std+0x40>)
 800aa5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa60:	4b04      	ldr	r3, [pc, #16]	; (800aa74 <std+0x44>)
 800aa62:	6323      	str	r3, [r4, #48]	; 0x30
 800aa64:	bd10      	pop	{r4, pc}
 800aa66:	bf00      	nop
 800aa68:	0800c4f5 	.word	0x0800c4f5
 800aa6c:	0800c517 	.word	0x0800c517
 800aa70:	0800c54f 	.word	0x0800c54f
 800aa74:	0800c573 	.word	0x0800c573

0800aa78 <_cleanup_r>:
 800aa78:	4901      	ldr	r1, [pc, #4]	; (800aa80 <_cleanup_r+0x8>)
 800aa7a:	f000 b8af 	b.w	800abdc <_fwalk_reent>
 800aa7e:	bf00      	nop
 800aa80:	0800a9b9 	.word	0x0800a9b9

0800aa84 <__sfmoreglue>:
 800aa84:	2268      	movs	r2, #104	; 0x68
 800aa86:	b570      	push	{r4, r5, r6, lr}
 800aa88:	1e4d      	subs	r5, r1, #1
 800aa8a:	4355      	muls	r5, r2
 800aa8c:	460e      	mov	r6, r1
 800aa8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa92:	f001 f9f1 	bl	800be78 <_malloc_r>
 800aa96:	4604      	mov	r4, r0
 800aa98:	b140      	cbz	r0, 800aaac <__sfmoreglue+0x28>
 800aa9a:	2100      	movs	r1, #0
 800aa9c:	e9c0 1600 	strd	r1, r6, [r0]
 800aaa0:	300c      	adds	r0, #12
 800aaa2:	60a0      	str	r0, [r4, #8]
 800aaa4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aaa8:	f7fd fa14 	bl	8007ed4 <memset>
 800aaac:	4620      	mov	r0, r4
 800aaae:	bd70      	pop	{r4, r5, r6, pc}

0800aab0 <__sfp_lock_acquire>:
 800aab0:	4801      	ldr	r0, [pc, #4]	; (800aab8 <__sfp_lock_acquire+0x8>)
 800aab2:	f000 bc1e 	b.w	800b2f2 <__retarget_lock_acquire_recursive>
 800aab6:	bf00      	nop
 800aab8:	20000d71 	.word	0x20000d71

0800aabc <__sfp_lock_release>:
 800aabc:	4801      	ldr	r0, [pc, #4]	; (800aac4 <__sfp_lock_release+0x8>)
 800aabe:	f000 bc19 	b.w	800b2f4 <__retarget_lock_release_recursive>
 800aac2:	bf00      	nop
 800aac4:	20000d71 	.word	0x20000d71

0800aac8 <__sinit_lock_acquire>:
 800aac8:	4801      	ldr	r0, [pc, #4]	; (800aad0 <__sinit_lock_acquire+0x8>)
 800aaca:	f000 bc12 	b.w	800b2f2 <__retarget_lock_acquire_recursive>
 800aace:	bf00      	nop
 800aad0:	20000d72 	.word	0x20000d72

0800aad4 <__sinit_lock_release>:
 800aad4:	4801      	ldr	r0, [pc, #4]	; (800aadc <__sinit_lock_release+0x8>)
 800aad6:	f000 bc0d 	b.w	800b2f4 <__retarget_lock_release_recursive>
 800aada:	bf00      	nop
 800aadc:	20000d72 	.word	0x20000d72

0800aae0 <__sinit>:
 800aae0:	b510      	push	{r4, lr}
 800aae2:	4604      	mov	r4, r0
 800aae4:	f7ff fff0 	bl	800aac8 <__sinit_lock_acquire>
 800aae8:	69a3      	ldr	r3, [r4, #24]
 800aaea:	b11b      	cbz	r3, 800aaf4 <__sinit+0x14>
 800aaec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaf0:	f7ff bff0 	b.w	800aad4 <__sinit_lock_release>
 800aaf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aaf8:	6523      	str	r3, [r4, #80]	; 0x50
 800aafa:	4b13      	ldr	r3, [pc, #76]	; (800ab48 <__sinit+0x68>)
 800aafc:	4a13      	ldr	r2, [pc, #76]	; (800ab4c <__sinit+0x6c>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab02:	42a3      	cmp	r3, r4
 800ab04:	bf08      	it	eq
 800ab06:	2301      	moveq	r3, #1
 800ab08:	4620      	mov	r0, r4
 800ab0a:	bf08      	it	eq
 800ab0c:	61a3      	streq	r3, [r4, #24]
 800ab0e:	f000 f81f 	bl	800ab50 <__sfp>
 800ab12:	6060      	str	r0, [r4, #4]
 800ab14:	4620      	mov	r0, r4
 800ab16:	f000 f81b 	bl	800ab50 <__sfp>
 800ab1a:	60a0      	str	r0, [r4, #8]
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	f000 f817 	bl	800ab50 <__sfp>
 800ab22:	2200      	movs	r2, #0
 800ab24:	2104      	movs	r1, #4
 800ab26:	60e0      	str	r0, [r4, #12]
 800ab28:	6860      	ldr	r0, [r4, #4]
 800ab2a:	f7ff ff81 	bl	800aa30 <std>
 800ab2e:	2201      	movs	r2, #1
 800ab30:	2109      	movs	r1, #9
 800ab32:	68a0      	ldr	r0, [r4, #8]
 800ab34:	f7ff ff7c 	bl	800aa30 <std>
 800ab38:	2202      	movs	r2, #2
 800ab3a:	2112      	movs	r1, #18
 800ab3c:	68e0      	ldr	r0, [r4, #12]
 800ab3e:	f7ff ff77 	bl	800aa30 <std>
 800ab42:	2301      	movs	r3, #1
 800ab44:	61a3      	str	r3, [r4, #24]
 800ab46:	e7d1      	b.n	800aaec <__sinit+0xc>
 800ab48:	0800d348 	.word	0x0800d348
 800ab4c:	0800aa79 	.word	0x0800aa79

0800ab50 <__sfp>:
 800ab50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab52:	4607      	mov	r7, r0
 800ab54:	f7ff ffac 	bl	800aab0 <__sfp_lock_acquire>
 800ab58:	4b1e      	ldr	r3, [pc, #120]	; (800abd4 <__sfp+0x84>)
 800ab5a:	681e      	ldr	r6, [r3, #0]
 800ab5c:	69b3      	ldr	r3, [r6, #24]
 800ab5e:	b913      	cbnz	r3, 800ab66 <__sfp+0x16>
 800ab60:	4630      	mov	r0, r6
 800ab62:	f7ff ffbd 	bl	800aae0 <__sinit>
 800ab66:	3648      	adds	r6, #72	; 0x48
 800ab68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab6c:	3b01      	subs	r3, #1
 800ab6e:	d503      	bpl.n	800ab78 <__sfp+0x28>
 800ab70:	6833      	ldr	r3, [r6, #0]
 800ab72:	b30b      	cbz	r3, 800abb8 <__sfp+0x68>
 800ab74:	6836      	ldr	r6, [r6, #0]
 800ab76:	e7f7      	b.n	800ab68 <__sfp+0x18>
 800ab78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab7c:	b9d5      	cbnz	r5, 800abb4 <__sfp+0x64>
 800ab7e:	4b16      	ldr	r3, [pc, #88]	; (800abd8 <__sfp+0x88>)
 800ab80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ab84:	60e3      	str	r3, [r4, #12]
 800ab86:	6665      	str	r5, [r4, #100]	; 0x64
 800ab88:	f000 fbb2 	bl	800b2f0 <__retarget_lock_init_recursive>
 800ab8c:	f7ff ff96 	bl	800aabc <__sfp_lock_release>
 800ab90:	2208      	movs	r2, #8
 800ab92:	4629      	mov	r1, r5
 800ab94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ab98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ab9c:	6025      	str	r5, [r4, #0]
 800ab9e:	61a5      	str	r5, [r4, #24]
 800aba0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aba4:	f7fd f996 	bl	8007ed4 <memset>
 800aba8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800abac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800abb0:	4620      	mov	r0, r4
 800abb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abb4:	3468      	adds	r4, #104	; 0x68
 800abb6:	e7d9      	b.n	800ab6c <__sfp+0x1c>
 800abb8:	2104      	movs	r1, #4
 800abba:	4638      	mov	r0, r7
 800abbc:	f7ff ff62 	bl	800aa84 <__sfmoreglue>
 800abc0:	4604      	mov	r4, r0
 800abc2:	6030      	str	r0, [r6, #0]
 800abc4:	2800      	cmp	r0, #0
 800abc6:	d1d5      	bne.n	800ab74 <__sfp+0x24>
 800abc8:	f7ff ff78 	bl	800aabc <__sfp_lock_release>
 800abcc:	230c      	movs	r3, #12
 800abce:	603b      	str	r3, [r7, #0]
 800abd0:	e7ee      	b.n	800abb0 <__sfp+0x60>
 800abd2:	bf00      	nop
 800abd4:	0800d348 	.word	0x0800d348
 800abd8:	ffff0001 	.word	0xffff0001

0800abdc <_fwalk_reent>:
 800abdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abe0:	4606      	mov	r6, r0
 800abe2:	4688      	mov	r8, r1
 800abe4:	2700      	movs	r7, #0
 800abe6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800abea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800abee:	f1b9 0901 	subs.w	r9, r9, #1
 800abf2:	d505      	bpl.n	800ac00 <_fwalk_reent+0x24>
 800abf4:	6824      	ldr	r4, [r4, #0]
 800abf6:	2c00      	cmp	r4, #0
 800abf8:	d1f7      	bne.n	800abea <_fwalk_reent+0xe>
 800abfa:	4638      	mov	r0, r7
 800abfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac00:	89ab      	ldrh	r3, [r5, #12]
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d907      	bls.n	800ac16 <_fwalk_reent+0x3a>
 800ac06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	d003      	beq.n	800ac16 <_fwalk_reent+0x3a>
 800ac0e:	4629      	mov	r1, r5
 800ac10:	4630      	mov	r0, r6
 800ac12:	47c0      	blx	r8
 800ac14:	4307      	orrs	r7, r0
 800ac16:	3568      	adds	r5, #104	; 0x68
 800ac18:	e7e9      	b.n	800abee <_fwalk_reent+0x12>

0800ac1a <rshift>:
 800ac1a:	6903      	ldr	r3, [r0, #16]
 800ac1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac20:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ac24:	f100 0414 	add.w	r4, r0, #20
 800ac28:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ac2c:	dd46      	ble.n	800acbc <rshift+0xa2>
 800ac2e:	f011 011f 	ands.w	r1, r1, #31
 800ac32:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ac36:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ac3a:	d10c      	bne.n	800ac56 <rshift+0x3c>
 800ac3c:	4629      	mov	r1, r5
 800ac3e:	f100 0710 	add.w	r7, r0, #16
 800ac42:	42b1      	cmp	r1, r6
 800ac44:	d335      	bcc.n	800acb2 <rshift+0x98>
 800ac46:	1a9b      	subs	r3, r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	1eea      	subs	r2, r5, #3
 800ac4c:	4296      	cmp	r6, r2
 800ac4e:	bf38      	it	cc
 800ac50:	2300      	movcc	r3, #0
 800ac52:	4423      	add	r3, r4
 800ac54:	e015      	b.n	800ac82 <rshift+0x68>
 800ac56:	46a1      	mov	r9, r4
 800ac58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ac5c:	f1c1 0820 	rsb	r8, r1, #32
 800ac60:	40cf      	lsrs	r7, r1
 800ac62:	f105 0e04 	add.w	lr, r5, #4
 800ac66:	4576      	cmp	r6, lr
 800ac68:	46f4      	mov	ip, lr
 800ac6a:	d816      	bhi.n	800ac9a <rshift+0x80>
 800ac6c:	1a9a      	subs	r2, r3, r2
 800ac6e:	0092      	lsls	r2, r2, #2
 800ac70:	3a04      	subs	r2, #4
 800ac72:	3501      	adds	r5, #1
 800ac74:	42ae      	cmp	r6, r5
 800ac76:	bf38      	it	cc
 800ac78:	2200      	movcc	r2, #0
 800ac7a:	18a3      	adds	r3, r4, r2
 800ac7c:	50a7      	str	r7, [r4, r2]
 800ac7e:	b107      	cbz	r7, 800ac82 <rshift+0x68>
 800ac80:	3304      	adds	r3, #4
 800ac82:	42a3      	cmp	r3, r4
 800ac84:	eba3 0204 	sub.w	r2, r3, r4
 800ac88:	bf08      	it	eq
 800ac8a:	2300      	moveq	r3, #0
 800ac8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ac90:	6102      	str	r2, [r0, #16]
 800ac92:	bf08      	it	eq
 800ac94:	6143      	streq	r3, [r0, #20]
 800ac96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac9a:	f8dc c000 	ldr.w	ip, [ip]
 800ac9e:	fa0c fc08 	lsl.w	ip, ip, r8
 800aca2:	ea4c 0707 	orr.w	r7, ip, r7
 800aca6:	f849 7b04 	str.w	r7, [r9], #4
 800acaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800acae:	40cf      	lsrs	r7, r1
 800acb0:	e7d9      	b.n	800ac66 <rshift+0x4c>
 800acb2:	f851 cb04 	ldr.w	ip, [r1], #4
 800acb6:	f847 cf04 	str.w	ip, [r7, #4]!
 800acba:	e7c2      	b.n	800ac42 <rshift+0x28>
 800acbc:	4623      	mov	r3, r4
 800acbe:	e7e0      	b.n	800ac82 <rshift+0x68>

0800acc0 <__hexdig_fun>:
 800acc0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800acc4:	2b09      	cmp	r3, #9
 800acc6:	d802      	bhi.n	800acce <__hexdig_fun+0xe>
 800acc8:	3820      	subs	r0, #32
 800acca:	b2c0      	uxtb	r0, r0
 800accc:	4770      	bx	lr
 800acce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800acd2:	2b05      	cmp	r3, #5
 800acd4:	d801      	bhi.n	800acda <__hexdig_fun+0x1a>
 800acd6:	3847      	subs	r0, #71	; 0x47
 800acd8:	e7f7      	b.n	800acca <__hexdig_fun+0xa>
 800acda:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800acde:	2b05      	cmp	r3, #5
 800ace0:	d801      	bhi.n	800ace6 <__hexdig_fun+0x26>
 800ace2:	3827      	subs	r0, #39	; 0x27
 800ace4:	e7f1      	b.n	800acca <__hexdig_fun+0xa>
 800ace6:	2000      	movs	r0, #0
 800ace8:	4770      	bx	lr
	...

0800acec <__gethex>:
 800acec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf0:	b08b      	sub	sp, #44	; 0x2c
 800acf2:	9305      	str	r3, [sp, #20]
 800acf4:	4bb2      	ldr	r3, [pc, #712]	; (800afc0 <__gethex+0x2d4>)
 800acf6:	9002      	str	r0, [sp, #8]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	468b      	mov	fp, r1
 800acfc:	4618      	mov	r0, r3
 800acfe:	4690      	mov	r8, r2
 800ad00:	9303      	str	r3, [sp, #12]
 800ad02:	f7f5 fa25 	bl	8000150 <strlen>
 800ad06:	4682      	mov	sl, r0
 800ad08:	9b03      	ldr	r3, [sp, #12]
 800ad0a:	f8db 2000 	ldr.w	r2, [fp]
 800ad0e:	4403      	add	r3, r0
 800ad10:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ad14:	9306      	str	r3, [sp, #24]
 800ad16:	1c93      	adds	r3, r2, #2
 800ad18:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ad1c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ad20:	32fe      	adds	r2, #254	; 0xfe
 800ad22:	18d1      	adds	r1, r2, r3
 800ad24:	461f      	mov	r7, r3
 800ad26:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ad2a:	9101      	str	r1, [sp, #4]
 800ad2c:	2830      	cmp	r0, #48	; 0x30
 800ad2e:	d0f8      	beq.n	800ad22 <__gethex+0x36>
 800ad30:	f7ff ffc6 	bl	800acc0 <__hexdig_fun>
 800ad34:	4604      	mov	r4, r0
 800ad36:	2800      	cmp	r0, #0
 800ad38:	d13a      	bne.n	800adb0 <__gethex+0xc4>
 800ad3a:	4652      	mov	r2, sl
 800ad3c:	4638      	mov	r0, r7
 800ad3e:	9903      	ldr	r1, [sp, #12]
 800ad40:	f001 fc1b 	bl	800c57a <strncmp>
 800ad44:	4605      	mov	r5, r0
 800ad46:	2800      	cmp	r0, #0
 800ad48:	d166      	bne.n	800ae18 <__gethex+0x12c>
 800ad4a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ad4e:	eb07 060a 	add.w	r6, r7, sl
 800ad52:	f7ff ffb5 	bl	800acc0 <__hexdig_fun>
 800ad56:	2800      	cmp	r0, #0
 800ad58:	d060      	beq.n	800ae1c <__gethex+0x130>
 800ad5a:	4633      	mov	r3, r6
 800ad5c:	7818      	ldrb	r0, [r3, #0]
 800ad5e:	461f      	mov	r7, r3
 800ad60:	2830      	cmp	r0, #48	; 0x30
 800ad62:	f103 0301 	add.w	r3, r3, #1
 800ad66:	d0f9      	beq.n	800ad5c <__gethex+0x70>
 800ad68:	f7ff ffaa 	bl	800acc0 <__hexdig_fun>
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	fab0 f480 	clz	r4, r0
 800ad72:	4635      	mov	r5, r6
 800ad74:	0964      	lsrs	r4, r4, #5
 800ad76:	9301      	str	r3, [sp, #4]
 800ad78:	463a      	mov	r2, r7
 800ad7a:	4616      	mov	r6, r2
 800ad7c:	7830      	ldrb	r0, [r6, #0]
 800ad7e:	3201      	adds	r2, #1
 800ad80:	f7ff ff9e 	bl	800acc0 <__hexdig_fun>
 800ad84:	2800      	cmp	r0, #0
 800ad86:	d1f8      	bne.n	800ad7a <__gethex+0x8e>
 800ad88:	4652      	mov	r2, sl
 800ad8a:	4630      	mov	r0, r6
 800ad8c:	9903      	ldr	r1, [sp, #12]
 800ad8e:	f001 fbf4 	bl	800c57a <strncmp>
 800ad92:	b980      	cbnz	r0, 800adb6 <__gethex+0xca>
 800ad94:	b94d      	cbnz	r5, 800adaa <__gethex+0xbe>
 800ad96:	eb06 050a 	add.w	r5, r6, sl
 800ad9a:	462a      	mov	r2, r5
 800ad9c:	4616      	mov	r6, r2
 800ad9e:	7830      	ldrb	r0, [r6, #0]
 800ada0:	3201      	adds	r2, #1
 800ada2:	f7ff ff8d 	bl	800acc0 <__hexdig_fun>
 800ada6:	2800      	cmp	r0, #0
 800ada8:	d1f8      	bne.n	800ad9c <__gethex+0xb0>
 800adaa:	1bad      	subs	r5, r5, r6
 800adac:	00ad      	lsls	r5, r5, #2
 800adae:	e004      	b.n	800adba <__gethex+0xce>
 800adb0:	2400      	movs	r4, #0
 800adb2:	4625      	mov	r5, r4
 800adb4:	e7e0      	b.n	800ad78 <__gethex+0x8c>
 800adb6:	2d00      	cmp	r5, #0
 800adb8:	d1f7      	bne.n	800adaa <__gethex+0xbe>
 800adba:	7833      	ldrb	r3, [r6, #0]
 800adbc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800adc0:	2b50      	cmp	r3, #80	; 0x50
 800adc2:	d139      	bne.n	800ae38 <__gethex+0x14c>
 800adc4:	7873      	ldrb	r3, [r6, #1]
 800adc6:	2b2b      	cmp	r3, #43	; 0x2b
 800adc8:	d02a      	beq.n	800ae20 <__gethex+0x134>
 800adca:	2b2d      	cmp	r3, #45	; 0x2d
 800adcc:	d02c      	beq.n	800ae28 <__gethex+0x13c>
 800adce:	f04f 0900 	mov.w	r9, #0
 800add2:	1c71      	adds	r1, r6, #1
 800add4:	7808      	ldrb	r0, [r1, #0]
 800add6:	f7ff ff73 	bl	800acc0 <__hexdig_fun>
 800adda:	1e43      	subs	r3, r0, #1
 800addc:	b2db      	uxtb	r3, r3
 800adde:	2b18      	cmp	r3, #24
 800ade0:	d82a      	bhi.n	800ae38 <__gethex+0x14c>
 800ade2:	f1a0 0210 	sub.w	r2, r0, #16
 800ade6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800adea:	f7ff ff69 	bl	800acc0 <__hexdig_fun>
 800adee:	1e43      	subs	r3, r0, #1
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	2b18      	cmp	r3, #24
 800adf4:	d91b      	bls.n	800ae2e <__gethex+0x142>
 800adf6:	f1b9 0f00 	cmp.w	r9, #0
 800adfa:	d000      	beq.n	800adfe <__gethex+0x112>
 800adfc:	4252      	negs	r2, r2
 800adfe:	4415      	add	r5, r2
 800ae00:	f8cb 1000 	str.w	r1, [fp]
 800ae04:	b1d4      	cbz	r4, 800ae3c <__gethex+0x150>
 800ae06:	9b01      	ldr	r3, [sp, #4]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	bf14      	ite	ne
 800ae0c:	2700      	movne	r7, #0
 800ae0e:	2706      	moveq	r7, #6
 800ae10:	4638      	mov	r0, r7
 800ae12:	b00b      	add	sp, #44	; 0x2c
 800ae14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae18:	463e      	mov	r6, r7
 800ae1a:	4625      	mov	r5, r4
 800ae1c:	2401      	movs	r4, #1
 800ae1e:	e7cc      	b.n	800adba <__gethex+0xce>
 800ae20:	f04f 0900 	mov.w	r9, #0
 800ae24:	1cb1      	adds	r1, r6, #2
 800ae26:	e7d5      	b.n	800add4 <__gethex+0xe8>
 800ae28:	f04f 0901 	mov.w	r9, #1
 800ae2c:	e7fa      	b.n	800ae24 <__gethex+0x138>
 800ae2e:	230a      	movs	r3, #10
 800ae30:	fb03 0202 	mla	r2, r3, r2, r0
 800ae34:	3a10      	subs	r2, #16
 800ae36:	e7d6      	b.n	800ade6 <__gethex+0xfa>
 800ae38:	4631      	mov	r1, r6
 800ae3a:	e7e1      	b.n	800ae00 <__gethex+0x114>
 800ae3c:	4621      	mov	r1, r4
 800ae3e:	1bf3      	subs	r3, r6, r7
 800ae40:	3b01      	subs	r3, #1
 800ae42:	2b07      	cmp	r3, #7
 800ae44:	dc0a      	bgt.n	800ae5c <__gethex+0x170>
 800ae46:	9802      	ldr	r0, [sp, #8]
 800ae48:	f000 fae2 	bl	800b410 <_Balloc>
 800ae4c:	4604      	mov	r4, r0
 800ae4e:	b940      	cbnz	r0, 800ae62 <__gethex+0x176>
 800ae50:	4602      	mov	r2, r0
 800ae52:	21de      	movs	r1, #222	; 0xde
 800ae54:	4b5b      	ldr	r3, [pc, #364]	; (800afc4 <__gethex+0x2d8>)
 800ae56:	485c      	ldr	r0, [pc, #368]	; (800afc8 <__gethex+0x2dc>)
 800ae58:	f001 fbc2 	bl	800c5e0 <__assert_func>
 800ae5c:	3101      	adds	r1, #1
 800ae5e:	105b      	asrs	r3, r3, #1
 800ae60:	e7ef      	b.n	800ae42 <__gethex+0x156>
 800ae62:	f04f 0b00 	mov.w	fp, #0
 800ae66:	f100 0914 	add.w	r9, r0, #20
 800ae6a:	f1ca 0301 	rsb	r3, sl, #1
 800ae6e:	f8cd 9010 	str.w	r9, [sp, #16]
 800ae72:	f8cd b004 	str.w	fp, [sp, #4]
 800ae76:	9308      	str	r3, [sp, #32]
 800ae78:	42b7      	cmp	r7, r6
 800ae7a:	d33f      	bcc.n	800aefc <__gethex+0x210>
 800ae7c:	9f04      	ldr	r7, [sp, #16]
 800ae7e:	9b01      	ldr	r3, [sp, #4]
 800ae80:	f847 3b04 	str.w	r3, [r7], #4
 800ae84:	eba7 0709 	sub.w	r7, r7, r9
 800ae88:	10bf      	asrs	r7, r7, #2
 800ae8a:	6127      	str	r7, [r4, #16]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f000 fbb1 	bl	800b5f4 <__hi0bits>
 800ae92:	017f      	lsls	r7, r7, #5
 800ae94:	f8d8 6000 	ldr.w	r6, [r8]
 800ae98:	1a3f      	subs	r7, r7, r0
 800ae9a:	42b7      	cmp	r7, r6
 800ae9c:	dd62      	ble.n	800af64 <__gethex+0x278>
 800ae9e:	1bbf      	subs	r7, r7, r6
 800aea0:	4639      	mov	r1, r7
 800aea2:	4620      	mov	r0, r4
 800aea4:	f000 ff4b 	bl	800bd3e <__any_on>
 800aea8:	4682      	mov	sl, r0
 800aeaa:	b1a8      	cbz	r0, 800aed8 <__gethex+0x1ec>
 800aeac:	f04f 0a01 	mov.w	sl, #1
 800aeb0:	1e7b      	subs	r3, r7, #1
 800aeb2:	1159      	asrs	r1, r3, #5
 800aeb4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800aeb8:	f003 021f 	and.w	r2, r3, #31
 800aebc:	fa0a f202 	lsl.w	r2, sl, r2
 800aec0:	420a      	tst	r2, r1
 800aec2:	d009      	beq.n	800aed8 <__gethex+0x1ec>
 800aec4:	4553      	cmp	r3, sl
 800aec6:	dd05      	ble.n	800aed4 <__gethex+0x1e8>
 800aec8:	4620      	mov	r0, r4
 800aeca:	1eb9      	subs	r1, r7, #2
 800aecc:	f000 ff37 	bl	800bd3e <__any_on>
 800aed0:	2800      	cmp	r0, #0
 800aed2:	d144      	bne.n	800af5e <__gethex+0x272>
 800aed4:	f04f 0a02 	mov.w	sl, #2
 800aed8:	4639      	mov	r1, r7
 800aeda:	4620      	mov	r0, r4
 800aedc:	f7ff fe9d 	bl	800ac1a <rshift>
 800aee0:	443d      	add	r5, r7
 800aee2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aee6:	42ab      	cmp	r3, r5
 800aee8:	da4a      	bge.n	800af80 <__gethex+0x294>
 800aeea:	4621      	mov	r1, r4
 800aeec:	9802      	ldr	r0, [sp, #8]
 800aeee:	f000 facf 	bl	800b490 <_Bfree>
 800aef2:	2300      	movs	r3, #0
 800aef4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aef6:	27a3      	movs	r7, #163	; 0xa3
 800aef8:	6013      	str	r3, [r2, #0]
 800aefa:	e789      	b.n	800ae10 <__gethex+0x124>
 800aefc:	1e73      	subs	r3, r6, #1
 800aefe:	9a06      	ldr	r2, [sp, #24]
 800af00:	9307      	str	r3, [sp, #28]
 800af02:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800af06:	4293      	cmp	r3, r2
 800af08:	d019      	beq.n	800af3e <__gethex+0x252>
 800af0a:	f1bb 0f20 	cmp.w	fp, #32
 800af0e:	d107      	bne.n	800af20 <__gethex+0x234>
 800af10:	9b04      	ldr	r3, [sp, #16]
 800af12:	9a01      	ldr	r2, [sp, #4]
 800af14:	f843 2b04 	str.w	r2, [r3], #4
 800af18:	9304      	str	r3, [sp, #16]
 800af1a:	2300      	movs	r3, #0
 800af1c:	469b      	mov	fp, r3
 800af1e:	9301      	str	r3, [sp, #4]
 800af20:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800af24:	f7ff fecc 	bl	800acc0 <__hexdig_fun>
 800af28:	9b01      	ldr	r3, [sp, #4]
 800af2a:	f000 000f 	and.w	r0, r0, #15
 800af2e:	fa00 f00b 	lsl.w	r0, r0, fp
 800af32:	4303      	orrs	r3, r0
 800af34:	9301      	str	r3, [sp, #4]
 800af36:	f10b 0b04 	add.w	fp, fp, #4
 800af3a:	9b07      	ldr	r3, [sp, #28]
 800af3c:	e00d      	b.n	800af5a <__gethex+0x26e>
 800af3e:	9a08      	ldr	r2, [sp, #32]
 800af40:	1e73      	subs	r3, r6, #1
 800af42:	4413      	add	r3, r2
 800af44:	42bb      	cmp	r3, r7
 800af46:	d3e0      	bcc.n	800af0a <__gethex+0x21e>
 800af48:	4618      	mov	r0, r3
 800af4a:	4652      	mov	r2, sl
 800af4c:	9903      	ldr	r1, [sp, #12]
 800af4e:	9309      	str	r3, [sp, #36]	; 0x24
 800af50:	f001 fb13 	bl	800c57a <strncmp>
 800af54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af56:	2800      	cmp	r0, #0
 800af58:	d1d7      	bne.n	800af0a <__gethex+0x21e>
 800af5a:	461e      	mov	r6, r3
 800af5c:	e78c      	b.n	800ae78 <__gethex+0x18c>
 800af5e:	f04f 0a03 	mov.w	sl, #3
 800af62:	e7b9      	b.n	800aed8 <__gethex+0x1ec>
 800af64:	da09      	bge.n	800af7a <__gethex+0x28e>
 800af66:	1bf7      	subs	r7, r6, r7
 800af68:	4621      	mov	r1, r4
 800af6a:	463a      	mov	r2, r7
 800af6c:	9802      	ldr	r0, [sp, #8]
 800af6e:	f000 fca7 	bl	800b8c0 <__lshift>
 800af72:	4604      	mov	r4, r0
 800af74:	1bed      	subs	r5, r5, r7
 800af76:	f100 0914 	add.w	r9, r0, #20
 800af7a:	f04f 0a00 	mov.w	sl, #0
 800af7e:	e7b0      	b.n	800aee2 <__gethex+0x1f6>
 800af80:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800af84:	42a8      	cmp	r0, r5
 800af86:	dd72      	ble.n	800b06e <__gethex+0x382>
 800af88:	1b45      	subs	r5, r0, r5
 800af8a:	42ae      	cmp	r6, r5
 800af8c:	dc35      	bgt.n	800affa <__gethex+0x30e>
 800af8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af92:	2b02      	cmp	r3, #2
 800af94:	d029      	beq.n	800afea <__gethex+0x2fe>
 800af96:	2b03      	cmp	r3, #3
 800af98:	d02b      	beq.n	800aff2 <__gethex+0x306>
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d11c      	bne.n	800afd8 <__gethex+0x2ec>
 800af9e:	42ae      	cmp	r6, r5
 800afa0:	d11a      	bne.n	800afd8 <__gethex+0x2ec>
 800afa2:	2e01      	cmp	r6, #1
 800afa4:	d112      	bne.n	800afcc <__gethex+0x2e0>
 800afa6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800afaa:	9a05      	ldr	r2, [sp, #20]
 800afac:	2762      	movs	r7, #98	; 0x62
 800afae:	6013      	str	r3, [r2, #0]
 800afb0:	2301      	movs	r3, #1
 800afb2:	6123      	str	r3, [r4, #16]
 800afb4:	f8c9 3000 	str.w	r3, [r9]
 800afb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800afba:	601c      	str	r4, [r3, #0]
 800afbc:	e728      	b.n	800ae10 <__gethex+0x124>
 800afbe:	bf00      	nop
 800afc0:	0800d634 	.word	0x0800d634
 800afc4:	0800d558 	.word	0x0800d558
 800afc8:	0800d5cc 	.word	0x0800d5cc
 800afcc:	4620      	mov	r0, r4
 800afce:	1e71      	subs	r1, r6, #1
 800afd0:	f000 feb5 	bl	800bd3e <__any_on>
 800afd4:	2800      	cmp	r0, #0
 800afd6:	d1e6      	bne.n	800afa6 <__gethex+0x2ba>
 800afd8:	4621      	mov	r1, r4
 800afda:	9802      	ldr	r0, [sp, #8]
 800afdc:	f000 fa58 	bl	800b490 <_Bfree>
 800afe0:	2300      	movs	r3, #0
 800afe2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800afe4:	2750      	movs	r7, #80	; 0x50
 800afe6:	6013      	str	r3, [r2, #0]
 800afe8:	e712      	b.n	800ae10 <__gethex+0x124>
 800afea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afec:	2b00      	cmp	r3, #0
 800afee:	d1f3      	bne.n	800afd8 <__gethex+0x2ec>
 800aff0:	e7d9      	b.n	800afa6 <__gethex+0x2ba>
 800aff2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d1d6      	bne.n	800afa6 <__gethex+0x2ba>
 800aff8:	e7ee      	b.n	800afd8 <__gethex+0x2ec>
 800affa:	1e6f      	subs	r7, r5, #1
 800affc:	f1ba 0f00 	cmp.w	sl, #0
 800b000:	d132      	bne.n	800b068 <__gethex+0x37c>
 800b002:	b127      	cbz	r7, 800b00e <__gethex+0x322>
 800b004:	4639      	mov	r1, r7
 800b006:	4620      	mov	r0, r4
 800b008:	f000 fe99 	bl	800bd3e <__any_on>
 800b00c:	4682      	mov	sl, r0
 800b00e:	2101      	movs	r1, #1
 800b010:	117b      	asrs	r3, r7, #5
 800b012:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b016:	f007 071f 	and.w	r7, r7, #31
 800b01a:	fa01 f707 	lsl.w	r7, r1, r7
 800b01e:	421f      	tst	r7, r3
 800b020:	f04f 0702 	mov.w	r7, #2
 800b024:	4629      	mov	r1, r5
 800b026:	4620      	mov	r0, r4
 800b028:	bf18      	it	ne
 800b02a:	f04a 0a02 	orrne.w	sl, sl, #2
 800b02e:	1b76      	subs	r6, r6, r5
 800b030:	f7ff fdf3 	bl	800ac1a <rshift>
 800b034:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b038:	f1ba 0f00 	cmp.w	sl, #0
 800b03c:	d048      	beq.n	800b0d0 <__gethex+0x3e4>
 800b03e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b042:	2b02      	cmp	r3, #2
 800b044:	d015      	beq.n	800b072 <__gethex+0x386>
 800b046:	2b03      	cmp	r3, #3
 800b048:	d017      	beq.n	800b07a <__gethex+0x38e>
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	d109      	bne.n	800b062 <__gethex+0x376>
 800b04e:	f01a 0f02 	tst.w	sl, #2
 800b052:	d006      	beq.n	800b062 <__gethex+0x376>
 800b054:	f8d9 0000 	ldr.w	r0, [r9]
 800b058:	ea4a 0a00 	orr.w	sl, sl, r0
 800b05c:	f01a 0f01 	tst.w	sl, #1
 800b060:	d10e      	bne.n	800b080 <__gethex+0x394>
 800b062:	f047 0710 	orr.w	r7, r7, #16
 800b066:	e033      	b.n	800b0d0 <__gethex+0x3e4>
 800b068:	f04f 0a01 	mov.w	sl, #1
 800b06c:	e7cf      	b.n	800b00e <__gethex+0x322>
 800b06e:	2701      	movs	r7, #1
 800b070:	e7e2      	b.n	800b038 <__gethex+0x34c>
 800b072:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b074:	f1c3 0301 	rsb	r3, r3, #1
 800b078:	9315      	str	r3, [sp, #84]	; 0x54
 800b07a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d0f0      	beq.n	800b062 <__gethex+0x376>
 800b080:	f04f 0c00 	mov.w	ip, #0
 800b084:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b088:	f104 0314 	add.w	r3, r4, #20
 800b08c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b090:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b094:	4618      	mov	r0, r3
 800b096:	f853 2b04 	ldr.w	r2, [r3], #4
 800b09a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b09e:	d01c      	beq.n	800b0da <__gethex+0x3ee>
 800b0a0:	3201      	adds	r2, #1
 800b0a2:	6002      	str	r2, [r0, #0]
 800b0a4:	2f02      	cmp	r7, #2
 800b0a6:	f104 0314 	add.w	r3, r4, #20
 800b0aa:	d13d      	bne.n	800b128 <__gethex+0x43c>
 800b0ac:	f8d8 2000 	ldr.w	r2, [r8]
 800b0b0:	3a01      	subs	r2, #1
 800b0b2:	42b2      	cmp	r2, r6
 800b0b4:	d10a      	bne.n	800b0cc <__gethex+0x3e0>
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	1171      	asrs	r1, r6, #5
 800b0ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b0be:	f006 061f 	and.w	r6, r6, #31
 800b0c2:	fa02 f606 	lsl.w	r6, r2, r6
 800b0c6:	421e      	tst	r6, r3
 800b0c8:	bf18      	it	ne
 800b0ca:	4617      	movne	r7, r2
 800b0cc:	f047 0720 	orr.w	r7, r7, #32
 800b0d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b0d2:	601c      	str	r4, [r3, #0]
 800b0d4:	9b05      	ldr	r3, [sp, #20]
 800b0d6:	601d      	str	r5, [r3, #0]
 800b0d8:	e69a      	b.n	800ae10 <__gethex+0x124>
 800b0da:	4299      	cmp	r1, r3
 800b0dc:	f843 cc04 	str.w	ip, [r3, #-4]
 800b0e0:	d8d8      	bhi.n	800b094 <__gethex+0x3a8>
 800b0e2:	68a3      	ldr	r3, [r4, #8]
 800b0e4:	459b      	cmp	fp, r3
 800b0e6:	db17      	blt.n	800b118 <__gethex+0x42c>
 800b0e8:	6861      	ldr	r1, [r4, #4]
 800b0ea:	9802      	ldr	r0, [sp, #8]
 800b0ec:	3101      	adds	r1, #1
 800b0ee:	f000 f98f 	bl	800b410 <_Balloc>
 800b0f2:	4681      	mov	r9, r0
 800b0f4:	b918      	cbnz	r0, 800b0fe <__gethex+0x412>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	2184      	movs	r1, #132	; 0x84
 800b0fa:	4b19      	ldr	r3, [pc, #100]	; (800b160 <__gethex+0x474>)
 800b0fc:	e6ab      	b.n	800ae56 <__gethex+0x16a>
 800b0fe:	6922      	ldr	r2, [r4, #16]
 800b100:	f104 010c 	add.w	r1, r4, #12
 800b104:	3202      	adds	r2, #2
 800b106:	0092      	lsls	r2, r2, #2
 800b108:	300c      	adds	r0, #12
 800b10a:	f7fc fed5 	bl	8007eb8 <memcpy>
 800b10e:	4621      	mov	r1, r4
 800b110:	9802      	ldr	r0, [sp, #8]
 800b112:	f000 f9bd 	bl	800b490 <_Bfree>
 800b116:	464c      	mov	r4, r9
 800b118:	6923      	ldr	r3, [r4, #16]
 800b11a:	1c5a      	adds	r2, r3, #1
 800b11c:	6122      	str	r2, [r4, #16]
 800b11e:	2201      	movs	r2, #1
 800b120:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b124:	615a      	str	r2, [r3, #20]
 800b126:	e7bd      	b.n	800b0a4 <__gethex+0x3b8>
 800b128:	6922      	ldr	r2, [r4, #16]
 800b12a:	455a      	cmp	r2, fp
 800b12c:	dd0b      	ble.n	800b146 <__gethex+0x45a>
 800b12e:	2101      	movs	r1, #1
 800b130:	4620      	mov	r0, r4
 800b132:	f7ff fd72 	bl	800ac1a <rshift>
 800b136:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b13a:	3501      	adds	r5, #1
 800b13c:	42ab      	cmp	r3, r5
 800b13e:	f6ff aed4 	blt.w	800aeea <__gethex+0x1fe>
 800b142:	2701      	movs	r7, #1
 800b144:	e7c2      	b.n	800b0cc <__gethex+0x3e0>
 800b146:	f016 061f 	ands.w	r6, r6, #31
 800b14a:	d0fa      	beq.n	800b142 <__gethex+0x456>
 800b14c:	4453      	add	r3, sl
 800b14e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b152:	f000 fa4f 	bl	800b5f4 <__hi0bits>
 800b156:	f1c6 0620 	rsb	r6, r6, #32
 800b15a:	42b0      	cmp	r0, r6
 800b15c:	dbe7      	blt.n	800b12e <__gethex+0x442>
 800b15e:	e7f0      	b.n	800b142 <__gethex+0x456>
 800b160:	0800d558 	.word	0x0800d558

0800b164 <L_shift>:
 800b164:	f1c2 0208 	rsb	r2, r2, #8
 800b168:	0092      	lsls	r2, r2, #2
 800b16a:	b570      	push	{r4, r5, r6, lr}
 800b16c:	f1c2 0620 	rsb	r6, r2, #32
 800b170:	6843      	ldr	r3, [r0, #4]
 800b172:	6804      	ldr	r4, [r0, #0]
 800b174:	fa03 f506 	lsl.w	r5, r3, r6
 800b178:	432c      	orrs	r4, r5
 800b17a:	40d3      	lsrs	r3, r2
 800b17c:	6004      	str	r4, [r0, #0]
 800b17e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b182:	4288      	cmp	r0, r1
 800b184:	d3f4      	bcc.n	800b170 <L_shift+0xc>
 800b186:	bd70      	pop	{r4, r5, r6, pc}

0800b188 <__match>:
 800b188:	b530      	push	{r4, r5, lr}
 800b18a:	6803      	ldr	r3, [r0, #0]
 800b18c:	3301      	adds	r3, #1
 800b18e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b192:	b914      	cbnz	r4, 800b19a <__match+0x12>
 800b194:	6003      	str	r3, [r0, #0]
 800b196:	2001      	movs	r0, #1
 800b198:	bd30      	pop	{r4, r5, pc}
 800b19a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b19e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b1a2:	2d19      	cmp	r5, #25
 800b1a4:	bf98      	it	ls
 800b1a6:	3220      	addls	r2, #32
 800b1a8:	42a2      	cmp	r2, r4
 800b1aa:	d0f0      	beq.n	800b18e <__match+0x6>
 800b1ac:	2000      	movs	r0, #0
 800b1ae:	e7f3      	b.n	800b198 <__match+0x10>

0800b1b0 <__hexnan>:
 800b1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1b4:	2500      	movs	r5, #0
 800b1b6:	680b      	ldr	r3, [r1, #0]
 800b1b8:	4682      	mov	sl, r0
 800b1ba:	115e      	asrs	r6, r3, #5
 800b1bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b1c0:	f013 031f 	ands.w	r3, r3, #31
 800b1c4:	bf18      	it	ne
 800b1c6:	3604      	addne	r6, #4
 800b1c8:	1f37      	subs	r7, r6, #4
 800b1ca:	46b9      	mov	r9, r7
 800b1cc:	463c      	mov	r4, r7
 800b1ce:	46ab      	mov	fp, r5
 800b1d0:	b087      	sub	sp, #28
 800b1d2:	4690      	mov	r8, r2
 800b1d4:	6802      	ldr	r2, [r0, #0]
 800b1d6:	9301      	str	r3, [sp, #4]
 800b1d8:	f846 5c04 	str.w	r5, [r6, #-4]
 800b1dc:	9502      	str	r5, [sp, #8]
 800b1de:	7851      	ldrb	r1, [r2, #1]
 800b1e0:	1c53      	adds	r3, r2, #1
 800b1e2:	9303      	str	r3, [sp, #12]
 800b1e4:	b341      	cbz	r1, 800b238 <__hexnan+0x88>
 800b1e6:	4608      	mov	r0, r1
 800b1e8:	9205      	str	r2, [sp, #20]
 800b1ea:	9104      	str	r1, [sp, #16]
 800b1ec:	f7ff fd68 	bl	800acc0 <__hexdig_fun>
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	d14f      	bne.n	800b294 <__hexnan+0xe4>
 800b1f4:	9904      	ldr	r1, [sp, #16]
 800b1f6:	9a05      	ldr	r2, [sp, #20]
 800b1f8:	2920      	cmp	r1, #32
 800b1fa:	d818      	bhi.n	800b22e <__hexnan+0x7e>
 800b1fc:	9b02      	ldr	r3, [sp, #8]
 800b1fe:	459b      	cmp	fp, r3
 800b200:	dd13      	ble.n	800b22a <__hexnan+0x7a>
 800b202:	454c      	cmp	r4, r9
 800b204:	d206      	bcs.n	800b214 <__hexnan+0x64>
 800b206:	2d07      	cmp	r5, #7
 800b208:	dc04      	bgt.n	800b214 <__hexnan+0x64>
 800b20a:	462a      	mov	r2, r5
 800b20c:	4649      	mov	r1, r9
 800b20e:	4620      	mov	r0, r4
 800b210:	f7ff ffa8 	bl	800b164 <L_shift>
 800b214:	4544      	cmp	r4, r8
 800b216:	d950      	bls.n	800b2ba <__hexnan+0x10a>
 800b218:	2300      	movs	r3, #0
 800b21a:	f1a4 0904 	sub.w	r9, r4, #4
 800b21e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b222:	461d      	mov	r5, r3
 800b224:	464c      	mov	r4, r9
 800b226:	f8cd b008 	str.w	fp, [sp, #8]
 800b22a:	9a03      	ldr	r2, [sp, #12]
 800b22c:	e7d7      	b.n	800b1de <__hexnan+0x2e>
 800b22e:	2929      	cmp	r1, #41	; 0x29
 800b230:	d156      	bne.n	800b2e0 <__hexnan+0x130>
 800b232:	3202      	adds	r2, #2
 800b234:	f8ca 2000 	str.w	r2, [sl]
 800b238:	f1bb 0f00 	cmp.w	fp, #0
 800b23c:	d050      	beq.n	800b2e0 <__hexnan+0x130>
 800b23e:	454c      	cmp	r4, r9
 800b240:	d206      	bcs.n	800b250 <__hexnan+0xa0>
 800b242:	2d07      	cmp	r5, #7
 800b244:	dc04      	bgt.n	800b250 <__hexnan+0xa0>
 800b246:	462a      	mov	r2, r5
 800b248:	4649      	mov	r1, r9
 800b24a:	4620      	mov	r0, r4
 800b24c:	f7ff ff8a 	bl	800b164 <L_shift>
 800b250:	4544      	cmp	r4, r8
 800b252:	d934      	bls.n	800b2be <__hexnan+0x10e>
 800b254:	4623      	mov	r3, r4
 800b256:	f1a8 0204 	sub.w	r2, r8, #4
 800b25a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b25e:	429f      	cmp	r7, r3
 800b260:	f842 1f04 	str.w	r1, [r2, #4]!
 800b264:	d2f9      	bcs.n	800b25a <__hexnan+0xaa>
 800b266:	1b3b      	subs	r3, r7, r4
 800b268:	f023 0303 	bic.w	r3, r3, #3
 800b26c:	3304      	adds	r3, #4
 800b26e:	3401      	adds	r4, #1
 800b270:	3e03      	subs	r6, #3
 800b272:	42b4      	cmp	r4, r6
 800b274:	bf88      	it	hi
 800b276:	2304      	movhi	r3, #4
 800b278:	2200      	movs	r2, #0
 800b27a:	4443      	add	r3, r8
 800b27c:	f843 2b04 	str.w	r2, [r3], #4
 800b280:	429f      	cmp	r7, r3
 800b282:	d2fb      	bcs.n	800b27c <__hexnan+0xcc>
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	b91b      	cbnz	r3, 800b290 <__hexnan+0xe0>
 800b288:	4547      	cmp	r7, r8
 800b28a:	d127      	bne.n	800b2dc <__hexnan+0x12c>
 800b28c:	2301      	movs	r3, #1
 800b28e:	603b      	str	r3, [r7, #0]
 800b290:	2005      	movs	r0, #5
 800b292:	e026      	b.n	800b2e2 <__hexnan+0x132>
 800b294:	3501      	adds	r5, #1
 800b296:	2d08      	cmp	r5, #8
 800b298:	f10b 0b01 	add.w	fp, fp, #1
 800b29c:	dd06      	ble.n	800b2ac <__hexnan+0xfc>
 800b29e:	4544      	cmp	r4, r8
 800b2a0:	d9c3      	bls.n	800b22a <__hexnan+0x7a>
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	2501      	movs	r5, #1
 800b2a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b2aa:	3c04      	subs	r4, #4
 800b2ac:	6822      	ldr	r2, [r4, #0]
 800b2ae:	f000 000f 	and.w	r0, r0, #15
 800b2b2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b2b6:	6022      	str	r2, [r4, #0]
 800b2b8:	e7b7      	b.n	800b22a <__hexnan+0x7a>
 800b2ba:	2508      	movs	r5, #8
 800b2bc:	e7b5      	b.n	800b22a <__hexnan+0x7a>
 800b2be:	9b01      	ldr	r3, [sp, #4]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d0df      	beq.n	800b284 <__hexnan+0xd4>
 800b2c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b2c8:	f1c3 0320 	rsb	r3, r3, #32
 800b2cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b2d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b2d4:	401a      	ands	r2, r3
 800b2d6:	f846 2c04 	str.w	r2, [r6, #-4]
 800b2da:	e7d3      	b.n	800b284 <__hexnan+0xd4>
 800b2dc:	3f04      	subs	r7, #4
 800b2de:	e7d1      	b.n	800b284 <__hexnan+0xd4>
 800b2e0:	2004      	movs	r0, #4
 800b2e2:	b007      	add	sp, #28
 800b2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b2e8 <_localeconv_r>:
 800b2e8:	4800      	ldr	r0, [pc, #0]	; (800b2ec <_localeconv_r+0x4>)
 800b2ea:	4770      	bx	lr
 800b2ec:	20000184 	.word	0x20000184

0800b2f0 <__retarget_lock_init_recursive>:
 800b2f0:	4770      	bx	lr

0800b2f2 <__retarget_lock_acquire_recursive>:
 800b2f2:	4770      	bx	lr

0800b2f4 <__retarget_lock_release_recursive>:
 800b2f4:	4770      	bx	lr

0800b2f6 <__swhatbuf_r>:
 800b2f6:	b570      	push	{r4, r5, r6, lr}
 800b2f8:	460e      	mov	r6, r1
 800b2fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2fe:	4614      	mov	r4, r2
 800b300:	2900      	cmp	r1, #0
 800b302:	461d      	mov	r5, r3
 800b304:	b096      	sub	sp, #88	; 0x58
 800b306:	da08      	bge.n	800b31a <__swhatbuf_r+0x24>
 800b308:	2200      	movs	r2, #0
 800b30a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b30e:	602a      	str	r2, [r5, #0]
 800b310:	061a      	lsls	r2, r3, #24
 800b312:	d410      	bmi.n	800b336 <__swhatbuf_r+0x40>
 800b314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b318:	e00e      	b.n	800b338 <__swhatbuf_r+0x42>
 800b31a:	466a      	mov	r2, sp
 800b31c:	f001 f9a0 	bl	800c660 <_fstat_r>
 800b320:	2800      	cmp	r0, #0
 800b322:	dbf1      	blt.n	800b308 <__swhatbuf_r+0x12>
 800b324:	9a01      	ldr	r2, [sp, #4]
 800b326:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b32a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b32e:	425a      	negs	r2, r3
 800b330:	415a      	adcs	r2, r3
 800b332:	602a      	str	r2, [r5, #0]
 800b334:	e7ee      	b.n	800b314 <__swhatbuf_r+0x1e>
 800b336:	2340      	movs	r3, #64	; 0x40
 800b338:	2000      	movs	r0, #0
 800b33a:	6023      	str	r3, [r4, #0]
 800b33c:	b016      	add	sp, #88	; 0x58
 800b33e:	bd70      	pop	{r4, r5, r6, pc}

0800b340 <__smakebuf_r>:
 800b340:	898b      	ldrh	r3, [r1, #12]
 800b342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b344:	079d      	lsls	r5, r3, #30
 800b346:	4606      	mov	r6, r0
 800b348:	460c      	mov	r4, r1
 800b34a:	d507      	bpl.n	800b35c <__smakebuf_r+0x1c>
 800b34c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b350:	6023      	str	r3, [r4, #0]
 800b352:	6123      	str	r3, [r4, #16]
 800b354:	2301      	movs	r3, #1
 800b356:	6163      	str	r3, [r4, #20]
 800b358:	b002      	add	sp, #8
 800b35a:	bd70      	pop	{r4, r5, r6, pc}
 800b35c:	466a      	mov	r2, sp
 800b35e:	ab01      	add	r3, sp, #4
 800b360:	f7ff ffc9 	bl	800b2f6 <__swhatbuf_r>
 800b364:	9900      	ldr	r1, [sp, #0]
 800b366:	4605      	mov	r5, r0
 800b368:	4630      	mov	r0, r6
 800b36a:	f000 fd85 	bl	800be78 <_malloc_r>
 800b36e:	b948      	cbnz	r0, 800b384 <__smakebuf_r+0x44>
 800b370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b374:	059a      	lsls	r2, r3, #22
 800b376:	d4ef      	bmi.n	800b358 <__smakebuf_r+0x18>
 800b378:	f023 0303 	bic.w	r3, r3, #3
 800b37c:	f043 0302 	orr.w	r3, r3, #2
 800b380:	81a3      	strh	r3, [r4, #12]
 800b382:	e7e3      	b.n	800b34c <__smakebuf_r+0xc>
 800b384:	4b0d      	ldr	r3, [pc, #52]	; (800b3bc <__smakebuf_r+0x7c>)
 800b386:	62b3      	str	r3, [r6, #40]	; 0x28
 800b388:	89a3      	ldrh	r3, [r4, #12]
 800b38a:	6020      	str	r0, [r4, #0]
 800b38c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b390:	81a3      	strh	r3, [r4, #12]
 800b392:	9b00      	ldr	r3, [sp, #0]
 800b394:	6120      	str	r0, [r4, #16]
 800b396:	6163      	str	r3, [r4, #20]
 800b398:	9b01      	ldr	r3, [sp, #4]
 800b39a:	b15b      	cbz	r3, 800b3b4 <__smakebuf_r+0x74>
 800b39c:	4630      	mov	r0, r6
 800b39e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3a2:	f001 f96f 	bl	800c684 <_isatty_r>
 800b3a6:	b128      	cbz	r0, 800b3b4 <__smakebuf_r+0x74>
 800b3a8:	89a3      	ldrh	r3, [r4, #12]
 800b3aa:	f023 0303 	bic.w	r3, r3, #3
 800b3ae:	f043 0301 	orr.w	r3, r3, #1
 800b3b2:	81a3      	strh	r3, [r4, #12]
 800b3b4:	89a0      	ldrh	r0, [r4, #12]
 800b3b6:	4305      	orrs	r5, r0
 800b3b8:	81a5      	strh	r5, [r4, #12]
 800b3ba:	e7cd      	b.n	800b358 <__smakebuf_r+0x18>
 800b3bc:	0800aa79 	.word	0x0800aa79

0800b3c0 <malloc>:
 800b3c0:	4b02      	ldr	r3, [pc, #8]	; (800b3cc <malloc+0xc>)
 800b3c2:	4601      	mov	r1, r0
 800b3c4:	6818      	ldr	r0, [r3, #0]
 800b3c6:	f000 bd57 	b.w	800be78 <_malloc_r>
 800b3ca:	bf00      	nop
 800b3cc:	2000002c 	.word	0x2000002c

0800b3d0 <__ascii_mbtowc>:
 800b3d0:	b082      	sub	sp, #8
 800b3d2:	b901      	cbnz	r1, 800b3d6 <__ascii_mbtowc+0x6>
 800b3d4:	a901      	add	r1, sp, #4
 800b3d6:	b142      	cbz	r2, 800b3ea <__ascii_mbtowc+0x1a>
 800b3d8:	b14b      	cbz	r3, 800b3ee <__ascii_mbtowc+0x1e>
 800b3da:	7813      	ldrb	r3, [r2, #0]
 800b3dc:	600b      	str	r3, [r1, #0]
 800b3de:	7812      	ldrb	r2, [r2, #0]
 800b3e0:	1e10      	subs	r0, r2, #0
 800b3e2:	bf18      	it	ne
 800b3e4:	2001      	movne	r0, #1
 800b3e6:	b002      	add	sp, #8
 800b3e8:	4770      	bx	lr
 800b3ea:	4610      	mov	r0, r2
 800b3ec:	e7fb      	b.n	800b3e6 <__ascii_mbtowc+0x16>
 800b3ee:	f06f 0001 	mvn.w	r0, #1
 800b3f2:	e7f8      	b.n	800b3e6 <__ascii_mbtowc+0x16>

0800b3f4 <memchr>:
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	b510      	push	{r4, lr}
 800b3f8:	b2c9      	uxtb	r1, r1
 800b3fa:	4402      	add	r2, r0
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	4618      	mov	r0, r3
 800b400:	d101      	bne.n	800b406 <memchr+0x12>
 800b402:	2000      	movs	r0, #0
 800b404:	e003      	b.n	800b40e <memchr+0x1a>
 800b406:	7804      	ldrb	r4, [r0, #0]
 800b408:	3301      	adds	r3, #1
 800b40a:	428c      	cmp	r4, r1
 800b40c:	d1f6      	bne.n	800b3fc <memchr+0x8>
 800b40e:	bd10      	pop	{r4, pc}

0800b410 <_Balloc>:
 800b410:	b570      	push	{r4, r5, r6, lr}
 800b412:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b414:	4604      	mov	r4, r0
 800b416:	460d      	mov	r5, r1
 800b418:	b976      	cbnz	r6, 800b438 <_Balloc+0x28>
 800b41a:	2010      	movs	r0, #16
 800b41c:	f7ff ffd0 	bl	800b3c0 <malloc>
 800b420:	4602      	mov	r2, r0
 800b422:	6260      	str	r0, [r4, #36]	; 0x24
 800b424:	b920      	cbnz	r0, 800b430 <_Balloc+0x20>
 800b426:	2166      	movs	r1, #102	; 0x66
 800b428:	4b17      	ldr	r3, [pc, #92]	; (800b488 <_Balloc+0x78>)
 800b42a:	4818      	ldr	r0, [pc, #96]	; (800b48c <_Balloc+0x7c>)
 800b42c:	f001 f8d8 	bl	800c5e0 <__assert_func>
 800b430:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b434:	6006      	str	r6, [r0, #0]
 800b436:	60c6      	str	r6, [r0, #12]
 800b438:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b43a:	68f3      	ldr	r3, [r6, #12]
 800b43c:	b183      	cbz	r3, 800b460 <_Balloc+0x50>
 800b43e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b440:	68db      	ldr	r3, [r3, #12]
 800b442:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b446:	b9b8      	cbnz	r0, 800b478 <_Balloc+0x68>
 800b448:	2101      	movs	r1, #1
 800b44a:	fa01 f605 	lsl.w	r6, r1, r5
 800b44e:	1d72      	adds	r2, r6, #5
 800b450:	4620      	mov	r0, r4
 800b452:	0092      	lsls	r2, r2, #2
 800b454:	f000 fc94 	bl	800bd80 <_calloc_r>
 800b458:	b160      	cbz	r0, 800b474 <_Balloc+0x64>
 800b45a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b45e:	e00e      	b.n	800b47e <_Balloc+0x6e>
 800b460:	2221      	movs	r2, #33	; 0x21
 800b462:	2104      	movs	r1, #4
 800b464:	4620      	mov	r0, r4
 800b466:	f000 fc8b 	bl	800bd80 <_calloc_r>
 800b46a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b46c:	60f0      	str	r0, [r6, #12]
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d1e4      	bne.n	800b43e <_Balloc+0x2e>
 800b474:	2000      	movs	r0, #0
 800b476:	bd70      	pop	{r4, r5, r6, pc}
 800b478:	6802      	ldr	r2, [r0, #0]
 800b47a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b47e:	2300      	movs	r3, #0
 800b480:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b484:	e7f7      	b.n	800b476 <_Balloc+0x66>
 800b486:	bf00      	nop
 800b488:	0800d4e6 	.word	0x0800d4e6
 800b48c:	0800d648 	.word	0x0800d648

0800b490 <_Bfree>:
 800b490:	b570      	push	{r4, r5, r6, lr}
 800b492:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b494:	4605      	mov	r5, r0
 800b496:	460c      	mov	r4, r1
 800b498:	b976      	cbnz	r6, 800b4b8 <_Bfree+0x28>
 800b49a:	2010      	movs	r0, #16
 800b49c:	f7ff ff90 	bl	800b3c0 <malloc>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	6268      	str	r0, [r5, #36]	; 0x24
 800b4a4:	b920      	cbnz	r0, 800b4b0 <_Bfree+0x20>
 800b4a6:	218a      	movs	r1, #138	; 0x8a
 800b4a8:	4b08      	ldr	r3, [pc, #32]	; (800b4cc <_Bfree+0x3c>)
 800b4aa:	4809      	ldr	r0, [pc, #36]	; (800b4d0 <_Bfree+0x40>)
 800b4ac:	f001 f898 	bl	800c5e0 <__assert_func>
 800b4b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4b4:	6006      	str	r6, [r0, #0]
 800b4b6:	60c6      	str	r6, [r0, #12]
 800b4b8:	b13c      	cbz	r4, 800b4ca <_Bfree+0x3a>
 800b4ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b4bc:	6862      	ldr	r2, [r4, #4]
 800b4be:	68db      	ldr	r3, [r3, #12]
 800b4c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b4c4:	6021      	str	r1, [r4, #0]
 800b4c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b4ca:	bd70      	pop	{r4, r5, r6, pc}
 800b4cc:	0800d4e6 	.word	0x0800d4e6
 800b4d0:	0800d648 	.word	0x0800d648

0800b4d4 <__multadd>:
 800b4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4d8:	4607      	mov	r7, r0
 800b4da:	460c      	mov	r4, r1
 800b4dc:	461e      	mov	r6, r3
 800b4de:	2000      	movs	r0, #0
 800b4e0:	690d      	ldr	r5, [r1, #16]
 800b4e2:	f101 0c14 	add.w	ip, r1, #20
 800b4e6:	f8dc 3000 	ldr.w	r3, [ip]
 800b4ea:	3001      	adds	r0, #1
 800b4ec:	b299      	uxth	r1, r3
 800b4ee:	fb02 6101 	mla	r1, r2, r1, r6
 800b4f2:	0c1e      	lsrs	r6, r3, #16
 800b4f4:	0c0b      	lsrs	r3, r1, #16
 800b4f6:	fb02 3306 	mla	r3, r2, r6, r3
 800b4fa:	b289      	uxth	r1, r1
 800b4fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b500:	4285      	cmp	r5, r0
 800b502:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b506:	f84c 1b04 	str.w	r1, [ip], #4
 800b50a:	dcec      	bgt.n	800b4e6 <__multadd+0x12>
 800b50c:	b30e      	cbz	r6, 800b552 <__multadd+0x7e>
 800b50e:	68a3      	ldr	r3, [r4, #8]
 800b510:	42ab      	cmp	r3, r5
 800b512:	dc19      	bgt.n	800b548 <__multadd+0x74>
 800b514:	6861      	ldr	r1, [r4, #4]
 800b516:	4638      	mov	r0, r7
 800b518:	3101      	adds	r1, #1
 800b51a:	f7ff ff79 	bl	800b410 <_Balloc>
 800b51e:	4680      	mov	r8, r0
 800b520:	b928      	cbnz	r0, 800b52e <__multadd+0x5a>
 800b522:	4602      	mov	r2, r0
 800b524:	21b5      	movs	r1, #181	; 0xb5
 800b526:	4b0c      	ldr	r3, [pc, #48]	; (800b558 <__multadd+0x84>)
 800b528:	480c      	ldr	r0, [pc, #48]	; (800b55c <__multadd+0x88>)
 800b52a:	f001 f859 	bl	800c5e0 <__assert_func>
 800b52e:	6922      	ldr	r2, [r4, #16]
 800b530:	f104 010c 	add.w	r1, r4, #12
 800b534:	3202      	adds	r2, #2
 800b536:	0092      	lsls	r2, r2, #2
 800b538:	300c      	adds	r0, #12
 800b53a:	f7fc fcbd 	bl	8007eb8 <memcpy>
 800b53e:	4621      	mov	r1, r4
 800b540:	4638      	mov	r0, r7
 800b542:	f7ff ffa5 	bl	800b490 <_Bfree>
 800b546:	4644      	mov	r4, r8
 800b548:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b54c:	3501      	adds	r5, #1
 800b54e:	615e      	str	r6, [r3, #20]
 800b550:	6125      	str	r5, [r4, #16]
 800b552:	4620      	mov	r0, r4
 800b554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b558:	0800d558 	.word	0x0800d558
 800b55c:	0800d648 	.word	0x0800d648

0800b560 <__s2b>:
 800b560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b564:	4615      	mov	r5, r2
 800b566:	2209      	movs	r2, #9
 800b568:	461f      	mov	r7, r3
 800b56a:	3308      	adds	r3, #8
 800b56c:	460c      	mov	r4, r1
 800b56e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b572:	4606      	mov	r6, r0
 800b574:	2201      	movs	r2, #1
 800b576:	2100      	movs	r1, #0
 800b578:	429a      	cmp	r2, r3
 800b57a:	db09      	blt.n	800b590 <__s2b+0x30>
 800b57c:	4630      	mov	r0, r6
 800b57e:	f7ff ff47 	bl	800b410 <_Balloc>
 800b582:	b940      	cbnz	r0, 800b596 <__s2b+0x36>
 800b584:	4602      	mov	r2, r0
 800b586:	21ce      	movs	r1, #206	; 0xce
 800b588:	4b18      	ldr	r3, [pc, #96]	; (800b5ec <__s2b+0x8c>)
 800b58a:	4819      	ldr	r0, [pc, #100]	; (800b5f0 <__s2b+0x90>)
 800b58c:	f001 f828 	bl	800c5e0 <__assert_func>
 800b590:	0052      	lsls	r2, r2, #1
 800b592:	3101      	adds	r1, #1
 800b594:	e7f0      	b.n	800b578 <__s2b+0x18>
 800b596:	9b08      	ldr	r3, [sp, #32]
 800b598:	2d09      	cmp	r5, #9
 800b59a:	6143      	str	r3, [r0, #20]
 800b59c:	f04f 0301 	mov.w	r3, #1
 800b5a0:	6103      	str	r3, [r0, #16]
 800b5a2:	dd16      	ble.n	800b5d2 <__s2b+0x72>
 800b5a4:	f104 0909 	add.w	r9, r4, #9
 800b5a8:	46c8      	mov	r8, r9
 800b5aa:	442c      	add	r4, r5
 800b5ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b5b0:	4601      	mov	r1, r0
 800b5b2:	220a      	movs	r2, #10
 800b5b4:	4630      	mov	r0, r6
 800b5b6:	3b30      	subs	r3, #48	; 0x30
 800b5b8:	f7ff ff8c 	bl	800b4d4 <__multadd>
 800b5bc:	45a0      	cmp	r8, r4
 800b5be:	d1f5      	bne.n	800b5ac <__s2b+0x4c>
 800b5c0:	f1a5 0408 	sub.w	r4, r5, #8
 800b5c4:	444c      	add	r4, r9
 800b5c6:	1b2d      	subs	r5, r5, r4
 800b5c8:	1963      	adds	r3, r4, r5
 800b5ca:	42bb      	cmp	r3, r7
 800b5cc:	db04      	blt.n	800b5d8 <__s2b+0x78>
 800b5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5d2:	2509      	movs	r5, #9
 800b5d4:	340a      	adds	r4, #10
 800b5d6:	e7f6      	b.n	800b5c6 <__s2b+0x66>
 800b5d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b5dc:	4601      	mov	r1, r0
 800b5de:	220a      	movs	r2, #10
 800b5e0:	4630      	mov	r0, r6
 800b5e2:	3b30      	subs	r3, #48	; 0x30
 800b5e4:	f7ff ff76 	bl	800b4d4 <__multadd>
 800b5e8:	e7ee      	b.n	800b5c8 <__s2b+0x68>
 800b5ea:	bf00      	nop
 800b5ec:	0800d558 	.word	0x0800d558
 800b5f0:	0800d648 	.word	0x0800d648

0800b5f4 <__hi0bits>:
 800b5f4:	0c02      	lsrs	r2, r0, #16
 800b5f6:	0412      	lsls	r2, r2, #16
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	b9ca      	cbnz	r2, 800b630 <__hi0bits+0x3c>
 800b5fc:	0403      	lsls	r3, r0, #16
 800b5fe:	2010      	movs	r0, #16
 800b600:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b604:	bf04      	itt	eq
 800b606:	021b      	lsleq	r3, r3, #8
 800b608:	3008      	addeq	r0, #8
 800b60a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b60e:	bf04      	itt	eq
 800b610:	011b      	lsleq	r3, r3, #4
 800b612:	3004      	addeq	r0, #4
 800b614:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b618:	bf04      	itt	eq
 800b61a:	009b      	lsleq	r3, r3, #2
 800b61c:	3002      	addeq	r0, #2
 800b61e:	2b00      	cmp	r3, #0
 800b620:	db05      	blt.n	800b62e <__hi0bits+0x3a>
 800b622:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b626:	f100 0001 	add.w	r0, r0, #1
 800b62a:	bf08      	it	eq
 800b62c:	2020      	moveq	r0, #32
 800b62e:	4770      	bx	lr
 800b630:	2000      	movs	r0, #0
 800b632:	e7e5      	b.n	800b600 <__hi0bits+0xc>

0800b634 <__lo0bits>:
 800b634:	6803      	ldr	r3, [r0, #0]
 800b636:	4602      	mov	r2, r0
 800b638:	f013 0007 	ands.w	r0, r3, #7
 800b63c:	d00b      	beq.n	800b656 <__lo0bits+0x22>
 800b63e:	07d9      	lsls	r1, r3, #31
 800b640:	d421      	bmi.n	800b686 <__lo0bits+0x52>
 800b642:	0798      	lsls	r0, r3, #30
 800b644:	bf49      	itett	mi
 800b646:	085b      	lsrmi	r3, r3, #1
 800b648:	089b      	lsrpl	r3, r3, #2
 800b64a:	2001      	movmi	r0, #1
 800b64c:	6013      	strmi	r3, [r2, #0]
 800b64e:	bf5c      	itt	pl
 800b650:	2002      	movpl	r0, #2
 800b652:	6013      	strpl	r3, [r2, #0]
 800b654:	4770      	bx	lr
 800b656:	b299      	uxth	r1, r3
 800b658:	b909      	cbnz	r1, 800b65e <__lo0bits+0x2a>
 800b65a:	2010      	movs	r0, #16
 800b65c:	0c1b      	lsrs	r3, r3, #16
 800b65e:	b2d9      	uxtb	r1, r3
 800b660:	b909      	cbnz	r1, 800b666 <__lo0bits+0x32>
 800b662:	3008      	adds	r0, #8
 800b664:	0a1b      	lsrs	r3, r3, #8
 800b666:	0719      	lsls	r1, r3, #28
 800b668:	bf04      	itt	eq
 800b66a:	091b      	lsreq	r3, r3, #4
 800b66c:	3004      	addeq	r0, #4
 800b66e:	0799      	lsls	r1, r3, #30
 800b670:	bf04      	itt	eq
 800b672:	089b      	lsreq	r3, r3, #2
 800b674:	3002      	addeq	r0, #2
 800b676:	07d9      	lsls	r1, r3, #31
 800b678:	d403      	bmi.n	800b682 <__lo0bits+0x4e>
 800b67a:	085b      	lsrs	r3, r3, #1
 800b67c:	f100 0001 	add.w	r0, r0, #1
 800b680:	d003      	beq.n	800b68a <__lo0bits+0x56>
 800b682:	6013      	str	r3, [r2, #0]
 800b684:	4770      	bx	lr
 800b686:	2000      	movs	r0, #0
 800b688:	4770      	bx	lr
 800b68a:	2020      	movs	r0, #32
 800b68c:	4770      	bx	lr
	...

0800b690 <__i2b>:
 800b690:	b510      	push	{r4, lr}
 800b692:	460c      	mov	r4, r1
 800b694:	2101      	movs	r1, #1
 800b696:	f7ff febb 	bl	800b410 <_Balloc>
 800b69a:	4602      	mov	r2, r0
 800b69c:	b928      	cbnz	r0, 800b6aa <__i2b+0x1a>
 800b69e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b6a2:	4b04      	ldr	r3, [pc, #16]	; (800b6b4 <__i2b+0x24>)
 800b6a4:	4804      	ldr	r0, [pc, #16]	; (800b6b8 <__i2b+0x28>)
 800b6a6:	f000 ff9b 	bl	800c5e0 <__assert_func>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	6144      	str	r4, [r0, #20]
 800b6ae:	6103      	str	r3, [r0, #16]
 800b6b0:	bd10      	pop	{r4, pc}
 800b6b2:	bf00      	nop
 800b6b4:	0800d558 	.word	0x0800d558
 800b6b8:	0800d648 	.word	0x0800d648

0800b6bc <__multiply>:
 800b6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c0:	4691      	mov	r9, r2
 800b6c2:	690a      	ldr	r2, [r1, #16]
 800b6c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b6c8:	460c      	mov	r4, r1
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	bfbe      	ittt	lt
 800b6ce:	460b      	movlt	r3, r1
 800b6d0:	464c      	movlt	r4, r9
 800b6d2:	4699      	movlt	r9, r3
 800b6d4:	6927      	ldr	r7, [r4, #16]
 800b6d6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b6da:	68a3      	ldr	r3, [r4, #8]
 800b6dc:	6861      	ldr	r1, [r4, #4]
 800b6de:	eb07 060a 	add.w	r6, r7, sl
 800b6e2:	42b3      	cmp	r3, r6
 800b6e4:	b085      	sub	sp, #20
 800b6e6:	bfb8      	it	lt
 800b6e8:	3101      	addlt	r1, #1
 800b6ea:	f7ff fe91 	bl	800b410 <_Balloc>
 800b6ee:	b930      	cbnz	r0, 800b6fe <__multiply+0x42>
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	f240 115d 	movw	r1, #349	; 0x15d
 800b6f6:	4b43      	ldr	r3, [pc, #268]	; (800b804 <__multiply+0x148>)
 800b6f8:	4843      	ldr	r0, [pc, #268]	; (800b808 <__multiply+0x14c>)
 800b6fa:	f000 ff71 	bl	800c5e0 <__assert_func>
 800b6fe:	f100 0514 	add.w	r5, r0, #20
 800b702:	462b      	mov	r3, r5
 800b704:	2200      	movs	r2, #0
 800b706:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b70a:	4543      	cmp	r3, r8
 800b70c:	d321      	bcc.n	800b752 <__multiply+0x96>
 800b70e:	f104 0314 	add.w	r3, r4, #20
 800b712:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b716:	f109 0314 	add.w	r3, r9, #20
 800b71a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b71e:	9202      	str	r2, [sp, #8]
 800b720:	1b3a      	subs	r2, r7, r4
 800b722:	3a15      	subs	r2, #21
 800b724:	f022 0203 	bic.w	r2, r2, #3
 800b728:	3204      	adds	r2, #4
 800b72a:	f104 0115 	add.w	r1, r4, #21
 800b72e:	428f      	cmp	r7, r1
 800b730:	bf38      	it	cc
 800b732:	2204      	movcc	r2, #4
 800b734:	9201      	str	r2, [sp, #4]
 800b736:	9a02      	ldr	r2, [sp, #8]
 800b738:	9303      	str	r3, [sp, #12]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d80c      	bhi.n	800b758 <__multiply+0x9c>
 800b73e:	2e00      	cmp	r6, #0
 800b740:	dd03      	ble.n	800b74a <__multiply+0x8e>
 800b742:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b746:	2b00      	cmp	r3, #0
 800b748:	d059      	beq.n	800b7fe <__multiply+0x142>
 800b74a:	6106      	str	r6, [r0, #16]
 800b74c:	b005      	add	sp, #20
 800b74e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b752:	f843 2b04 	str.w	r2, [r3], #4
 800b756:	e7d8      	b.n	800b70a <__multiply+0x4e>
 800b758:	f8b3 a000 	ldrh.w	sl, [r3]
 800b75c:	f1ba 0f00 	cmp.w	sl, #0
 800b760:	d023      	beq.n	800b7aa <__multiply+0xee>
 800b762:	46a9      	mov	r9, r5
 800b764:	f04f 0c00 	mov.w	ip, #0
 800b768:	f104 0e14 	add.w	lr, r4, #20
 800b76c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b770:	f8d9 1000 	ldr.w	r1, [r9]
 800b774:	fa1f fb82 	uxth.w	fp, r2
 800b778:	b289      	uxth	r1, r1
 800b77a:	fb0a 110b 	mla	r1, sl, fp, r1
 800b77e:	4461      	add	r1, ip
 800b780:	f8d9 c000 	ldr.w	ip, [r9]
 800b784:	0c12      	lsrs	r2, r2, #16
 800b786:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b78a:	fb0a c202 	mla	r2, sl, r2, ip
 800b78e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b792:	b289      	uxth	r1, r1
 800b794:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b798:	4577      	cmp	r7, lr
 800b79a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b79e:	f849 1b04 	str.w	r1, [r9], #4
 800b7a2:	d8e3      	bhi.n	800b76c <__multiply+0xb0>
 800b7a4:	9a01      	ldr	r2, [sp, #4]
 800b7a6:	f845 c002 	str.w	ip, [r5, r2]
 800b7aa:	9a03      	ldr	r2, [sp, #12]
 800b7ac:	3304      	adds	r3, #4
 800b7ae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b7b2:	f1b9 0f00 	cmp.w	r9, #0
 800b7b6:	d020      	beq.n	800b7fa <__multiply+0x13e>
 800b7b8:	46ae      	mov	lr, r5
 800b7ba:	f04f 0a00 	mov.w	sl, #0
 800b7be:	6829      	ldr	r1, [r5, #0]
 800b7c0:	f104 0c14 	add.w	ip, r4, #20
 800b7c4:	f8bc b000 	ldrh.w	fp, [ip]
 800b7c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b7cc:	b289      	uxth	r1, r1
 800b7ce:	fb09 220b 	mla	r2, r9, fp, r2
 800b7d2:	4492      	add	sl, r2
 800b7d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b7d8:	f84e 1b04 	str.w	r1, [lr], #4
 800b7dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b7e0:	f8be 1000 	ldrh.w	r1, [lr]
 800b7e4:	0c12      	lsrs	r2, r2, #16
 800b7e6:	fb09 1102 	mla	r1, r9, r2, r1
 800b7ea:	4567      	cmp	r7, ip
 800b7ec:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b7f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b7f4:	d8e6      	bhi.n	800b7c4 <__multiply+0x108>
 800b7f6:	9a01      	ldr	r2, [sp, #4]
 800b7f8:	50a9      	str	r1, [r5, r2]
 800b7fa:	3504      	adds	r5, #4
 800b7fc:	e79b      	b.n	800b736 <__multiply+0x7a>
 800b7fe:	3e01      	subs	r6, #1
 800b800:	e79d      	b.n	800b73e <__multiply+0x82>
 800b802:	bf00      	nop
 800b804:	0800d558 	.word	0x0800d558
 800b808:	0800d648 	.word	0x0800d648

0800b80c <__pow5mult>:
 800b80c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b810:	4615      	mov	r5, r2
 800b812:	f012 0203 	ands.w	r2, r2, #3
 800b816:	4606      	mov	r6, r0
 800b818:	460f      	mov	r7, r1
 800b81a:	d007      	beq.n	800b82c <__pow5mult+0x20>
 800b81c:	4c25      	ldr	r4, [pc, #148]	; (800b8b4 <__pow5mult+0xa8>)
 800b81e:	3a01      	subs	r2, #1
 800b820:	2300      	movs	r3, #0
 800b822:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b826:	f7ff fe55 	bl	800b4d4 <__multadd>
 800b82a:	4607      	mov	r7, r0
 800b82c:	10ad      	asrs	r5, r5, #2
 800b82e:	d03d      	beq.n	800b8ac <__pow5mult+0xa0>
 800b830:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b832:	b97c      	cbnz	r4, 800b854 <__pow5mult+0x48>
 800b834:	2010      	movs	r0, #16
 800b836:	f7ff fdc3 	bl	800b3c0 <malloc>
 800b83a:	4602      	mov	r2, r0
 800b83c:	6270      	str	r0, [r6, #36]	; 0x24
 800b83e:	b928      	cbnz	r0, 800b84c <__pow5mult+0x40>
 800b840:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b844:	4b1c      	ldr	r3, [pc, #112]	; (800b8b8 <__pow5mult+0xac>)
 800b846:	481d      	ldr	r0, [pc, #116]	; (800b8bc <__pow5mult+0xb0>)
 800b848:	f000 feca 	bl	800c5e0 <__assert_func>
 800b84c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b850:	6004      	str	r4, [r0, #0]
 800b852:	60c4      	str	r4, [r0, #12]
 800b854:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b858:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b85c:	b94c      	cbnz	r4, 800b872 <__pow5mult+0x66>
 800b85e:	f240 2171 	movw	r1, #625	; 0x271
 800b862:	4630      	mov	r0, r6
 800b864:	f7ff ff14 	bl	800b690 <__i2b>
 800b868:	2300      	movs	r3, #0
 800b86a:	4604      	mov	r4, r0
 800b86c:	f8c8 0008 	str.w	r0, [r8, #8]
 800b870:	6003      	str	r3, [r0, #0]
 800b872:	f04f 0900 	mov.w	r9, #0
 800b876:	07eb      	lsls	r3, r5, #31
 800b878:	d50a      	bpl.n	800b890 <__pow5mult+0x84>
 800b87a:	4639      	mov	r1, r7
 800b87c:	4622      	mov	r2, r4
 800b87e:	4630      	mov	r0, r6
 800b880:	f7ff ff1c 	bl	800b6bc <__multiply>
 800b884:	4680      	mov	r8, r0
 800b886:	4639      	mov	r1, r7
 800b888:	4630      	mov	r0, r6
 800b88a:	f7ff fe01 	bl	800b490 <_Bfree>
 800b88e:	4647      	mov	r7, r8
 800b890:	106d      	asrs	r5, r5, #1
 800b892:	d00b      	beq.n	800b8ac <__pow5mult+0xa0>
 800b894:	6820      	ldr	r0, [r4, #0]
 800b896:	b938      	cbnz	r0, 800b8a8 <__pow5mult+0x9c>
 800b898:	4622      	mov	r2, r4
 800b89a:	4621      	mov	r1, r4
 800b89c:	4630      	mov	r0, r6
 800b89e:	f7ff ff0d 	bl	800b6bc <__multiply>
 800b8a2:	6020      	str	r0, [r4, #0]
 800b8a4:	f8c0 9000 	str.w	r9, [r0]
 800b8a8:	4604      	mov	r4, r0
 800b8aa:	e7e4      	b.n	800b876 <__pow5mult+0x6a>
 800b8ac:	4638      	mov	r0, r7
 800b8ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8b2:	bf00      	nop
 800b8b4:	0800d798 	.word	0x0800d798
 800b8b8:	0800d4e6 	.word	0x0800d4e6
 800b8bc:	0800d648 	.word	0x0800d648

0800b8c0 <__lshift>:
 800b8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8c4:	460c      	mov	r4, r1
 800b8c6:	4607      	mov	r7, r0
 800b8c8:	4691      	mov	r9, r2
 800b8ca:	6923      	ldr	r3, [r4, #16]
 800b8cc:	6849      	ldr	r1, [r1, #4]
 800b8ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b8d2:	68a3      	ldr	r3, [r4, #8]
 800b8d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b8d8:	f108 0601 	add.w	r6, r8, #1
 800b8dc:	42b3      	cmp	r3, r6
 800b8de:	db0b      	blt.n	800b8f8 <__lshift+0x38>
 800b8e0:	4638      	mov	r0, r7
 800b8e2:	f7ff fd95 	bl	800b410 <_Balloc>
 800b8e6:	4605      	mov	r5, r0
 800b8e8:	b948      	cbnz	r0, 800b8fe <__lshift+0x3e>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b8f0:	4b29      	ldr	r3, [pc, #164]	; (800b998 <__lshift+0xd8>)
 800b8f2:	482a      	ldr	r0, [pc, #168]	; (800b99c <__lshift+0xdc>)
 800b8f4:	f000 fe74 	bl	800c5e0 <__assert_func>
 800b8f8:	3101      	adds	r1, #1
 800b8fa:	005b      	lsls	r3, r3, #1
 800b8fc:	e7ee      	b.n	800b8dc <__lshift+0x1c>
 800b8fe:	2300      	movs	r3, #0
 800b900:	f100 0114 	add.w	r1, r0, #20
 800b904:	f100 0210 	add.w	r2, r0, #16
 800b908:	4618      	mov	r0, r3
 800b90a:	4553      	cmp	r3, sl
 800b90c:	db37      	blt.n	800b97e <__lshift+0xbe>
 800b90e:	6920      	ldr	r0, [r4, #16]
 800b910:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b914:	f104 0314 	add.w	r3, r4, #20
 800b918:	f019 091f 	ands.w	r9, r9, #31
 800b91c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b920:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b924:	d02f      	beq.n	800b986 <__lshift+0xc6>
 800b926:	468a      	mov	sl, r1
 800b928:	f04f 0c00 	mov.w	ip, #0
 800b92c:	f1c9 0e20 	rsb	lr, r9, #32
 800b930:	681a      	ldr	r2, [r3, #0]
 800b932:	fa02 f209 	lsl.w	r2, r2, r9
 800b936:	ea42 020c 	orr.w	r2, r2, ip
 800b93a:	f84a 2b04 	str.w	r2, [sl], #4
 800b93e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b942:	4298      	cmp	r0, r3
 800b944:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b948:	d8f2      	bhi.n	800b930 <__lshift+0x70>
 800b94a:	1b03      	subs	r3, r0, r4
 800b94c:	3b15      	subs	r3, #21
 800b94e:	f023 0303 	bic.w	r3, r3, #3
 800b952:	3304      	adds	r3, #4
 800b954:	f104 0215 	add.w	r2, r4, #21
 800b958:	4290      	cmp	r0, r2
 800b95a:	bf38      	it	cc
 800b95c:	2304      	movcc	r3, #4
 800b95e:	f841 c003 	str.w	ip, [r1, r3]
 800b962:	f1bc 0f00 	cmp.w	ip, #0
 800b966:	d001      	beq.n	800b96c <__lshift+0xac>
 800b968:	f108 0602 	add.w	r6, r8, #2
 800b96c:	3e01      	subs	r6, #1
 800b96e:	4638      	mov	r0, r7
 800b970:	4621      	mov	r1, r4
 800b972:	612e      	str	r6, [r5, #16]
 800b974:	f7ff fd8c 	bl	800b490 <_Bfree>
 800b978:	4628      	mov	r0, r5
 800b97a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b97e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b982:	3301      	adds	r3, #1
 800b984:	e7c1      	b.n	800b90a <__lshift+0x4a>
 800b986:	3904      	subs	r1, #4
 800b988:	f853 2b04 	ldr.w	r2, [r3], #4
 800b98c:	4298      	cmp	r0, r3
 800b98e:	f841 2f04 	str.w	r2, [r1, #4]!
 800b992:	d8f9      	bhi.n	800b988 <__lshift+0xc8>
 800b994:	e7ea      	b.n	800b96c <__lshift+0xac>
 800b996:	bf00      	nop
 800b998:	0800d558 	.word	0x0800d558
 800b99c:	0800d648 	.word	0x0800d648

0800b9a0 <__mcmp>:
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	690a      	ldr	r2, [r1, #16]
 800b9a4:	6900      	ldr	r0, [r0, #16]
 800b9a6:	b530      	push	{r4, r5, lr}
 800b9a8:	1a80      	subs	r0, r0, r2
 800b9aa:	d10d      	bne.n	800b9c8 <__mcmp+0x28>
 800b9ac:	3314      	adds	r3, #20
 800b9ae:	3114      	adds	r1, #20
 800b9b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b9b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b9b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b9bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b9c0:	4295      	cmp	r5, r2
 800b9c2:	d002      	beq.n	800b9ca <__mcmp+0x2a>
 800b9c4:	d304      	bcc.n	800b9d0 <__mcmp+0x30>
 800b9c6:	2001      	movs	r0, #1
 800b9c8:	bd30      	pop	{r4, r5, pc}
 800b9ca:	42a3      	cmp	r3, r4
 800b9cc:	d3f4      	bcc.n	800b9b8 <__mcmp+0x18>
 800b9ce:	e7fb      	b.n	800b9c8 <__mcmp+0x28>
 800b9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9d4:	e7f8      	b.n	800b9c8 <__mcmp+0x28>
	...

0800b9d8 <__mdiff>:
 800b9d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9dc:	460d      	mov	r5, r1
 800b9de:	4607      	mov	r7, r0
 800b9e0:	4611      	mov	r1, r2
 800b9e2:	4628      	mov	r0, r5
 800b9e4:	4614      	mov	r4, r2
 800b9e6:	f7ff ffdb 	bl	800b9a0 <__mcmp>
 800b9ea:	1e06      	subs	r6, r0, #0
 800b9ec:	d111      	bne.n	800ba12 <__mdiff+0x3a>
 800b9ee:	4631      	mov	r1, r6
 800b9f0:	4638      	mov	r0, r7
 800b9f2:	f7ff fd0d 	bl	800b410 <_Balloc>
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	b928      	cbnz	r0, 800ba06 <__mdiff+0x2e>
 800b9fa:	f240 2132 	movw	r1, #562	; 0x232
 800b9fe:	4b3a      	ldr	r3, [pc, #232]	; (800bae8 <__mdiff+0x110>)
 800ba00:	483a      	ldr	r0, [pc, #232]	; (800baec <__mdiff+0x114>)
 800ba02:	f000 fded 	bl	800c5e0 <__assert_func>
 800ba06:	2301      	movs	r3, #1
 800ba08:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ba0c:	4610      	mov	r0, r2
 800ba0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba12:	bfa4      	itt	ge
 800ba14:	4623      	movge	r3, r4
 800ba16:	462c      	movge	r4, r5
 800ba18:	4638      	mov	r0, r7
 800ba1a:	6861      	ldr	r1, [r4, #4]
 800ba1c:	bfa6      	itte	ge
 800ba1e:	461d      	movge	r5, r3
 800ba20:	2600      	movge	r6, #0
 800ba22:	2601      	movlt	r6, #1
 800ba24:	f7ff fcf4 	bl	800b410 <_Balloc>
 800ba28:	4602      	mov	r2, r0
 800ba2a:	b918      	cbnz	r0, 800ba34 <__mdiff+0x5c>
 800ba2c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ba30:	4b2d      	ldr	r3, [pc, #180]	; (800bae8 <__mdiff+0x110>)
 800ba32:	e7e5      	b.n	800ba00 <__mdiff+0x28>
 800ba34:	f102 0814 	add.w	r8, r2, #20
 800ba38:	46c2      	mov	sl, r8
 800ba3a:	f04f 0c00 	mov.w	ip, #0
 800ba3e:	6927      	ldr	r7, [r4, #16]
 800ba40:	60c6      	str	r6, [r0, #12]
 800ba42:	692e      	ldr	r6, [r5, #16]
 800ba44:	f104 0014 	add.w	r0, r4, #20
 800ba48:	f105 0914 	add.w	r9, r5, #20
 800ba4c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800ba50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ba54:	3410      	adds	r4, #16
 800ba56:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800ba5a:	f859 3b04 	ldr.w	r3, [r9], #4
 800ba5e:	fa1f f18b 	uxth.w	r1, fp
 800ba62:	448c      	add	ip, r1
 800ba64:	b299      	uxth	r1, r3
 800ba66:	0c1b      	lsrs	r3, r3, #16
 800ba68:	ebac 0101 	sub.w	r1, ip, r1
 800ba6c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ba70:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ba74:	b289      	uxth	r1, r1
 800ba76:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ba7a:	454e      	cmp	r6, r9
 800ba7c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ba80:	f84a 3b04 	str.w	r3, [sl], #4
 800ba84:	d8e7      	bhi.n	800ba56 <__mdiff+0x7e>
 800ba86:	1b73      	subs	r3, r6, r5
 800ba88:	3b15      	subs	r3, #21
 800ba8a:	f023 0303 	bic.w	r3, r3, #3
 800ba8e:	3515      	adds	r5, #21
 800ba90:	3304      	adds	r3, #4
 800ba92:	42ae      	cmp	r6, r5
 800ba94:	bf38      	it	cc
 800ba96:	2304      	movcc	r3, #4
 800ba98:	4418      	add	r0, r3
 800ba9a:	4443      	add	r3, r8
 800ba9c:	461e      	mov	r6, r3
 800ba9e:	4605      	mov	r5, r0
 800baa0:	4575      	cmp	r5, lr
 800baa2:	d30e      	bcc.n	800bac2 <__mdiff+0xea>
 800baa4:	f10e 0103 	add.w	r1, lr, #3
 800baa8:	1a09      	subs	r1, r1, r0
 800baaa:	f021 0103 	bic.w	r1, r1, #3
 800baae:	3803      	subs	r0, #3
 800bab0:	4586      	cmp	lr, r0
 800bab2:	bf38      	it	cc
 800bab4:	2100      	movcc	r1, #0
 800bab6:	4419      	add	r1, r3
 800bab8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800babc:	b18b      	cbz	r3, 800bae2 <__mdiff+0x10a>
 800babe:	6117      	str	r7, [r2, #16]
 800bac0:	e7a4      	b.n	800ba0c <__mdiff+0x34>
 800bac2:	f855 8b04 	ldr.w	r8, [r5], #4
 800bac6:	fa1f f188 	uxth.w	r1, r8
 800baca:	4461      	add	r1, ip
 800bacc:	140c      	asrs	r4, r1, #16
 800bace:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bad2:	b289      	uxth	r1, r1
 800bad4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bad8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800badc:	f846 1b04 	str.w	r1, [r6], #4
 800bae0:	e7de      	b.n	800baa0 <__mdiff+0xc8>
 800bae2:	3f01      	subs	r7, #1
 800bae4:	e7e8      	b.n	800bab8 <__mdiff+0xe0>
 800bae6:	bf00      	nop
 800bae8:	0800d558 	.word	0x0800d558
 800baec:	0800d648 	.word	0x0800d648

0800baf0 <__ulp>:
 800baf0:	4b11      	ldr	r3, [pc, #68]	; (800bb38 <__ulp+0x48>)
 800baf2:	400b      	ands	r3, r1
 800baf4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	dd02      	ble.n	800bb02 <__ulp+0x12>
 800bafc:	2000      	movs	r0, #0
 800bafe:	4619      	mov	r1, r3
 800bb00:	4770      	bx	lr
 800bb02:	425b      	negs	r3, r3
 800bb04:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bb08:	f04f 0000 	mov.w	r0, #0
 800bb0c:	f04f 0100 	mov.w	r1, #0
 800bb10:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bb14:	da04      	bge.n	800bb20 <__ulp+0x30>
 800bb16:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bb1a:	fa43 f102 	asr.w	r1, r3, r2
 800bb1e:	4770      	bx	lr
 800bb20:	f1a2 0314 	sub.w	r3, r2, #20
 800bb24:	2b1e      	cmp	r3, #30
 800bb26:	bfd6      	itet	le
 800bb28:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bb2c:	2301      	movgt	r3, #1
 800bb2e:	fa22 f303 	lsrle.w	r3, r2, r3
 800bb32:	4618      	mov	r0, r3
 800bb34:	4770      	bx	lr
 800bb36:	bf00      	nop
 800bb38:	7ff00000 	.word	0x7ff00000

0800bb3c <__b2d>:
 800bb3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb40:	6907      	ldr	r7, [r0, #16]
 800bb42:	f100 0914 	add.w	r9, r0, #20
 800bb46:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800bb4a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800bb4e:	f1a7 0804 	sub.w	r8, r7, #4
 800bb52:	4630      	mov	r0, r6
 800bb54:	f7ff fd4e 	bl	800b5f4 <__hi0bits>
 800bb58:	f1c0 0320 	rsb	r3, r0, #32
 800bb5c:	280a      	cmp	r0, #10
 800bb5e:	600b      	str	r3, [r1, #0]
 800bb60:	491f      	ldr	r1, [pc, #124]	; (800bbe0 <__b2d+0xa4>)
 800bb62:	dc17      	bgt.n	800bb94 <__b2d+0x58>
 800bb64:	45c1      	cmp	r9, r8
 800bb66:	bf28      	it	cs
 800bb68:	2200      	movcs	r2, #0
 800bb6a:	f1c0 0c0b 	rsb	ip, r0, #11
 800bb6e:	fa26 f30c 	lsr.w	r3, r6, ip
 800bb72:	bf38      	it	cc
 800bb74:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800bb78:	ea43 0501 	orr.w	r5, r3, r1
 800bb7c:	f100 0315 	add.w	r3, r0, #21
 800bb80:	fa06 f303 	lsl.w	r3, r6, r3
 800bb84:	fa22 f20c 	lsr.w	r2, r2, ip
 800bb88:	ea43 0402 	orr.w	r4, r3, r2
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	4629      	mov	r1, r5
 800bb90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb94:	45c1      	cmp	r9, r8
 800bb96:	bf2e      	itee	cs
 800bb98:	2200      	movcs	r2, #0
 800bb9a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800bb9e:	f1a7 0808 	subcc.w	r8, r7, #8
 800bba2:	f1b0 030b 	subs.w	r3, r0, #11
 800bba6:	d016      	beq.n	800bbd6 <__b2d+0x9a>
 800bba8:	f1c3 0720 	rsb	r7, r3, #32
 800bbac:	fa22 f107 	lsr.w	r1, r2, r7
 800bbb0:	45c8      	cmp	r8, r9
 800bbb2:	fa06 f603 	lsl.w	r6, r6, r3
 800bbb6:	ea46 0601 	orr.w	r6, r6, r1
 800bbba:	bf94      	ite	ls
 800bbbc:	2100      	movls	r1, #0
 800bbbe:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800bbc2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800bbc6:	fa02 f003 	lsl.w	r0, r2, r3
 800bbca:	40f9      	lsrs	r1, r7
 800bbcc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bbd0:	ea40 0401 	orr.w	r4, r0, r1
 800bbd4:	e7da      	b.n	800bb8c <__b2d+0x50>
 800bbd6:	4614      	mov	r4, r2
 800bbd8:	ea46 0501 	orr.w	r5, r6, r1
 800bbdc:	e7d6      	b.n	800bb8c <__b2d+0x50>
 800bbde:	bf00      	nop
 800bbe0:	3ff00000 	.word	0x3ff00000

0800bbe4 <__d2b>:
 800bbe4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bbe8:	2101      	movs	r1, #1
 800bbea:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800bbee:	4690      	mov	r8, r2
 800bbf0:	461d      	mov	r5, r3
 800bbf2:	f7ff fc0d 	bl	800b410 <_Balloc>
 800bbf6:	4604      	mov	r4, r0
 800bbf8:	b930      	cbnz	r0, 800bc08 <__d2b+0x24>
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	f240 310a 	movw	r1, #778	; 0x30a
 800bc00:	4b24      	ldr	r3, [pc, #144]	; (800bc94 <__d2b+0xb0>)
 800bc02:	4825      	ldr	r0, [pc, #148]	; (800bc98 <__d2b+0xb4>)
 800bc04:	f000 fcec 	bl	800c5e0 <__assert_func>
 800bc08:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800bc0c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800bc10:	bb2d      	cbnz	r5, 800bc5e <__d2b+0x7a>
 800bc12:	9301      	str	r3, [sp, #4]
 800bc14:	f1b8 0300 	subs.w	r3, r8, #0
 800bc18:	d026      	beq.n	800bc68 <__d2b+0x84>
 800bc1a:	4668      	mov	r0, sp
 800bc1c:	9300      	str	r3, [sp, #0]
 800bc1e:	f7ff fd09 	bl	800b634 <__lo0bits>
 800bc22:	9900      	ldr	r1, [sp, #0]
 800bc24:	b1f0      	cbz	r0, 800bc64 <__d2b+0x80>
 800bc26:	9a01      	ldr	r2, [sp, #4]
 800bc28:	f1c0 0320 	rsb	r3, r0, #32
 800bc2c:	fa02 f303 	lsl.w	r3, r2, r3
 800bc30:	430b      	orrs	r3, r1
 800bc32:	40c2      	lsrs	r2, r0
 800bc34:	6163      	str	r3, [r4, #20]
 800bc36:	9201      	str	r2, [sp, #4]
 800bc38:	9b01      	ldr	r3, [sp, #4]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	bf14      	ite	ne
 800bc3e:	2102      	movne	r1, #2
 800bc40:	2101      	moveq	r1, #1
 800bc42:	61a3      	str	r3, [r4, #24]
 800bc44:	6121      	str	r1, [r4, #16]
 800bc46:	b1c5      	cbz	r5, 800bc7a <__d2b+0x96>
 800bc48:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bc4c:	4405      	add	r5, r0
 800bc4e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bc52:	603d      	str	r5, [r7, #0]
 800bc54:	6030      	str	r0, [r6, #0]
 800bc56:	4620      	mov	r0, r4
 800bc58:	b002      	add	sp, #8
 800bc5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc62:	e7d6      	b.n	800bc12 <__d2b+0x2e>
 800bc64:	6161      	str	r1, [r4, #20]
 800bc66:	e7e7      	b.n	800bc38 <__d2b+0x54>
 800bc68:	a801      	add	r0, sp, #4
 800bc6a:	f7ff fce3 	bl	800b634 <__lo0bits>
 800bc6e:	2101      	movs	r1, #1
 800bc70:	9b01      	ldr	r3, [sp, #4]
 800bc72:	6121      	str	r1, [r4, #16]
 800bc74:	6163      	str	r3, [r4, #20]
 800bc76:	3020      	adds	r0, #32
 800bc78:	e7e5      	b.n	800bc46 <__d2b+0x62>
 800bc7a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800bc7e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bc82:	6038      	str	r0, [r7, #0]
 800bc84:	6918      	ldr	r0, [r3, #16]
 800bc86:	f7ff fcb5 	bl	800b5f4 <__hi0bits>
 800bc8a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800bc8e:	6031      	str	r1, [r6, #0]
 800bc90:	e7e1      	b.n	800bc56 <__d2b+0x72>
 800bc92:	bf00      	nop
 800bc94:	0800d558 	.word	0x0800d558
 800bc98:	0800d648 	.word	0x0800d648

0800bc9c <__ratio>:
 800bc9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca0:	4688      	mov	r8, r1
 800bca2:	4669      	mov	r1, sp
 800bca4:	4681      	mov	r9, r0
 800bca6:	f7ff ff49 	bl	800bb3c <__b2d>
 800bcaa:	460f      	mov	r7, r1
 800bcac:	4604      	mov	r4, r0
 800bcae:	460d      	mov	r5, r1
 800bcb0:	4640      	mov	r0, r8
 800bcb2:	a901      	add	r1, sp, #4
 800bcb4:	f7ff ff42 	bl	800bb3c <__b2d>
 800bcb8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bcbc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bcc0:	468b      	mov	fp, r1
 800bcc2:	eba3 0c02 	sub.w	ip, r3, r2
 800bcc6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bcca:	1a9b      	subs	r3, r3, r2
 800bccc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	bfd5      	itete	le
 800bcd4:	460a      	movle	r2, r1
 800bcd6:	462a      	movgt	r2, r5
 800bcd8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bcdc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bce0:	bfd8      	it	le
 800bce2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bce6:	465b      	mov	r3, fp
 800bce8:	4602      	mov	r2, r0
 800bcea:	4639      	mov	r1, r7
 800bcec:	4620      	mov	r0, r4
 800bcee:	f7f4 fd1d 	bl	800072c <__aeabi_ddiv>
 800bcf2:	b003      	add	sp, #12
 800bcf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bcf8 <__copybits>:
 800bcf8:	3901      	subs	r1, #1
 800bcfa:	b570      	push	{r4, r5, r6, lr}
 800bcfc:	1149      	asrs	r1, r1, #5
 800bcfe:	6914      	ldr	r4, [r2, #16]
 800bd00:	3101      	adds	r1, #1
 800bd02:	f102 0314 	add.w	r3, r2, #20
 800bd06:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bd0a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bd0e:	1f05      	subs	r5, r0, #4
 800bd10:	42a3      	cmp	r3, r4
 800bd12:	d30c      	bcc.n	800bd2e <__copybits+0x36>
 800bd14:	1aa3      	subs	r3, r4, r2
 800bd16:	3b11      	subs	r3, #17
 800bd18:	f023 0303 	bic.w	r3, r3, #3
 800bd1c:	3211      	adds	r2, #17
 800bd1e:	42a2      	cmp	r2, r4
 800bd20:	bf88      	it	hi
 800bd22:	2300      	movhi	r3, #0
 800bd24:	4418      	add	r0, r3
 800bd26:	2300      	movs	r3, #0
 800bd28:	4288      	cmp	r0, r1
 800bd2a:	d305      	bcc.n	800bd38 <__copybits+0x40>
 800bd2c:	bd70      	pop	{r4, r5, r6, pc}
 800bd2e:	f853 6b04 	ldr.w	r6, [r3], #4
 800bd32:	f845 6f04 	str.w	r6, [r5, #4]!
 800bd36:	e7eb      	b.n	800bd10 <__copybits+0x18>
 800bd38:	f840 3b04 	str.w	r3, [r0], #4
 800bd3c:	e7f4      	b.n	800bd28 <__copybits+0x30>

0800bd3e <__any_on>:
 800bd3e:	f100 0214 	add.w	r2, r0, #20
 800bd42:	6900      	ldr	r0, [r0, #16]
 800bd44:	114b      	asrs	r3, r1, #5
 800bd46:	4298      	cmp	r0, r3
 800bd48:	b510      	push	{r4, lr}
 800bd4a:	db11      	blt.n	800bd70 <__any_on+0x32>
 800bd4c:	dd0a      	ble.n	800bd64 <__any_on+0x26>
 800bd4e:	f011 011f 	ands.w	r1, r1, #31
 800bd52:	d007      	beq.n	800bd64 <__any_on+0x26>
 800bd54:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bd58:	fa24 f001 	lsr.w	r0, r4, r1
 800bd5c:	fa00 f101 	lsl.w	r1, r0, r1
 800bd60:	428c      	cmp	r4, r1
 800bd62:	d10b      	bne.n	800bd7c <__any_on+0x3e>
 800bd64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d803      	bhi.n	800bd74 <__any_on+0x36>
 800bd6c:	2000      	movs	r0, #0
 800bd6e:	bd10      	pop	{r4, pc}
 800bd70:	4603      	mov	r3, r0
 800bd72:	e7f7      	b.n	800bd64 <__any_on+0x26>
 800bd74:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bd78:	2900      	cmp	r1, #0
 800bd7a:	d0f5      	beq.n	800bd68 <__any_on+0x2a>
 800bd7c:	2001      	movs	r0, #1
 800bd7e:	e7f6      	b.n	800bd6e <__any_on+0x30>

0800bd80 <_calloc_r>:
 800bd80:	b570      	push	{r4, r5, r6, lr}
 800bd82:	fba1 5402 	umull	r5, r4, r1, r2
 800bd86:	b934      	cbnz	r4, 800bd96 <_calloc_r+0x16>
 800bd88:	4629      	mov	r1, r5
 800bd8a:	f000 f875 	bl	800be78 <_malloc_r>
 800bd8e:	4606      	mov	r6, r0
 800bd90:	b928      	cbnz	r0, 800bd9e <_calloc_r+0x1e>
 800bd92:	4630      	mov	r0, r6
 800bd94:	bd70      	pop	{r4, r5, r6, pc}
 800bd96:	220c      	movs	r2, #12
 800bd98:	2600      	movs	r6, #0
 800bd9a:	6002      	str	r2, [r0, #0]
 800bd9c:	e7f9      	b.n	800bd92 <_calloc_r+0x12>
 800bd9e:	462a      	mov	r2, r5
 800bda0:	4621      	mov	r1, r4
 800bda2:	f7fc f897 	bl	8007ed4 <memset>
 800bda6:	e7f4      	b.n	800bd92 <_calloc_r+0x12>

0800bda8 <_free_r>:
 800bda8:	b538      	push	{r3, r4, r5, lr}
 800bdaa:	4605      	mov	r5, r0
 800bdac:	2900      	cmp	r1, #0
 800bdae:	d040      	beq.n	800be32 <_free_r+0x8a>
 800bdb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdb4:	1f0c      	subs	r4, r1, #4
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	bfb8      	it	lt
 800bdba:	18e4      	addlt	r4, r4, r3
 800bdbc:	f000 fc9e 	bl	800c6fc <__malloc_lock>
 800bdc0:	4a1c      	ldr	r2, [pc, #112]	; (800be34 <_free_r+0x8c>)
 800bdc2:	6813      	ldr	r3, [r2, #0]
 800bdc4:	b933      	cbnz	r3, 800bdd4 <_free_r+0x2c>
 800bdc6:	6063      	str	r3, [r4, #4]
 800bdc8:	6014      	str	r4, [r2, #0]
 800bdca:	4628      	mov	r0, r5
 800bdcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdd0:	f000 bc9a 	b.w	800c708 <__malloc_unlock>
 800bdd4:	42a3      	cmp	r3, r4
 800bdd6:	d908      	bls.n	800bdea <_free_r+0x42>
 800bdd8:	6820      	ldr	r0, [r4, #0]
 800bdda:	1821      	adds	r1, r4, r0
 800bddc:	428b      	cmp	r3, r1
 800bdde:	bf01      	itttt	eq
 800bde0:	6819      	ldreq	r1, [r3, #0]
 800bde2:	685b      	ldreq	r3, [r3, #4]
 800bde4:	1809      	addeq	r1, r1, r0
 800bde6:	6021      	streq	r1, [r4, #0]
 800bde8:	e7ed      	b.n	800bdc6 <_free_r+0x1e>
 800bdea:	461a      	mov	r2, r3
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	b10b      	cbz	r3, 800bdf4 <_free_r+0x4c>
 800bdf0:	42a3      	cmp	r3, r4
 800bdf2:	d9fa      	bls.n	800bdea <_free_r+0x42>
 800bdf4:	6811      	ldr	r1, [r2, #0]
 800bdf6:	1850      	adds	r0, r2, r1
 800bdf8:	42a0      	cmp	r0, r4
 800bdfa:	d10b      	bne.n	800be14 <_free_r+0x6c>
 800bdfc:	6820      	ldr	r0, [r4, #0]
 800bdfe:	4401      	add	r1, r0
 800be00:	1850      	adds	r0, r2, r1
 800be02:	4283      	cmp	r3, r0
 800be04:	6011      	str	r1, [r2, #0]
 800be06:	d1e0      	bne.n	800bdca <_free_r+0x22>
 800be08:	6818      	ldr	r0, [r3, #0]
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	4401      	add	r1, r0
 800be0e:	6011      	str	r1, [r2, #0]
 800be10:	6053      	str	r3, [r2, #4]
 800be12:	e7da      	b.n	800bdca <_free_r+0x22>
 800be14:	d902      	bls.n	800be1c <_free_r+0x74>
 800be16:	230c      	movs	r3, #12
 800be18:	602b      	str	r3, [r5, #0]
 800be1a:	e7d6      	b.n	800bdca <_free_r+0x22>
 800be1c:	6820      	ldr	r0, [r4, #0]
 800be1e:	1821      	adds	r1, r4, r0
 800be20:	428b      	cmp	r3, r1
 800be22:	bf01      	itttt	eq
 800be24:	6819      	ldreq	r1, [r3, #0]
 800be26:	685b      	ldreq	r3, [r3, #4]
 800be28:	1809      	addeq	r1, r1, r0
 800be2a:	6021      	streq	r1, [r4, #0]
 800be2c:	6063      	str	r3, [r4, #4]
 800be2e:	6054      	str	r4, [r2, #4]
 800be30:	e7cb      	b.n	800bdca <_free_r+0x22>
 800be32:	bd38      	pop	{r3, r4, r5, pc}
 800be34:	20000d74 	.word	0x20000d74

0800be38 <sbrk_aligned>:
 800be38:	b570      	push	{r4, r5, r6, lr}
 800be3a:	4e0e      	ldr	r6, [pc, #56]	; (800be74 <sbrk_aligned+0x3c>)
 800be3c:	460c      	mov	r4, r1
 800be3e:	6831      	ldr	r1, [r6, #0]
 800be40:	4605      	mov	r5, r0
 800be42:	b911      	cbnz	r1, 800be4a <sbrk_aligned+0x12>
 800be44:	f000 fb46 	bl	800c4d4 <_sbrk_r>
 800be48:	6030      	str	r0, [r6, #0]
 800be4a:	4621      	mov	r1, r4
 800be4c:	4628      	mov	r0, r5
 800be4e:	f000 fb41 	bl	800c4d4 <_sbrk_r>
 800be52:	1c43      	adds	r3, r0, #1
 800be54:	d00a      	beq.n	800be6c <sbrk_aligned+0x34>
 800be56:	1cc4      	adds	r4, r0, #3
 800be58:	f024 0403 	bic.w	r4, r4, #3
 800be5c:	42a0      	cmp	r0, r4
 800be5e:	d007      	beq.n	800be70 <sbrk_aligned+0x38>
 800be60:	1a21      	subs	r1, r4, r0
 800be62:	4628      	mov	r0, r5
 800be64:	f000 fb36 	bl	800c4d4 <_sbrk_r>
 800be68:	3001      	adds	r0, #1
 800be6a:	d101      	bne.n	800be70 <sbrk_aligned+0x38>
 800be6c:	f04f 34ff 	mov.w	r4, #4294967295
 800be70:	4620      	mov	r0, r4
 800be72:	bd70      	pop	{r4, r5, r6, pc}
 800be74:	20000d78 	.word	0x20000d78

0800be78 <_malloc_r>:
 800be78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be7c:	1ccd      	adds	r5, r1, #3
 800be7e:	f025 0503 	bic.w	r5, r5, #3
 800be82:	3508      	adds	r5, #8
 800be84:	2d0c      	cmp	r5, #12
 800be86:	bf38      	it	cc
 800be88:	250c      	movcc	r5, #12
 800be8a:	2d00      	cmp	r5, #0
 800be8c:	4607      	mov	r7, r0
 800be8e:	db01      	blt.n	800be94 <_malloc_r+0x1c>
 800be90:	42a9      	cmp	r1, r5
 800be92:	d905      	bls.n	800bea0 <_malloc_r+0x28>
 800be94:	230c      	movs	r3, #12
 800be96:	2600      	movs	r6, #0
 800be98:	603b      	str	r3, [r7, #0]
 800be9a:	4630      	mov	r0, r6
 800be9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bea0:	4e2e      	ldr	r6, [pc, #184]	; (800bf5c <_malloc_r+0xe4>)
 800bea2:	f000 fc2b 	bl	800c6fc <__malloc_lock>
 800bea6:	6833      	ldr	r3, [r6, #0]
 800bea8:	461c      	mov	r4, r3
 800beaa:	bb34      	cbnz	r4, 800befa <_malloc_r+0x82>
 800beac:	4629      	mov	r1, r5
 800beae:	4638      	mov	r0, r7
 800beb0:	f7ff ffc2 	bl	800be38 <sbrk_aligned>
 800beb4:	1c43      	adds	r3, r0, #1
 800beb6:	4604      	mov	r4, r0
 800beb8:	d14d      	bne.n	800bf56 <_malloc_r+0xde>
 800beba:	6834      	ldr	r4, [r6, #0]
 800bebc:	4626      	mov	r6, r4
 800bebe:	2e00      	cmp	r6, #0
 800bec0:	d140      	bne.n	800bf44 <_malloc_r+0xcc>
 800bec2:	6823      	ldr	r3, [r4, #0]
 800bec4:	4631      	mov	r1, r6
 800bec6:	4638      	mov	r0, r7
 800bec8:	eb04 0803 	add.w	r8, r4, r3
 800becc:	f000 fb02 	bl	800c4d4 <_sbrk_r>
 800bed0:	4580      	cmp	r8, r0
 800bed2:	d13a      	bne.n	800bf4a <_malloc_r+0xd2>
 800bed4:	6821      	ldr	r1, [r4, #0]
 800bed6:	3503      	adds	r5, #3
 800bed8:	1a6d      	subs	r5, r5, r1
 800beda:	f025 0503 	bic.w	r5, r5, #3
 800bede:	3508      	adds	r5, #8
 800bee0:	2d0c      	cmp	r5, #12
 800bee2:	bf38      	it	cc
 800bee4:	250c      	movcc	r5, #12
 800bee6:	4638      	mov	r0, r7
 800bee8:	4629      	mov	r1, r5
 800beea:	f7ff ffa5 	bl	800be38 <sbrk_aligned>
 800beee:	3001      	adds	r0, #1
 800bef0:	d02b      	beq.n	800bf4a <_malloc_r+0xd2>
 800bef2:	6823      	ldr	r3, [r4, #0]
 800bef4:	442b      	add	r3, r5
 800bef6:	6023      	str	r3, [r4, #0]
 800bef8:	e00e      	b.n	800bf18 <_malloc_r+0xa0>
 800befa:	6822      	ldr	r2, [r4, #0]
 800befc:	1b52      	subs	r2, r2, r5
 800befe:	d41e      	bmi.n	800bf3e <_malloc_r+0xc6>
 800bf00:	2a0b      	cmp	r2, #11
 800bf02:	d916      	bls.n	800bf32 <_malloc_r+0xba>
 800bf04:	1961      	adds	r1, r4, r5
 800bf06:	42a3      	cmp	r3, r4
 800bf08:	6025      	str	r5, [r4, #0]
 800bf0a:	bf18      	it	ne
 800bf0c:	6059      	strne	r1, [r3, #4]
 800bf0e:	6863      	ldr	r3, [r4, #4]
 800bf10:	bf08      	it	eq
 800bf12:	6031      	streq	r1, [r6, #0]
 800bf14:	5162      	str	r2, [r4, r5]
 800bf16:	604b      	str	r3, [r1, #4]
 800bf18:	4638      	mov	r0, r7
 800bf1a:	f104 060b 	add.w	r6, r4, #11
 800bf1e:	f000 fbf3 	bl	800c708 <__malloc_unlock>
 800bf22:	f026 0607 	bic.w	r6, r6, #7
 800bf26:	1d23      	adds	r3, r4, #4
 800bf28:	1af2      	subs	r2, r6, r3
 800bf2a:	d0b6      	beq.n	800be9a <_malloc_r+0x22>
 800bf2c:	1b9b      	subs	r3, r3, r6
 800bf2e:	50a3      	str	r3, [r4, r2]
 800bf30:	e7b3      	b.n	800be9a <_malloc_r+0x22>
 800bf32:	6862      	ldr	r2, [r4, #4]
 800bf34:	42a3      	cmp	r3, r4
 800bf36:	bf0c      	ite	eq
 800bf38:	6032      	streq	r2, [r6, #0]
 800bf3a:	605a      	strne	r2, [r3, #4]
 800bf3c:	e7ec      	b.n	800bf18 <_malloc_r+0xa0>
 800bf3e:	4623      	mov	r3, r4
 800bf40:	6864      	ldr	r4, [r4, #4]
 800bf42:	e7b2      	b.n	800beaa <_malloc_r+0x32>
 800bf44:	4634      	mov	r4, r6
 800bf46:	6876      	ldr	r6, [r6, #4]
 800bf48:	e7b9      	b.n	800bebe <_malloc_r+0x46>
 800bf4a:	230c      	movs	r3, #12
 800bf4c:	4638      	mov	r0, r7
 800bf4e:	603b      	str	r3, [r7, #0]
 800bf50:	f000 fbda 	bl	800c708 <__malloc_unlock>
 800bf54:	e7a1      	b.n	800be9a <_malloc_r+0x22>
 800bf56:	6025      	str	r5, [r4, #0]
 800bf58:	e7de      	b.n	800bf18 <_malloc_r+0xa0>
 800bf5a:	bf00      	nop
 800bf5c:	20000d74 	.word	0x20000d74

0800bf60 <__ssputs_r>:
 800bf60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf64:	688e      	ldr	r6, [r1, #8]
 800bf66:	4682      	mov	sl, r0
 800bf68:	429e      	cmp	r6, r3
 800bf6a:	460c      	mov	r4, r1
 800bf6c:	4690      	mov	r8, r2
 800bf6e:	461f      	mov	r7, r3
 800bf70:	d838      	bhi.n	800bfe4 <__ssputs_r+0x84>
 800bf72:	898a      	ldrh	r2, [r1, #12]
 800bf74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bf78:	d032      	beq.n	800bfe0 <__ssputs_r+0x80>
 800bf7a:	6825      	ldr	r5, [r4, #0]
 800bf7c:	6909      	ldr	r1, [r1, #16]
 800bf7e:	3301      	adds	r3, #1
 800bf80:	eba5 0901 	sub.w	r9, r5, r1
 800bf84:	6965      	ldr	r5, [r4, #20]
 800bf86:	444b      	add	r3, r9
 800bf88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf90:	106d      	asrs	r5, r5, #1
 800bf92:	429d      	cmp	r5, r3
 800bf94:	bf38      	it	cc
 800bf96:	461d      	movcc	r5, r3
 800bf98:	0553      	lsls	r3, r2, #21
 800bf9a:	d531      	bpl.n	800c000 <__ssputs_r+0xa0>
 800bf9c:	4629      	mov	r1, r5
 800bf9e:	f7ff ff6b 	bl	800be78 <_malloc_r>
 800bfa2:	4606      	mov	r6, r0
 800bfa4:	b950      	cbnz	r0, 800bfbc <__ssputs_r+0x5c>
 800bfa6:	230c      	movs	r3, #12
 800bfa8:	f04f 30ff 	mov.w	r0, #4294967295
 800bfac:	f8ca 3000 	str.w	r3, [sl]
 800bfb0:	89a3      	ldrh	r3, [r4, #12]
 800bfb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfb6:	81a3      	strh	r3, [r4, #12]
 800bfb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfbc:	464a      	mov	r2, r9
 800bfbe:	6921      	ldr	r1, [r4, #16]
 800bfc0:	f7fb ff7a 	bl	8007eb8 <memcpy>
 800bfc4:	89a3      	ldrh	r3, [r4, #12]
 800bfc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bfca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfce:	81a3      	strh	r3, [r4, #12]
 800bfd0:	6126      	str	r6, [r4, #16]
 800bfd2:	444e      	add	r6, r9
 800bfd4:	6026      	str	r6, [r4, #0]
 800bfd6:	463e      	mov	r6, r7
 800bfd8:	6165      	str	r5, [r4, #20]
 800bfda:	eba5 0509 	sub.w	r5, r5, r9
 800bfde:	60a5      	str	r5, [r4, #8]
 800bfe0:	42be      	cmp	r6, r7
 800bfe2:	d900      	bls.n	800bfe6 <__ssputs_r+0x86>
 800bfe4:	463e      	mov	r6, r7
 800bfe6:	4632      	mov	r2, r6
 800bfe8:	4641      	mov	r1, r8
 800bfea:	6820      	ldr	r0, [r4, #0]
 800bfec:	f000 fb6c 	bl	800c6c8 <memmove>
 800bff0:	68a3      	ldr	r3, [r4, #8]
 800bff2:	2000      	movs	r0, #0
 800bff4:	1b9b      	subs	r3, r3, r6
 800bff6:	60a3      	str	r3, [r4, #8]
 800bff8:	6823      	ldr	r3, [r4, #0]
 800bffa:	4433      	add	r3, r6
 800bffc:	6023      	str	r3, [r4, #0]
 800bffe:	e7db      	b.n	800bfb8 <__ssputs_r+0x58>
 800c000:	462a      	mov	r2, r5
 800c002:	f000 fb87 	bl	800c714 <_realloc_r>
 800c006:	4606      	mov	r6, r0
 800c008:	2800      	cmp	r0, #0
 800c00a:	d1e1      	bne.n	800bfd0 <__ssputs_r+0x70>
 800c00c:	4650      	mov	r0, sl
 800c00e:	6921      	ldr	r1, [r4, #16]
 800c010:	f7ff feca 	bl	800bda8 <_free_r>
 800c014:	e7c7      	b.n	800bfa6 <__ssputs_r+0x46>
	...

0800c018 <_svfiprintf_r>:
 800c018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c01c:	4698      	mov	r8, r3
 800c01e:	898b      	ldrh	r3, [r1, #12]
 800c020:	4607      	mov	r7, r0
 800c022:	061b      	lsls	r3, r3, #24
 800c024:	460d      	mov	r5, r1
 800c026:	4614      	mov	r4, r2
 800c028:	b09d      	sub	sp, #116	; 0x74
 800c02a:	d50e      	bpl.n	800c04a <_svfiprintf_r+0x32>
 800c02c:	690b      	ldr	r3, [r1, #16]
 800c02e:	b963      	cbnz	r3, 800c04a <_svfiprintf_r+0x32>
 800c030:	2140      	movs	r1, #64	; 0x40
 800c032:	f7ff ff21 	bl	800be78 <_malloc_r>
 800c036:	6028      	str	r0, [r5, #0]
 800c038:	6128      	str	r0, [r5, #16]
 800c03a:	b920      	cbnz	r0, 800c046 <_svfiprintf_r+0x2e>
 800c03c:	230c      	movs	r3, #12
 800c03e:	603b      	str	r3, [r7, #0]
 800c040:	f04f 30ff 	mov.w	r0, #4294967295
 800c044:	e0d1      	b.n	800c1ea <_svfiprintf_r+0x1d2>
 800c046:	2340      	movs	r3, #64	; 0x40
 800c048:	616b      	str	r3, [r5, #20]
 800c04a:	2300      	movs	r3, #0
 800c04c:	9309      	str	r3, [sp, #36]	; 0x24
 800c04e:	2320      	movs	r3, #32
 800c050:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c054:	2330      	movs	r3, #48	; 0x30
 800c056:	f04f 0901 	mov.w	r9, #1
 800c05a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c05e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c204 <_svfiprintf_r+0x1ec>
 800c062:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c066:	4623      	mov	r3, r4
 800c068:	469a      	mov	sl, r3
 800c06a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c06e:	b10a      	cbz	r2, 800c074 <_svfiprintf_r+0x5c>
 800c070:	2a25      	cmp	r2, #37	; 0x25
 800c072:	d1f9      	bne.n	800c068 <_svfiprintf_r+0x50>
 800c074:	ebba 0b04 	subs.w	fp, sl, r4
 800c078:	d00b      	beq.n	800c092 <_svfiprintf_r+0x7a>
 800c07a:	465b      	mov	r3, fp
 800c07c:	4622      	mov	r2, r4
 800c07e:	4629      	mov	r1, r5
 800c080:	4638      	mov	r0, r7
 800c082:	f7ff ff6d 	bl	800bf60 <__ssputs_r>
 800c086:	3001      	adds	r0, #1
 800c088:	f000 80aa 	beq.w	800c1e0 <_svfiprintf_r+0x1c8>
 800c08c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c08e:	445a      	add	r2, fp
 800c090:	9209      	str	r2, [sp, #36]	; 0x24
 800c092:	f89a 3000 	ldrb.w	r3, [sl]
 800c096:	2b00      	cmp	r3, #0
 800c098:	f000 80a2 	beq.w	800c1e0 <_svfiprintf_r+0x1c8>
 800c09c:	2300      	movs	r3, #0
 800c09e:	f04f 32ff 	mov.w	r2, #4294967295
 800c0a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0a6:	f10a 0a01 	add.w	sl, sl, #1
 800c0aa:	9304      	str	r3, [sp, #16]
 800c0ac:	9307      	str	r3, [sp, #28]
 800c0ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0b2:	931a      	str	r3, [sp, #104]	; 0x68
 800c0b4:	4654      	mov	r4, sl
 800c0b6:	2205      	movs	r2, #5
 800c0b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0bc:	4851      	ldr	r0, [pc, #324]	; (800c204 <_svfiprintf_r+0x1ec>)
 800c0be:	f7ff f999 	bl	800b3f4 <memchr>
 800c0c2:	9a04      	ldr	r2, [sp, #16]
 800c0c4:	b9d8      	cbnz	r0, 800c0fe <_svfiprintf_r+0xe6>
 800c0c6:	06d0      	lsls	r0, r2, #27
 800c0c8:	bf44      	itt	mi
 800c0ca:	2320      	movmi	r3, #32
 800c0cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0d0:	0711      	lsls	r1, r2, #28
 800c0d2:	bf44      	itt	mi
 800c0d4:	232b      	movmi	r3, #43	; 0x2b
 800c0d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0da:	f89a 3000 	ldrb.w	r3, [sl]
 800c0de:	2b2a      	cmp	r3, #42	; 0x2a
 800c0e0:	d015      	beq.n	800c10e <_svfiprintf_r+0xf6>
 800c0e2:	4654      	mov	r4, sl
 800c0e4:	2000      	movs	r0, #0
 800c0e6:	f04f 0c0a 	mov.w	ip, #10
 800c0ea:	9a07      	ldr	r2, [sp, #28]
 800c0ec:	4621      	mov	r1, r4
 800c0ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0f2:	3b30      	subs	r3, #48	; 0x30
 800c0f4:	2b09      	cmp	r3, #9
 800c0f6:	d94e      	bls.n	800c196 <_svfiprintf_r+0x17e>
 800c0f8:	b1b0      	cbz	r0, 800c128 <_svfiprintf_r+0x110>
 800c0fa:	9207      	str	r2, [sp, #28]
 800c0fc:	e014      	b.n	800c128 <_svfiprintf_r+0x110>
 800c0fe:	eba0 0308 	sub.w	r3, r0, r8
 800c102:	fa09 f303 	lsl.w	r3, r9, r3
 800c106:	4313      	orrs	r3, r2
 800c108:	46a2      	mov	sl, r4
 800c10a:	9304      	str	r3, [sp, #16]
 800c10c:	e7d2      	b.n	800c0b4 <_svfiprintf_r+0x9c>
 800c10e:	9b03      	ldr	r3, [sp, #12]
 800c110:	1d19      	adds	r1, r3, #4
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	9103      	str	r1, [sp, #12]
 800c116:	2b00      	cmp	r3, #0
 800c118:	bfbb      	ittet	lt
 800c11a:	425b      	neglt	r3, r3
 800c11c:	f042 0202 	orrlt.w	r2, r2, #2
 800c120:	9307      	strge	r3, [sp, #28]
 800c122:	9307      	strlt	r3, [sp, #28]
 800c124:	bfb8      	it	lt
 800c126:	9204      	strlt	r2, [sp, #16]
 800c128:	7823      	ldrb	r3, [r4, #0]
 800c12a:	2b2e      	cmp	r3, #46	; 0x2e
 800c12c:	d10c      	bne.n	800c148 <_svfiprintf_r+0x130>
 800c12e:	7863      	ldrb	r3, [r4, #1]
 800c130:	2b2a      	cmp	r3, #42	; 0x2a
 800c132:	d135      	bne.n	800c1a0 <_svfiprintf_r+0x188>
 800c134:	9b03      	ldr	r3, [sp, #12]
 800c136:	3402      	adds	r4, #2
 800c138:	1d1a      	adds	r2, r3, #4
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	9203      	str	r2, [sp, #12]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	bfb8      	it	lt
 800c142:	f04f 33ff 	movlt.w	r3, #4294967295
 800c146:	9305      	str	r3, [sp, #20]
 800c148:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c208 <_svfiprintf_r+0x1f0>
 800c14c:	2203      	movs	r2, #3
 800c14e:	4650      	mov	r0, sl
 800c150:	7821      	ldrb	r1, [r4, #0]
 800c152:	f7ff f94f 	bl	800b3f4 <memchr>
 800c156:	b140      	cbz	r0, 800c16a <_svfiprintf_r+0x152>
 800c158:	2340      	movs	r3, #64	; 0x40
 800c15a:	eba0 000a 	sub.w	r0, r0, sl
 800c15e:	fa03 f000 	lsl.w	r0, r3, r0
 800c162:	9b04      	ldr	r3, [sp, #16]
 800c164:	3401      	adds	r4, #1
 800c166:	4303      	orrs	r3, r0
 800c168:	9304      	str	r3, [sp, #16]
 800c16a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c16e:	2206      	movs	r2, #6
 800c170:	4826      	ldr	r0, [pc, #152]	; (800c20c <_svfiprintf_r+0x1f4>)
 800c172:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c176:	f7ff f93d 	bl	800b3f4 <memchr>
 800c17a:	2800      	cmp	r0, #0
 800c17c:	d038      	beq.n	800c1f0 <_svfiprintf_r+0x1d8>
 800c17e:	4b24      	ldr	r3, [pc, #144]	; (800c210 <_svfiprintf_r+0x1f8>)
 800c180:	bb1b      	cbnz	r3, 800c1ca <_svfiprintf_r+0x1b2>
 800c182:	9b03      	ldr	r3, [sp, #12]
 800c184:	3307      	adds	r3, #7
 800c186:	f023 0307 	bic.w	r3, r3, #7
 800c18a:	3308      	adds	r3, #8
 800c18c:	9303      	str	r3, [sp, #12]
 800c18e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c190:	4433      	add	r3, r6
 800c192:	9309      	str	r3, [sp, #36]	; 0x24
 800c194:	e767      	b.n	800c066 <_svfiprintf_r+0x4e>
 800c196:	460c      	mov	r4, r1
 800c198:	2001      	movs	r0, #1
 800c19a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c19e:	e7a5      	b.n	800c0ec <_svfiprintf_r+0xd4>
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	f04f 0c0a 	mov.w	ip, #10
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	3401      	adds	r4, #1
 800c1aa:	9305      	str	r3, [sp, #20]
 800c1ac:	4620      	mov	r0, r4
 800c1ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1b2:	3a30      	subs	r2, #48	; 0x30
 800c1b4:	2a09      	cmp	r2, #9
 800c1b6:	d903      	bls.n	800c1c0 <_svfiprintf_r+0x1a8>
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d0c5      	beq.n	800c148 <_svfiprintf_r+0x130>
 800c1bc:	9105      	str	r1, [sp, #20]
 800c1be:	e7c3      	b.n	800c148 <_svfiprintf_r+0x130>
 800c1c0:	4604      	mov	r4, r0
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1c8:	e7f0      	b.n	800c1ac <_svfiprintf_r+0x194>
 800c1ca:	ab03      	add	r3, sp, #12
 800c1cc:	9300      	str	r3, [sp, #0]
 800c1ce:	462a      	mov	r2, r5
 800c1d0:	4638      	mov	r0, r7
 800c1d2:	4b10      	ldr	r3, [pc, #64]	; (800c214 <_svfiprintf_r+0x1fc>)
 800c1d4:	a904      	add	r1, sp, #16
 800c1d6:	f7fb ff23 	bl	8008020 <_printf_float>
 800c1da:	1c42      	adds	r2, r0, #1
 800c1dc:	4606      	mov	r6, r0
 800c1de:	d1d6      	bne.n	800c18e <_svfiprintf_r+0x176>
 800c1e0:	89ab      	ldrh	r3, [r5, #12]
 800c1e2:	065b      	lsls	r3, r3, #25
 800c1e4:	f53f af2c 	bmi.w	800c040 <_svfiprintf_r+0x28>
 800c1e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1ea:	b01d      	add	sp, #116	; 0x74
 800c1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1f0:	ab03      	add	r3, sp, #12
 800c1f2:	9300      	str	r3, [sp, #0]
 800c1f4:	462a      	mov	r2, r5
 800c1f6:	4638      	mov	r0, r7
 800c1f8:	4b06      	ldr	r3, [pc, #24]	; (800c214 <_svfiprintf_r+0x1fc>)
 800c1fa:	a904      	add	r1, sp, #16
 800c1fc:	f7fc f9ac 	bl	8008558 <_printf_i>
 800c200:	e7eb      	b.n	800c1da <_svfiprintf_r+0x1c2>
 800c202:	bf00      	nop
 800c204:	0800d7a4 	.word	0x0800d7a4
 800c208:	0800d7aa 	.word	0x0800d7aa
 800c20c:	0800d7ae 	.word	0x0800d7ae
 800c210:	08008021 	.word	0x08008021
 800c214:	0800bf61 	.word	0x0800bf61

0800c218 <__sfputc_r>:
 800c218:	6893      	ldr	r3, [r2, #8]
 800c21a:	b410      	push	{r4}
 800c21c:	3b01      	subs	r3, #1
 800c21e:	2b00      	cmp	r3, #0
 800c220:	6093      	str	r3, [r2, #8]
 800c222:	da07      	bge.n	800c234 <__sfputc_r+0x1c>
 800c224:	6994      	ldr	r4, [r2, #24]
 800c226:	42a3      	cmp	r3, r4
 800c228:	db01      	blt.n	800c22e <__sfputc_r+0x16>
 800c22a:	290a      	cmp	r1, #10
 800c22c:	d102      	bne.n	800c234 <__sfputc_r+0x1c>
 800c22e:	bc10      	pop	{r4}
 800c230:	f7fd bc06 	b.w	8009a40 <__swbuf_r>
 800c234:	6813      	ldr	r3, [r2, #0]
 800c236:	1c58      	adds	r0, r3, #1
 800c238:	6010      	str	r0, [r2, #0]
 800c23a:	7019      	strb	r1, [r3, #0]
 800c23c:	4608      	mov	r0, r1
 800c23e:	bc10      	pop	{r4}
 800c240:	4770      	bx	lr

0800c242 <__sfputs_r>:
 800c242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c244:	4606      	mov	r6, r0
 800c246:	460f      	mov	r7, r1
 800c248:	4614      	mov	r4, r2
 800c24a:	18d5      	adds	r5, r2, r3
 800c24c:	42ac      	cmp	r4, r5
 800c24e:	d101      	bne.n	800c254 <__sfputs_r+0x12>
 800c250:	2000      	movs	r0, #0
 800c252:	e007      	b.n	800c264 <__sfputs_r+0x22>
 800c254:	463a      	mov	r2, r7
 800c256:	4630      	mov	r0, r6
 800c258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c25c:	f7ff ffdc 	bl	800c218 <__sfputc_r>
 800c260:	1c43      	adds	r3, r0, #1
 800c262:	d1f3      	bne.n	800c24c <__sfputs_r+0xa>
 800c264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c268 <_vfiprintf_r>:
 800c268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c26c:	460d      	mov	r5, r1
 800c26e:	4614      	mov	r4, r2
 800c270:	4698      	mov	r8, r3
 800c272:	4606      	mov	r6, r0
 800c274:	b09d      	sub	sp, #116	; 0x74
 800c276:	b118      	cbz	r0, 800c280 <_vfiprintf_r+0x18>
 800c278:	6983      	ldr	r3, [r0, #24]
 800c27a:	b90b      	cbnz	r3, 800c280 <_vfiprintf_r+0x18>
 800c27c:	f7fe fc30 	bl	800aae0 <__sinit>
 800c280:	4b89      	ldr	r3, [pc, #548]	; (800c4a8 <_vfiprintf_r+0x240>)
 800c282:	429d      	cmp	r5, r3
 800c284:	d11b      	bne.n	800c2be <_vfiprintf_r+0x56>
 800c286:	6875      	ldr	r5, [r6, #4]
 800c288:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c28a:	07d9      	lsls	r1, r3, #31
 800c28c:	d405      	bmi.n	800c29a <_vfiprintf_r+0x32>
 800c28e:	89ab      	ldrh	r3, [r5, #12]
 800c290:	059a      	lsls	r2, r3, #22
 800c292:	d402      	bmi.n	800c29a <_vfiprintf_r+0x32>
 800c294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c296:	f7ff f82c 	bl	800b2f2 <__retarget_lock_acquire_recursive>
 800c29a:	89ab      	ldrh	r3, [r5, #12]
 800c29c:	071b      	lsls	r3, r3, #28
 800c29e:	d501      	bpl.n	800c2a4 <_vfiprintf_r+0x3c>
 800c2a0:	692b      	ldr	r3, [r5, #16]
 800c2a2:	b9eb      	cbnz	r3, 800c2e0 <_vfiprintf_r+0x78>
 800c2a4:	4629      	mov	r1, r5
 800c2a6:	4630      	mov	r0, r6
 800c2a8:	f7fd fc1c 	bl	8009ae4 <__swsetup_r>
 800c2ac:	b1c0      	cbz	r0, 800c2e0 <_vfiprintf_r+0x78>
 800c2ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2b0:	07dc      	lsls	r4, r3, #31
 800c2b2:	d50e      	bpl.n	800c2d2 <_vfiprintf_r+0x6a>
 800c2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b8:	b01d      	add	sp, #116	; 0x74
 800c2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2be:	4b7b      	ldr	r3, [pc, #492]	; (800c4ac <_vfiprintf_r+0x244>)
 800c2c0:	429d      	cmp	r5, r3
 800c2c2:	d101      	bne.n	800c2c8 <_vfiprintf_r+0x60>
 800c2c4:	68b5      	ldr	r5, [r6, #8]
 800c2c6:	e7df      	b.n	800c288 <_vfiprintf_r+0x20>
 800c2c8:	4b79      	ldr	r3, [pc, #484]	; (800c4b0 <_vfiprintf_r+0x248>)
 800c2ca:	429d      	cmp	r5, r3
 800c2cc:	bf08      	it	eq
 800c2ce:	68f5      	ldreq	r5, [r6, #12]
 800c2d0:	e7da      	b.n	800c288 <_vfiprintf_r+0x20>
 800c2d2:	89ab      	ldrh	r3, [r5, #12]
 800c2d4:	0598      	lsls	r0, r3, #22
 800c2d6:	d4ed      	bmi.n	800c2b4 <_vfiprintf_r+0x4c>
 800c2d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2da:	f7ff f80b 	bl	800b2f4 <__retarget_lock_release_recursive>
 800c2de:	e7e9      	b.n	800c2b4 <_vfiprintf_r+0x4c>
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	9309      	str	r3, [sp, #36]	; 0x24
 800c2e4:	2320      	movs	r3, #32
 800c2e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2ea:	2330      	movs	r3, #48	; 0x30
 800c2ec:	f04f 0901 	mov.w	r9, #1
 800c2f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2f4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c4b4 <_vfiprintf_r+0x24c>
 800c2f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2fc:	4623      	mov	r3, r4
 800c2fe:	469a      	mov	sl, r3
 800c300:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c304:	b10a      	cbz	r2, 800c30a <_vfiprintf_r+0xa2>
 800c306:	2a25      	cmp	r2, #37	; 0x25
 800c308:	d1f9      	bne.n	800c2fe <_vfiprintf_r+0x96>
 800c30a:	ebba 0b04 	subs.w	fp, sl, r4
 800c30e:	d00b      	beq.n	800c328 <_vfiprintf_r+0xc0>
 800c310:	465b      	mov	r3, fp
 800c312:	4622      	mov	r2, r4
 800c314:	4629      	mov	r1, r5
 800c316:	4630      	mov	r0, r6
 800c318:	f7ff ff93 	bl	800c242 <__sfputs_r>
 800c31c:	3001      	adds	r0, #1
 800c31e:	f000 80aa 	beq.w	800c476 <_vfiprintf_r+0x20e>
 800c322:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c324:	445a      	add	r2, fp
 800c326:	9209      	str	r2, [sp, #36]	; 0x24
 800c328:	f89a 3000 	ldrb.w	r3, [sl]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	f000 80a2 	beq.w	800c476 <_vfiprintf_r+0x20e>
 800c332:	2300      	movs	r3, #0
 800c334:	f04f 32ff 	mov.w	r2, #4294967295
 800c338:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c33c:	f10a 0a01 	add.w	sl, sl, #1
 800c340:	9304      	str	r3, [sp, #16]
 800c342:	9307      	str	r3, [sp, #28]
 800c344:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c348:	931a      	str	r3, [sp, #104]	; 0x68
 800c34a:	4654      	mov	r4, sl
 800c34c:	2205      	movs	r2, #5
 800c34e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c352:	4858      	ldr	r0, [pc, #352]	; (800c4b4 <_vfiprintf_r+0x24c>)
 800c354:	f7ff f84e 	bl	800b3f4 <memchr>
 800c358:	9a04      	ldr	r2, [sp, #16]
 800c35a:	b9d8      	cbnz	r0, 800c394 <_vfiprintf_r+0x12c>
 800c35c:	06d1      	lsls	r1, r2, #27
 800c35e:	bf44      	itt	mi
 800c360:	2320      	movmi	r3, #32
 800c362:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c366:	0713      	lsls	r3, r2, #28
 800c368:	bf44      	itt	mi
 800c36a:	232b      	movmi	r3, #43	; 0x2b
 800c36c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c370:	f89a 3000 	ldrb.w	r3, [sl]
 800c374:	2b2a      	cmp	r3, #42	; 0x2a
 800c376:	d015      	beq.n	800c3a4 <_vfiprintf_r+0x13c>
 800c378:	4654      	mov	r4, sl
 800c37a:	2000      	movs	r0, #0
 800c37c:	f04f 0c0a 	mov.w	ip, #10
 800c380:	9a07      	ldr	r2, [sp, #28]
 800c382:	4621      	mov	r1, r4
 800c384:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c388:	3b30      	subs	r3, #48	; 0x30
 800c38a:	2b09      	cmp	r3, #9
 800c38c:	d94e      	bls.n	800c42c <_vfiprintf_r+0x1c4>
 800c38e:	b1b0      	cbz	r0, 800c3be <_vfiprintf_r+0x156>
 800c390:	9207      	str	r2, [sp, #28]
 800c392:	e014      	b.n	800c3be <_vfiprintf_r+0x156>
 800c394:	eba0 0308 	sub.w	r3, r0, r8
 800c398:	fa09 f303 	lsl.w	r3, r9, r3
 800c39c:	4313      	orrs	r3, r2
 800c39e:	46a2      	mov	sl, r4
 800c3a0:	9304      	str	r3, [sp, #16]
 800c3a2:	e7d2      	b.n	800c34a <_vfiprintf_r+0xe2>
 800c3a4:	9b03      	ldr	r3, [sp, #12]
 800c3a6:	1d19      	adds	r1, r3, #4
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	9103      	str	r1, [sp, #12]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	bfbb      	ittet	lt
 800c3b0:	425b      	neglt	r3, r3
 800c3b2:	f042 0202 	orrlt.w	r2, r2, #2
 800c3b6:	9307      	strge	r3, [sp, #28]
 800c3b8:	9307      	strlt	r3, [sp, #28]
 800c3ba:	bfb8      	it	lt
 800c3bc:	9204      	strlt	r2, [sp, #16]
 800c3be:	7823      	ldrb	r3, [r4, #0]
 800c3c0:	2b2e      	cmp	r3, #46	; 0x2e
 800c3c2:	d10c      	bne.n	800c3de <_vfiprintf_r+0x176>
 800c3c4:	7863      	ldrb	r3, [r4, #1]
 800c3c6:	2b2a      	cmp	r3, #42	; 0x2a
 800c3c8:	d135      	bne.n	800c436 <_vfiprintf_r+0x1ce>
 800c3ca:	9b03      	ldr	r3, [sp, #12]
 800c3cc:	3402      	adds	r4, #2
 800c3ce:	1d1a      	adds	r2, r3, #4
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	9203      	str	r2, [sp, #12]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	bfb8      	it	lt
 800c3d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3dc:	9305      	str	r3, [sp, #20]
 800c3de:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800c4b8 <_vfiprintf_r+0x250>
 800c3e2:	2203      	movs	r2, #3
 800c3e4:	4650      	mov	r0, sl
 800c3e6:	7821      	ldrb	r1, [r4, #0]
 800c3e8:	f7ff f804 	bl	800b3f4 <memchr>
 800c3ec:	b140      	cbz	r0, 800c400 <_vfiprintf_r+0x198>
 800c3ee:	2340      	movs	r3, #64	; 0x40
 800c3f0:	eba0 000a 	sub.w	r0, r0, sl
 800c3f4:	fa03 f000 	lsl.w	r0, r3, r0
 800c3f8:	9b04      	ldr	r3, [sp, #16]
 800c3fa:	3401      	adds	r4, #1
 800c3fc:	4303      	orrs	r3, r0
 800c3fe:	9304      	str	r3, [sp, #16]
 800c400:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c404:	2206      	movs	r2, #6
 800c406:	482d      	ldr	r0, [pc, #180]	; (800c4bc <_vfiprintf_r+0x254>)
 800c408:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c40c:	f7fe fff2 	bl	800b3f4 <memchr>
 800c410:	2800      	cmp	r0, #0
 800c412:	d03f      	beq.n	800c494 <_vfiprintf_r+0x22c>
 800c414:	4b2a      	ldr	r3, [pc, #168]	; (800c4c0 <_vfiprintf_r+0x258>)
 800c416:	bb1b      	cbnz	r3, 800c460 <_vfiprintf_r+0x1f8>
 800c418:	9b03      	ldr	r3, [sp, #12]
 800c41a:	3307      	adds	r3, #7
 800c41c:	f023 0307 	bic.w	r3, r3, #7
 800c420:	3308      	adds	r3, #8
 800c422:	9303      	str	r3, [sp, #12]
 800c424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c426:	443b      	add	r3, r7
 800c428:	9309      	str	r3, [sp, #36]	; 0x24
 800c42a:	e767      	b.n	800c2fc <_vfiprintf_r+0x94>
 800c42c:	460c      	mov	r4, r1
 800c42e:	2001      	movs	r0, #1
 800c430:	fb0c 3202 	mla	r2, ip, r2, r3
 800c434:	e7a5      	b.n	800c382 <_vfiprintf_r+0x11a>
 800c436:	2300      	movs	r3, #0
 800c438:	f04f 0c0a 	mov.w	ip, #10
 800c43c:	4619      	mov	r1, r3
 800c43e:	3401      	adds	r4, #1
 800c440:	9305      	str	r3, [sp, #20]
 800c442:	4620      	mov	r0, r4
 800c444:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c448:	3a30      	subs	r2, #48	; 0x30
 800c44a:	2a09      	cmp	r2, #9
 800c44c:	d903      	bls.n	800c456 <_vfiprintf_r+0x1ee>
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d0c5      	beq.n	800c3de <_vfiprintf_r+0x176>
 800c452:	9105      	str	r1, [sp, #20]
 800c454:	e7c3      	b.n	800c3de <_vfiprintf_r+0x176>
 800c456:	4604      	mov	r4, r0
 800c458:	2301      	movs	r3, #1
 800c45a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c45e:	e7f0      	b.n	800c442 <_vfiprintf_r+0x1da>
 800c460:	ab03      	add	r3, sp, #12
 800c462:	9300      	str	r3, [sp, #0]
 800c464:	462a      	mov	r2, r5
 800c466:	4630      	mov	r0, r6
 800c468:	4b16      	ldr	r3, [pc, #88]	; (800c4c4 <_vfiprintf_r+0x25c>)
 800c46a:	a904      	add	r1, sp, #16
 800c46c:	f7fb fdd8 	bl	8008020 <_printf_float>
 800c470:	4607      	mov	r7, r0
 800c472:	1c78      	adds	r0, r7, #1
 800c474:	d1d6      	bne.n	800c424 <_vfiprintf_r+0x1bc>
 800c476:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c478:	07d9      	lsls	r1, r3, #31
 800c47a:	d405      	bmi.n	800c488 <_vfiprintf_r+0x220>
 800c47c:	89ab      	ldrh	r3, [r5, #12]
 800c47e:	059a      	lsls	r2, r3, #22
 800c480:	d402      	bmi.n	800c488 <_vfiprintf_r+0x220>
 800c482:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c484:	f7fe ff36 	bl	800b2f4 <__retarget_lock_release_recursive>
 800c488:	89ab      	ldrh	r3, [r5, #12]
 800c48a:	065b      	lsls	r3, r3, #25
 800c48c:	f53f af12 	bmi.w	800c2b4 <_vfiprintf_r+0x4c>
 800c490:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c492:	e711      	b.n	800c2b8 <_vfiprintf_r+0x50>
 800c494:	ab03      	add	r3, sp, #12
 800c496:	9300      	str	r3, [sp, #0]
 800c498:	462a      	mov	r2, r5
 800c49a:	4630      	mov	r0, r6
 800c49c:	4b09      	ldr	r3, [pc, #36]	; (800c4c4 <_vfiprintf_r+0x25c>)
 800c49e:	a904      	add	r1, sp, #16
 800c4a0:	f7fc f85a 	bl	8008558 <_printf_i>
 800c4a4:	e7e4      	b.n	800c470 <_vfiprintf_r+0x208>
 800c4a6:	bf00      	nop
 800c4a8:	0800d58c 	.word	0x0800d58c
 800c4ac:	0800d5ac 	.word	0x0800d5ac
 800c4b0:	0800d56c 	.word	0x0800d56c
 800c4b4:	0800d7a4 	.word	0x0800d7a4
 800c4b8:	0800d7aa 	.word	0x0800d7aa
 800c4bc:	0800d7ae 	.word	0x0800d7ae
 800c4c0:	08008021 	.word	0x08008021
 800c4c4:	0800c243 	.word	0x0800c243

0800c4c8 <nan>:
 800c4c8:	2000      	movs	r0, #0
 800c4ca:	4901      	ldr	r1, [pc, #4]	; (800c4d0 <nan+0x8>)
 800c4cc:	4770      	bx	lr
 800c4ce:	bf00      	nop
 800c4d0:	7ff80000 	.word	0x7ff80000

0800c4d4 <_sbrk_r>:
 800c4d4:	b538      	push	{r3, r4, r5, lr}
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	4d05      	ldr	r5, [pc, #20]	; (800c4f0 <_sbrk_r+0x1c>)
 800c4da:	4604      	mov	r4, r0
 800c4dc:	4608      	mov	r0, r1
 800c4de:	602b      	str	r3, [r5, #0]
 800c4e0:	f7f5 fff6 	bl	80024d0 <_sbrk>
 800c4e4:	1c43      	adds	r3, r0, #1
 800c4e6:	d102      	bne.n	800c4ee <_sbrk_r+0x1a>
 800c4e8:	682b      	ldr	r3, [r5, #0]
 800c4ea:	b103      	cbz	r3, 800c4ee <_sbrk_r+0x1a>
 800c4ec:	6023      	str	r3, [r4, #0]
 800c4ee:	bd38      	pop	{r3, r4, r5, pc}
 800c4f0:	20000d7c 	.word	0x20000d7c

0800c4f4 <__sread>:
 800c4f4:	b510      	push	{r4, lr}
 800c4f6:	460c      	mov	r4, r1
 800c4f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4fc:	f000 f93a 	bl	800c774 <_read_r>
 800c500:	2800      	cmp	r0, #0
 800c502:	bfab      	itete	ge
 800c504:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c506:	89a3      	ldrhlt	r3, [r4, #12]
 800c508:	181b      	addge	r3, r3, r0
 800c50a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c50e:	bfac      	ite	ge
 800c510:	6563      	strge	r3, [r4, #84]	; 0x54
 800c512:	81a3      	strhlt	r3, [r4, #12]
 800c514:	bd10      	pop	{r4, pc}

0800c516 <__swrite>:
 800c516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c51a:	461f      	mov	r7, r3
 800c51c:	898b      	ldrh	r3, [r1, #12]
 800c51e:	4605      	mov	r5, r0
 800c520:	05db      	lsls	r3, r3, #23
 800c522:	460c      	mov	r4, r1
 800c524:	4616      	mov	r6, r2
 800c526:	d505      	bpl.n	800c534 <__swrite+0x1e>
 800c528:	2302      	movs	r3, #2
 800c52a:	2200      	movs	r2, #0
 800c52c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c530:	f000 f8b8 	bl	800c6a4 <_lseek_r>
 800c534:	89a3      	ldrh	r3, [r4, #12]
 800c536:	4632      	mov	r2, r6
 800c538:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c53c:	81a3      	strh	r3, [r4, #12]
 800c53e:	4628      	mov	r0, r5
 800c540:	463b      	mov	r3, r7
 800c542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c54a:	f000 b837 	b.w	800c5bc <_write_r>

0800c54e <__sseek>:
 800c54e:	b510      	push	{r4, lr}
 800c550:	460c      	mov	r4, r1
 800c552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c556:	f000 f8a5 	bl	800c6a4 <_lseek_r>
 800c55a:	1c43      	adds	r3, r0, #1
 800c55c:	89a3      	ldrh	r3, [r4, #12]
 800c55e:	bf15      	itete	ne
 800c560:	6560      	strne	r0, [r4, #84]	; 0x54
 800c562:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c566:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c56a:	81a3      	strheq	r3, [r4, #12]
 800c56c:	bf18      	it	ne
 800c56e:	81a3      	strhne	r3, [r4, #12]
 800c570:	bd10      	pop	{r4, pc}

0800c572 <__sclose>:
 800c572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c576:	f000 b851 	b.w	800c61c <_close_r>

0800c57a <strncmp>:
 800c57a:	4603      	mov	r3, r0
 800c57c:	b510      	push	{r4, lr}
 800c57e:	b172      	cbz	r2, 800c59e <strncmp+0x24>
 800c580:	3901      	subs	r1, #1
 800c582:	1884      	adds	r4, r0, r2
 800c584:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c588:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c58c:	4290      	cmp	r0, r2
 800c58e:	d101      	bne.n	800c594 <strncmp+0x1a>
 800c590:	42a3      	cmp	r3, r4
 800c592:	d101      	bne.n	800c598 <strncmp+0x1e>
 800c594:	1a80      	subs	r0, r0, r2
 800c596:	bd10      	pop	{r4, pc}
 800c598:	2800      	cmp	r0, #0
 800c59a:	d1f3      	bne.n	800c584 <strncmp+0xa>
 800c59c:	e7fa      	b.n	800c594 <strncmp+0x1a>
 800c59e:	4610      	mov	r0, r2
 800c5a0:	e7f9      	b.n	800c596 <strncmp+0x1c>

0800c5a2 <__ascii_wctomb>:
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	4608      	mov	r0, r1
 800c5a6:	b141      	cbz	r1, 800c5ba <__ascii_wctomb+0x18>
 800c5a8:	2aff      	cmp	r2, #255	; 0xff
 800c5aa:	d904      	bls.n	800c5b6 <__ascii_wctomb+0x14>
 800c5ac:	228a      	movs	r2, #138	; 0x8a
 800c5ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c5b2:	601a      	str	r2, [r3, #0]
 800c5b4:	4770      	bx	lr
 800c5b6:	2001      	movs	r0, #1
 800c5b8:	700a      	strb	r2, [r1, #0]
 800c5ba:	4770      	bx	lr

0800c5bc <_write_r>:
 800c5bc:	b538      	push	{r3, r4, r5, lr}
 800c5be:	4604      	mov	r4, r0
 800c5c0:	4608      	mov	r0, r1
 800c5c2:	4611      	mov	r1, r2
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	4d05      	ldr	r5, [pc, #20]	; (800c5dc <_write_r+0x20>)
 800c5c8:	602a      	str	r2, [r5, #0]
 800c5ca:	461a      	mov	r2, r3
 800c5cc:	f7f5 ff34 	bl	8002438 <_write>
 800c5d0:	1c43      	adds	r3, r0, #1
 800c5d2:	d102      	bne.n	800c5da <_write_r+0x1e>
 800c5d4:	682b      	ldr	r3, [r5, #0]
 800c5d6:	b103      	cbz	r3, 800c5da <_write_r+0x1e>
 800c5d8:	6023      	str	r3, [r4, #0]
 800c5da:	bd38      	pop	{r3, r4, r5, pc}
 800c5dc:	20000d7c 	.word	0x20000d7c

0800c5e0 <__assert_func>:
 800c5e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5e2:	4614      	mov	r4, r2
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	4b09      	ldr	r3, [pc, #36]	; (800c60c <__assert_func+0x2c>)
 800c5e8:	4605      	mov	r5, r0
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	68d8      	ldr	r0, [r3, #12]
 800c5ee:	b14c      	cbz	r4, 800c604 <__assert_func+0x24>
 800c5f0:	4b07      	ldr	r3, [pc, #28]	; (800c610 <__assert_func+0x30>)
 800c5f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5f6:	9100      	str	r1, [sp, #0]
 800c5f8:	462b      	mov	r3, r5
 800c5fa:	4906      	ldr	r1, [pc, #24]	; (800c614 <__assert_func+0x34>)
 800c5fc:	f000 f81e 	bl	800c63c <fiprintf>
 800c600:	f000 f8ca 	bl	800c798 <abort>
 800c604:	4b04      	ldr	r3, [pc, #16]	; (800c618 <__assert_func+0x38>)
 800c606:	461c      	mov	r4, r3
 800c608:	e7f3      	b.n	800c5f2 <__assert_func+0x12>
 800c60a:	bf00      	nop
 800c60c:	2000002c 	.word	0x2000002c
 800c610:	0800d7b5 	.word	0x0800d7b5
 800c614:	0800d7c2 	.word	0x0800d7c2
 800c618:	0800d7f0 	.word	0x0800d7f0

0800c61c <_close_r>:
 800c61c:	b538      	push	{r3, r4, r5, lr}
 800c61e:	2300      	movs	r3, #0
 800c620:	4d05      	ldr	r5, [pc, #20]	; (800c638 <_close_r+0x1c>)
 800c622:	4604      	mov	r4, r0
 800c624:	4608      	mov	r0, r1
 800c626:	602b      	str	r3, [r5, #0]
 800c628:	f7f5 ff22 	bl	8002470 <_close>
 800c62c:	1c43      	adds	r3, r0, #1
 800c62e:	d102      	bne.n	800c636 <_close_r+0x1a>
 800c630:	682b      	ldr	r3, [r5, #0]
 800c632:	b103      	cbz	r3, 800c636 <_close_r+0x1a>
 800c634:	6023      	str	r3, [r4, #0]
 800c636:	bd38      	pop	{r3, r4, r5, pc}
 800c638:	20000d7c 	.word	0x20000d7c

0800c63c <fiprintf>:
 800c63c:	b40e      	push	{r1, r2, r3}
 800c63e:	b503      	push	{r0, r1, lr}
 800c640:	4601      	mov	r1, r0
 800c642:	ab03      	add	r3, sp, #12
 800c644:	4805      	ldr	r0, [pc, #20]	; (800c65c <fiprintf+0x20>)
 800c646:	f853 2b04 	ldr.w	r2, [r3], #4
 800c64a:	6800      	ldr	r0, [r0, #0]
 800c64c:	9301      	str	r3, [sp, #4]
 800c64e:	f7ff fe0b 	bl	800c268 <_vfiprintf_r>
 800c652:	b002      	add	sp, #8
 800c654:	f85d eb04 	ldr.w	lr, [sp], #4
 800c658:	b003      	add	sp, #12
 800c65a:	4770      	bx	lr
 800c65c:	2000002c 	.word	0x2000002c

0800c660 <_fstat_r>:
 800c660:	b538      	push	{r3, r4, r5, lr}
 800c662:	2300      	movs	r3, #0
 800c664:	4d06      	ldr	r5, [pc, #24]	; (800c680 <_fstat_r+0x20>)
 800c666:	4604      	mov	r4, r0
 800c668:	4608      	mov	r0, r1
 800c66a:	4611      	mov	r1, r2
 800c66c:	602b      	str	r3, [r5, #0]
 800c66e:	f7f5 ff0a 	bl	8002486 <_fstat>
 800c672:	1c43      	adds	r3, r0, #1
 800c674:	d102      	bne.n	800c67c <_fstat_r+0x1c>
 800c676:	682b      	ldr	r3, [r5, #0]
 800c678:	b103      	cbz	r3, 800c67c <_fstat_r+0x1c>
 800c67a:	6023      	str	r3, [r4, #0]
 800c67c:	bd38      	pop	{r3, r4, r5, pc}
 800c67e:	bf00      	nop
 800c680:	20000d7c 	.word	0x20000d7c

0800c684 <_isatty_r>:
 800c684:	b538      	push	{r3, r4, r5, lr}
 800c686:	2300      	movs	r3, #0
 800c688:	4d05      	ldr	r5, [pc, #20]	; (800c6a0 <_isatty_r+0x1c>)
 800c68a:	4604      	mov	r4, r0
 800c68c:	4608      	mov	r0, r1
 800c68e:	602b      	str	r3, [r5, #0]
 800c690:	f7f5 ff08 	bl	80024a4 <_isatty>
 800c694:	1c43      	adds	r3, r0, #1
 800c696:	d102      	bne.n	800c69e <_isatty_r+0x1a>
 800c698:	682b      	ldr	r3, [r5, #0]
 800c69a:	b103      	cbz	r3, 800c69e <_isatty_r+0x1a>
 800c69c:	6023      	str	r3, [r4, #0]
 800c69e:	bd38      	pop	{r3, r4, r5, pc}
 800c6a0:	20000d7c 	.word	0x20000d7c

0800c6a4 <_lseek_r>:
 800c6a4:	b538      	push	{r3, r4, r5, lr}
 800c6a6:	4604      	mov	r4, r0
 800c6a8:	4608      	mov	r0, r1
 800c6aa:	4611      	mov	r1, r2
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	4d05      	ldr	r5, [pc, #20]	; (800c6c4 <_lseek_r+0x20>)
 800c6b0:	602a      	str	r2, [r5, #0]
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	f7f5 ff00 	bl	80024b8 <_lseek>
 800c6b8:	1c43      	adds	r3, r0, #1
 800c6ba:	d102      	bne.n	800c6c2 <_lseek_r+0x1e>
 800c6bc:	682b      	ldr	r3, [r5, #0]
 800c6be:	b103      	cbz	r3, 800c6c2 <_lseek_r+0x1e>
 800c6c0:	6023      	str	r3, [r4, #0]
 800c6c2:	bd38      	pop	{r3, r4, r5, pc}
 800c6c4:	20000d7c 	.word	0x20000d7c

0800c6c8 <memmove>:
 800c6c8:	4288      	cmp	r0, r1
 800c6ca:	b510      	push	{r4, lr}
 800c6cc:	eb01 0402 	add.w	r4, r1, r2
 800c6d0:	d902      	bls.n	800c6d8 <memmove+0x10>
 800c6d2:	4284      	cmp	r4, r0
 800c6d4:	4623      	mov	r3, r4
 800c6d6:	d807      	bhi.n	800c6e8 <memmove+0x20>
 800c6d8:	1e43      	subs	r3, r0, #1
 800c6da:	42a1      	cmp	r1, r4
 800c6dc:	d008      	beq.n	800c6f0 <memmove+0x28>
 800c6de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6e6:	e7f8      	b.n	800c6da <memmove+0x12>
 800c6e8:	4601      	mov	r1, r0
 800c6ea:	4402      	add	r2, r0
 800c6ec:	428a      	cmp	r2, r1
 800c6ee:	d100      	bne.n	800c6f2 <memmove+0x2a>
 800c6f0:	bd10      	pop	{r4, pc}
 800c6f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c6fa:	e7f7      	b.n	800c6ec <memmove+0x24>

0800c6fc <__malloc_lock>:
 800c6fc:	4801      	ldr	r0, [pc, #4]	; (800c704 <__malloc_lock+0x8>)
 800c6fe:	f7fe bdf8 	b.w	800b2f2 <__retarget_lock_acquire_recursive>
 800c702:	bf00      	nop
 800c704:	20000d70 	.word	0x20000d70

0800c708 <__malloc_unlock>:
 800c708:	4801      	ldr	r0, [pc, #4]	; (800c710 <__malloc_unlock+0x8>)
 800c70a:	f7fe bdf3 	b.w	800b2f4 <__retarget_lock_release_recursive>
 800c70e:	bf00      	nop
 800c710:	20000d70 	.word	0x20000d70

0800c714 <_realloc_r>:
 800c714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c718:	4680      	mov	r8, r0
 800c71a:	4614      	mov	r4, r2
 800c71c:	460e      	mov	r6, r1
 800c71e:	b921      	cbnz	r1, 800c72a <_realloc_r+0x16>
 800c720:	4611      	mov	r1, r2
 800c722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c726:	f7ff bba7 	b.w	800be78 <_malloc_r>
 800c72a:	b92a      	cbnz	r2, 800c738 <_realloc_r+0x24>
 800c72c:	f7ff fb3c 	bl	800bda8 <_free_r>
 800c730:	4625      	mov	r5, r4
 800c732:	4628      	mov	r0, r5
 800c734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c738:	f000 f835 	bl	800c7a6 <_malloc_usable_size_r>
 800c73c:	4284      	cmp	r4, r0
 800c73e:	4607      	mov	r7, r0
 800c740:	d802      	bhi.n	800c748 <_realloc_r+0x34>
 800c742:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c746:	d812      	bhi.n	800c76e <_realloc_r+0x5a>
 800c748:	4621      	mov	r1, r4
 800c74a:	4640      	mov	r0, r8
 800c74c:	f7ff fb94 	bl	800be78 <_malloc_r>
 800c750:	4605      	mov	r5, r0
 800c752:	2800      	cmp	r0, #0
 800c754:	d0ed      	beq.n	800c732 <_realloc_r+0x1e>
 800c756:	42bc      	cmp	r4, r7
 800c758:	4622      	mov	r2, r4
 800c75a:	4631      	mov	r1, r6
 800c75c:	bf28      	it	cs
 800c75e:	463a      	movcs	r2, r7
 800c760:	f7fb fbaa 	bl	8007eb8 <memcpy>
 800c764:	4631      	mov	r1, r6
 800c766:	4640      	mov	r0, r8
 800c768:	f7ff fb1e 	bl	800bda8 <_free_r>
 800c76c:	e7e1      	b.n	800c732 <_realloc_r+0x1e>
 800c76e:	4635      	mov	r5, r6
 800c770:	e7df      	b.n	800c732 <_realloc_r+0x1e>
	...

0800c774 <_read_r>:
 800c774:	b538      	push	{r3, r4, r5, lr}
 800c776:	4604      	mov	r4, r0
 800c778:	4608      	mov	r0, r1
 800c77a:	4611      	mov	r1, r2
 800c77c:	2200      	movs	r2, #0
 800c77e:	4d05      	ldr	r5, [pc, #20]	; (800c794 <_read_r+0x20>)
 800c780:	602a      	str	r2, [r5, #0]
 800c782:	461a      	mov	r2, r3
 800c784:	f7f5 fe3b 	bl	80023fe <_read>
 800c788:	1c43      	adds	r3, r0, #1
 800c78a:	d102      	bne.n	800c792 <_read_r+0x1e>
 800c78c:	682b      	ldr	r3, [r5, #0]
 800c78e:	b103      	cbz	r3, 800c792 <_read_r+0x1e>
 800c790:	6023      	str	r3, [r4, #0]
 800c792:	bd38      	pop	{r3, r4, r5, pc}
 800c794:	20000d7c 	.word	0x20000d7c

0800c798 <abort>:
 800c798:	2006      	movs	r0, #6
 800c79a:	b508      	push	{r3, lr}
 800c79c:	f000 f834 	bl	800c808 <raise>
 800c7a0:	2001      	movs	r0, #1
 800c7a2:	f7f5 fe22 	bl	80023ea <_exit>

0800c7a6 <_malloc_usable_size_r>:
 800c7a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7aa:	1f18      	subs	r0, r3, #4
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	bfbc      	itt	lt
 800c7b0:	580b      	ldrlt	r3, [r1, r0]
 800c7b2:	18c0      	addlt	r0, r0, r3
 800c7b4:	4770      	bx	lr

0800c7b6 <_raise_r>:
 800c7b6:	291f      	cmp	r1, #31
 800c7b8:	b538      	push	{r3, r4, r5, lr}
 800c7ba:	4604      	mov	r4, r0
 800c7bc:	460d      	mov	r5, r1
 800c7be:	d904      	bls.n	800c7ca <_raise_r+0x14>
 800c7c0:	2316      	movs	r3, #22
 800c7c2:	6003      	str	r3, [r0, #0]
 800c7c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c7c8:	bd38      	pop	{r3, r4, r5, pc}
 800c7ca:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c7cc:	b112      	cbz	r2, 800c7d4 <_raise_r+0x1e>
 800c7ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c7d2:	b94b      	cbnz	r3, 800c7e8 <_raise_r+0x32>
 800c7d4:	4620      	mov	r0, r4
 800c7d6:	f000 f831 	bl	800c83c <_getpid_r>
 800c7da:	462a      	mov	r2, r5
 800c7dc:	4601      	mov	r1, r0
 800c7de:	4620      	mov	r0, r4
 800c7e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7e4:	f000 b818 	b.w	800c818 <_kill_r>
 800c7e8:	2b01      	cmp	r3, #1
 800c7ea:	d00a      	beq.n	800c802 <_raise_r+0x4c>
 800c7ec:	1c59      	adds	r1, r3, #1
 800c7ee:	d103      	bne.n	800c7f8 <_raise_r+0x42>
 800c7f0:	2316      	movs	r3, #22
 800c7f2:	6003      	str	r3, [r0, #0]
 800c7f4:	2001      	movs	r0, #1
 800c7f6:	e7e7      	b.n	800c7c8 <_raise_r+0x12>
 800c7f8:	2400      	movs	r4, #0
 800c7fa:	4628      	mov	r0, r5
 800c7fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c800:	4798      	blx	r3
 800c802:	2000      	movs	r0, #0
 800c804:	e7e0      	b.n	800c7c8 <_raise_r+0x12>
	...

0800c808 <raise>:
 800c808:	4b02      	ldr	r3, [pc, #8]	; (800c814 <raise+0xc>)
 800c80a:	4601      	mov	r1, r0
 800c80c:	6818      	ldr	r0, [r3, #0]
 800c80e:	f7ff bfd2 	b.w	800c7b6 <_raise_r>
 800c812:	bf00      	nop
 800c814:	2000002c 	.word	0x2000002c

0800c818 <_kill_r>:
 800c818:	b538      	push	{r3, r4, r5, lr}
 800c81a:	2300      	movs	r3, #0
 800c81c:	4d06      	ldr	r5, [pc, #24]	; (800c838 <_kill_r+0x20>)
 800c81e:	4604      	mov	r4, r0
 800c820:	4608      	mov	r0, r1
 800c822:	4611      	mov	r1, r2
 800c824:	602b      	str	r3, [r5, #0]
 800c826:	f7f5 fdd0 	bl	80023ca <_kill>
 800c82a:	1c43      	adds	r3, r0, #1
 800c82c:	d102      	bne.n	800c834 <_kill_r+0x1c>
 800c82e:	682b      	ldr	r3, [r5, #0]
 800c830:	b103      	cbz	r3, 800c834 <_kill_r+0x1c>
 800c832:	6023      	str	r3, [r4, #0]
 800c834:	bd38      	pop	{r3, r4, r5, pc}
 800c836:	bf00      	nop
 800c838:	20000d7c 	.word	0x20000d7c

0800c83c <_getpid_r>:
 800c83c:	f7f5 bdbe 	b.w	80023bc <_getpid>

0800c840 <_init>:
 800c840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c842:	bf00      	nop
 800c844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c846:	bc08      	pop	{r3}
 800c848:	469e      	mov	lr, r3
 800c84a:	4770      	bx	lr

0800c84c <_fini>:
 800c84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c84e:	bf00      	nop
 800c850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c852:	bc08      	pop	{r3}
 800c854:	469e      	mov	lr, r3
 800c856:	4770      	bx	lr
